[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I’m Quy—an Applied Data Scientist. I’m from Hanoi, Vietnam 🇻🇳. Currently living in Singapore 🇸🇬.\nI blog about RecSys, ML, Productivity and other random things. You can find some of my side projects here.\nI teach a RecSys course for practitioners at FullStackDataScience."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Building a Conversational Assistant for Restaurant Discovery and Booking\n\n\nLessons from Creating a Chatbot Using RAG, LLMs, and Advanced Retrieval Techniques\n\n\n\ntech\n\n\nllm\n\n\n\n\n\n\nSep 22, 2024\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s build an ML system\n\n\nEnd-to-end set up and deploy on Kubernetes\n\n\n\ntech\n\n\nmachine learning\n\n\n\n\n\n\nJun 21, 2024\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/review-rec-bot/index.html",
    "href": "projects/review-rec-bot/index.html",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "",
    "text": "Project Details"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#demo",
    "href": "projects/review-rec-bot/index.html#demo",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#problem-statement",
    "href": "projects/review-rec-bot/index.html#problem-statement",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Problem Statement",
    "text": "Problem Statement\nListing/reservation businesses like Yelp offer value to users by providing useful information to make them find out where to go next. Good search and recommendation systems go a long way, but they are still far from delivering the ultimate experience where users can interact naturally with the system for complex queries or have a conversation to drill down their needs."
  },
  {
    "objectID": "projects/review-rec-bot/index.html#approach",
    "href": "projects/review-rec-bot/index.html#approach",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Approach",
    "text": "Approach\nBuild a chatbot assistant to assist users in discovering places to go and booking.\nWorkflow:\n\nDownload Yelp reviews data. Sample 5,240 reviews from 100 businesses.\nSet up development environment including experimentation tracking via MLflow, observability with Arize Phoenix\nBuild MVP version using LlamaIndex, Qdrant\nBuild synthetic evaluation datasets with 30 questions for retrieval and response. Manual response dataset are gradually built up and added based on error analysis\nConduct error analysis and look at the model’s output to come up with new iteration ideas. Run a total of 10 experiments to improve the RAG, with notable attempts including: Replacing Llama-8.1B with GPT-4o-mini, Fine-tuning Embedding Model, Hybrid Retrievers, Semantic Chunking, BGE Reranker, Query Expansion\nBuild RAG Agent based on OpenAI API with Query Engine tool and Reservation Service tool. Chatbot UI is built with Chainlit."
  },
  {
    "objectID": "projects/review-rec-bot/index.html#evaluation",
    "href": "projects/review-rec-bot/index.html#evaluation",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Evaluation",
    "text": "Evaluation\nEvaluation results can be found here.\nTwo proposed key metrics are Retrieval Hit Rate and Response Correctness.\nRetrieval is a critical component in any RAG system. Along with data prep, retrieval sits at the top of the pipeline so any improvements in these fronts is more likely to improve the overall system. Hit rate is chosen as a key metric because since we can employ rerank as a subsequent step, we have room to optimize for the ranking issues. \nFor response, Correctness measures both how relevant the answer is with respect to the query and how correct it is compared to the referenced answer. It’s therefore a better indicator than pure relevance, which is just based on the query and hence easier to get right.\nFor reference, Response Correctness on synthetic dataset has improved +166% from 1.75 / 5.00 from MVP version to 4.67 / 5.00 on the current version. The current Retrieval Hit Rate @ 50 reaches 73%, not directly comparable but at MVP version Retrieval Hit Rate @ 10 was 20%.\nAs next steps, while there is not much room to improve Response Correctness, we ought to increase Retrieval Hit Rate to 90% which should be doable since this dataset only contains a small amount of data."
  },
  {
    "objectID": "projects/review-rec-bot/index.html#learningsremarks",
    "href": "projects/review-rec-bot/index.html#learningsremarks",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Learnings/Remarks",
    "text": "Learnings/Remarks\n\nUsing question-style query leads to 5-20% uplift in retrieval hit rate compared to using keyword search\nBM25 Retriever alone results in 200% increase in retrieval effectiveness including hit rate, average precision, MRR and NDCG\nFine-tuning small embedding model like Snowflake/snowflake-arctic-embed-m-v1.5 yield +80% retrieval effectiveness, especially rankings of the retrieved nodes\nUsing GPT-4o-mini as response synthesizer significantly improve the quality of response in all aspects (especially correctness from 2.6 to 3.8) compared to Llama 3.1-8B-Instruct\nUsing TreeSummarize with custom prompt yields a +10% uplift on response correctness evaluation, from 3.97 to 4.37. Based on eyeballing we also see a way better response that is recommendation-like"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#challenges",
    "href": "projects/review-rec-bot/index.html#challenges",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Challenges",
    "text": "Challenges\n\nChallenge 1: Auto-retrieval not reliable\nWhile theoretically both precision and recall should be greatly improved if we are able to apply the right filters for User questions instead of relying on embedding/keyword matching, my first attempt to apply auto-retrieval with ChromaDB did not yield promising results. There were at least two syntactic issues which broke the agentic workflow. Even after fixing those two the unreliable nature of this approach is still there and I also witnessed a -10% degradation in Retrieval Hit Rate.\nIn the end I forfeited the feature but nevertheless look forward to a way to re-applying this technique.\n\n\nChallenges 2: Indexing pipeline takes too long\nIndexing 70K nodes from 30K reviews for 400 businesses takes more than 6 hours!"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#future-improvements",
    "href": "projects/review-rec-bot/index.html#future-improvements",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Future Improvements",
    "text": "Future Improvements\n\nGuardrail system inputs and outputs\nExperiment with Contextual Compression and Filters\nFine tune LLM Re-ranker (FlagEmbedding BGE Reranker)\nTry ColBERT as a new retriever (may be add to the list of retrievers)\nTry different loss function in training embeddings\nImprove the diversity by implement custom re-ranker that weight downs the reviews from the already seen biz_id\n\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Sep 2024). Building a Conversational Assistant for Restaurant Discovery and Booking. dvquys.com. https://dvquys.com/projects/review-rec-bot/."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html",
    "href": "posts/site-search-elasticsearch/index.html",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "",
    "text": "This article is originally published in Towards Data Science"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#intro",
    "href": "posts/site-search-elasticsearch/index.html#intro",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Intro",
    "text": "Intro\nOver the last 22 months I have been working as a site-search engineer who uses Elasticsearch to help improve relevance in our restaurant platform. I have deployed in total 83 releases including 3 major versions.\nWith roughly one release per week, I can say that not only our search engine is much better than it was 2 years ago, but I have also learned quite a lot. Though still far from a great search engine, here are some things worth sharing in my opinion. More importantly, I want to get feedback about them.\nThis blog post is to provide an approach to design the Elasticsearch query template to deal with common site-search problems including searching for matches across different fields, boosting results and testing. Together we will identify issues with the default approach and then gradually come up with a new one to address the issues altogether.\nThis Github repo contains the examples and code discussed in this post."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#main",
    "href": "posts/site-search-elasticsearch/index.html#main",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Main",
    "text": "Main\nWe now play the role of a search engineer for a restaurant platform, which allows diners to discover and make reservation for their next meals. We haven’t had much experience, but luckily the app does not require accuracy level of Google from the start. The key is to make gradual visible progresses!\nAlright, let’s dive into it. First off, we make sure user can search for restaurant by name. Here we can rely on the simple default query-match to get the job done.\n\n\nCode: Index our first two restaurants\n\nPOST _bulk\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"001sabichuong\" } }\n{ \"restaurant_name\": \"Sa Bi Chuong\", \"cuisine\": \"Vietnamese\", \"rating\": 5.0 }\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"002vietnamesephonoodle\" } }\n{ \"restaurant_name\": \"Vietnamese Pho Noodle\", \"cuisine\": \"Vietnamese\", \"rating\": 4.0 }\n\n# Test searching for one\n# Should return Vietnamese Pho Noodle\nGET restaurant/_search\n{\n  \"query\" : {\n    \"match\" : { \"restaurant_name\": \"vietnamese\" }\n  }\n}\n\nThe above snippet can be run at Kibana’s Dev Tools &gt; Console, which will be available at your localhost:5601 if you follow the repo.\nThe code is self-explained. We ask Elasticsearch to return restaurants whose name contains vietnamese. And we get back one result for Vietnamese Pho Noodle. No problems.\nBut we quickly find out that name is not the only place we want to look for when user submit a query. Given keywordvietnamese we should also return the restaurant Sa Bi Chuong, because it’s a Vietnamese restaurant as tagged in the cuisine. A multi_match query allows us to do exactly that.\n\n\nCode: Matching multiple fields\n\n# Should return all 2 Vietnamese restaurant with the Vietnamese Pho Noodle on top\nGET restaurant/_search\n{\n  \"query\" : {\n    \"multi_match\" : {\n      \"query\": \"vietnamese\",\n      \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n    }\n  }\n}\n\n\n\nResult\n\n\"hits\": {\n    ...\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.6931471,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"001sabichuong\",\n        \"_score\": 0.18232156,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        }\n      }\n    ]\n  }"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#problems-with-the-default-tfidf",
    "href": "posts/site-search-elasticsearch/index.html#problems-with-the-default-tfidf",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Problems with the default TFIDF",
    "text": "Problems with the default TFIDF\nNotice the above scores. The first one is like 4 times higher than the second, indicating that it’s much more relevant given query vietnamese. One might have an assumption that because matching at multiple fields will make the score higher.\nWhenever we have doubts, we can use Elasticsearch explain to get a detailed breakdown of its scoring components.\n\n\nCode: Let’s use explain=true to see what happens under the hood\n\n# Vietnamese Pho Noodle is on top because of the default implementation of TFIDF that penalizes the matching at cuisine field because there are multiple restaurants with cuisine=Vietnamese while there are only one restaurant with name=Vietnamese\n# Question: But why having the name Vietnamese in its name makes it more Vietnamese than other restaurants?\nGET restaurant/_search\n{\n  \"query\" : {\n    \"multi_match\" : {\n      \"query\": \"vietnamese\",\n      \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n    }\n  },\n  \"explain\": true\n}\n# Result 👇\n\"hits\": {\n    \"hits\": [\n      {\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.6931471,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        },\n        \"_explanation\": {\n          \"value\": 0.6931471,\n          \"description\": \"max of:\",\n          \"details\": [\n            # Matching in field `cuisine` yields score=0.18\n            # Note that by default the score is calculated by TFIDF\n            # More info about Elasticsearch TFIDF: https://www.elastic.co/guide/en/elasticsearch/reference/8.6/index-modules-similarity.html#bm25\n            {\n              \"value\": 0.18232156,\n              \"description\": \"weight(cuisine:vietnamese in 1) [PerFieldSimilarity], result of:\",\n              \"details\": [...]\n            },\n            # Matching in field `restaurant_name` yields score=0.69\n            {\n              \"value\": 0.6931471,\n              \"description\": \"weight(restaurant_name:vietnamese in 1) [PerFieldSimilarity], result of:\",\n              \"details\": [...]\n            }\n            # Because the final score is \"max of:\" those two above scores,\n            # it is equal to the matching score with `restaurant_name`\n          ]\n        }\n      },\n      {\n        \"_id\": \"001sabichuong\",\n        \"_score\": 0.18232156,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        },\n        # Similarly since there's no matching with `restaurant_name`,\n        # here the final score is equal to the matching score of `cuisine`\n        \"_explanation\": {\n          \"value\": 0.18232156,\n          \"description\": \"max of:\",\n          \"details\": [\n            {\n              \"value\": 0.18232156,\n              \"description\": \"weight(cuisine:vietnamese in 0) [PerFieldSimilarity], result of:\",\n              \"details\": [...]\n            }\n          ]\n        }\n      }\n    ]\n  }\n\nAbove we can see that Vietnamese Pho Noodle is on top because of the default implementation of TFIDF that penalizes the matching at cuisine field because there are multiple restaurants with cuisine=Vietnamese while there are only one restaurant with name=Vietnamese.\nDiving into the _explanation block, we realize that score difference originates from the TFIDF matching output for restaurant_name. This is expected as the algorithm assumes that a keyword is a better signal if it is not common and usually found in a lot of documents (sort of a solution to automatically handle stopwords). In our examples, both the restaurants have cuisine Vietnamese so according to TFIDF, that match does not say much about the relevance of the documents.\nWhether we should encourage this behavior is a question. Is it true that having Vietnamese in the name make one restaurant more “Vietnamese” than the other?\nAnother problem with TFIDF is that it takes into account the length of the field.\n\n\nCode: Let’s add another restaurant\n\nPOST _bulk\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"003vietnamesepho\" } }\n{ \"restaurant_name\": \"Vietnamese Pho\", \"cuisine\": \"Vietnamese\", \"rating\": 3.0 }\n\n# In the below example we see that the new Vietnamese Pho restaurant is ranked higher...\nGET restaurant/_search\n{\n  \"query\" : {\n    \"multi_match\" : {\n      \"query\": \"vietnamese pho\",\n      \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n    }\n  },\n  \"explain\": true\n}\n\nYou can find the detailed and lengthy result in Appendix 1. In short, we see that the result ranks restaurant Vietnamese Pho first and then Vietnamese Pho Noodle. Analyzing the component scores indicates that the key difference is that Vietnamese Pho has length=2 (words) while Vietnamese Pho Noodle has length=3. It feels unintuitive since we know that the second restaurant has higher rating, given that both, in practice, are equally matching to user’s keyword."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#reranking-boosting-with-function_score",
    "href": "posts/site-search-elasticsearch/index.html#reranking-boosting-with-function_score",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Reranking (boosting) with function_score",
    "text": "Reranking (boosting) with function_score\nAs we talk about rating, we can wrap our query with function_score to incorporate that information to modify our matching scores, hence have a better control over our ranking.\n\n\nCode: Function score\n\nGET restaurant/_search\n{\n  \"query\": {\n    \"function_score\": {\n      # Our main query is wrapped in a function_score clause\n      \"query\": {\n        \"multi_match\" : {\n          \"query\": \"vietnamese\",\n          \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n        }\n      },\n      # We define the functions that will be applied on top of the matching scores\n      # returned by our main query\n      \"functions\": [\n        {\n          \"field_value_factor\": {\n            \"field\": \"rating\",\n            \"modifier\": \"none\",\n            \"missing\": 1\n          }\n        }\n      ],\n      # Retrieve the max boosting defined inside `functions`\n      # Above there is only one boosting so it's applied by default\n      \"score_mode\": \"max\",\n      # Multiply the matching score with the boosting calculated from functions\n      \"boost_mode\": \"multiply\"\n    }\n  }\n}\n\n\n\nResult\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 1.7885544,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"003vietnamesepho\",\n        \"_score\": 1.5706451,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 3\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"001sabichuong\",\n        \"_score\": 0.66765696,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        }\n      }\n    ]\n  }\n}\n\nThe higher rating restaurant is on top now. But how about restaurant Sa Bi Chuong with rating=5? It being the last result seems like we haven’t boosted “enough”.\nWe might start tinkering a bit more with function_score to make that happen. Here is one of the implementation which models the boosting in a non-linear manner to effectively apply a strong boost on documents with rating=5.\n\n\nCode: Non-linear function score boosting\n\nGET restaurant/_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"multi_match\" : {\n          \"query\": \"vietnamese\",\n          \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n        }\n      },\n      \"functions\": [\n        # Apply a non-linear function to model that\n        # a rating of 5 has much more weight than rating of 4 (not just 25% more)\n        {\n          \"filter\": {\n            \"range\": {\n              \"rating\": {\n                \"gte\": 5,\n                \"lte\": 5\n              }\n            }\n          },\n          \"weight\": 10\n        },\n        {\n          \"filter\": {\n            \"range\": {\n              \"rating\": {\n                \"gte\": 4,\n                \"lt\": 5\n              }\n            }\n          },\n          \"weight\": 2\n        }\n      ],\n      \"score_mode\": \"max\",\n      \"boost_mode\": \"multiply\"\n    }\n  }\n}\n\n\n\nResult\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"001sabichuong\",\n        \"_score\": 1.3353139,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.8942772,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"003vietnamesepho\",\n        \"_score\": 0.52354836,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 3\n        }\n      }\n    ]\n  }\n}\n\nYou may wonder that: “Isn’t the function boosting now looking too arbitrary? Will it work for other cases?”. Indeed, that’s the question we should ask ourselves. Overtime, with more and more requirements, our query template will grow in complexity, leading to conflicts between the modifications we make.\nLet’s move to the next example to illustrate what I mean by “conflict”."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#the-complexity-comes-with-fuzzy-matching",
    "href": "posts/site-search-elasticsearch/index.html#the-complexity-comes-with-fuzzy-matching",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "The complexity comes with fuzzy matching",
    "text": "The complexity comes with fuzzy matching\nWhile not vital, the ability to handle user’s typo is always a nice-to-have feature, especially when they are now familiar with smart search engine like Google’s. Elasticsearch has a built-in mechanism called fuzzy matching, which is configurable with the option fuzziness.\n\n\nCode: fuzzy matching\n\n# The use of `bool` query below is to implement the logic: At least one condition should match\nPUT _scripts/01-default-fuzzy-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\": {\n        \"function_score\": {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"bool\": {\n                    \"should\": [\n                      {\n                        \"multi_match\" : {\n                          \"query\": \"{{query_string}}\",\n                          \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n                        }\n                      },\n                      {\n                        \"multi_match\" : {\n                          \"query\": \"{{query_string}}\",\n                          \"fields\": [ \"restaurant_name\", \"cuisine\" ],\n                          # For the purpose of this demo, default behavior works well enough\n                          \"fuzziness\": \"AUTO\"\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          },\n          \"functions\": [\n            {\n              \"filter\": {\n                \"range\": {\n                  \"rating\": {\n                    \"gte\": 5,\n                    \"lte\": 5\n                  }\n                }\n              },\n              \"weight\": 10\n            },\n            {\n              \"filter\": {\n                \"range\": {\n                  \"rating\": {\n                    \"gte\": 4,\n                    \"lt\": 5\n                  }\n                }\n              },\n              \"weight\": 2\n            }\n          ],\n          \"score_mode\": \"max\",\n          \"boost_mode\": \"multiply\"\n        }\n      }\n    },\n    \"params\": {\n      \"query_string\": \"My query string\"\n    }\n  }\n}\n\nNotice that we just created a query template instead of running a query. We can now invoke the query with paramaters, which is a nice feature Elasticsearch introduces to make our code look less overwhelming. Like this:\nGET /_search/template\n{\n  \"id\": \"01-default-fuzzy-search-template\",\n  \"params\": {\n    \"query_string\": \"vietnames\"\n  }\n}\nThe above query returns our expected Vietnamese restaurant given a typo keyword vietnames. Under the hood, fuzzy matching uses Levenshtein edit distance, which measures similarity between strings by the number of modifications one make to make one become another. In our example, we just need to add one letter e at the end to make vietnames become vietnamese. Quite an easy task for the algorithm. One might also argue that it’s quite easy for our developers as well. 2 lines of code and a new beautiful feature.\nWell, the interesting bit lies elsewhere. One day, our sales team suddenly comes to us with a complaint that search result is wrong. People are getting Japanese BBQ restaurants over Korean ones even when they explicitly search for kbbq (which is a common acronym for korean bbq).\nHere are the restaurants:\nPOST _bulk\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"004parkhangseokbbq\" } }\n{ \"restaurant_name\": \"Park Hang-seo's KBBQ\", \"cuisine\": \"Korean\", \"rating\": 2.0 }\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"005bestbbqintown\" } }\n{ \"restaurant_name\": \"Best BBQ in town\", \"cuisine\": \"Japanese\", \"rating\": 5.0 }\nQuery:\n{\n  \"id\": \"01-default-fuzzy-search-template\",\n  \"params\": {\n    \"query_string\": \"kbbq\"\n  }\n}\n\n\nResult\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"005bestbbqintown\",\n        \"_score\": 8.384459,\n        \"_source\": {\n          \"restaurant_name\": \"Best BBQ in town\",\n          \"cuisine\": \"Japanese\",\n          \"rating\": 5\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"004parkhangseokbbq\",\n        \"_score\": 2.5153382,\n        \"_source\": {\n          \"restaurant_name\": \"Park Hang-seo's KBBQ\",\n          \"cuisine\": \"Korean\",\n          \"rating\": 2\n        }\n      }\n    ]\n  }\n}\n\nTo understand what is happening, we need to enable explain=true to see what contributes to the final scores. As this time the output is too verbose, here are the findings:\n\nThe keyword matching score (before boosting) for the Best BBQ in town restaurant is 0.8, less than the 1.2 of Park Hang-seo's KBBQ\nSo if no boosting applied, we will see Park Hang-seo's KBBQ restaurant ranks at the first position\nBut then the boosting from rating modifies the score, leading to the ordering as we can see\n\nOne way to frame the issue is that we have imperfect boosting. Say we have a better formula that strikes the right balances, then the problem should be solved. But it’s close to impossible to guarantee that the new formula will not cause any other issues. We don’t want these kinds of issue creep into the system without any notice and then some day being flagged out by stakeholders. We want to be the first to be aware of those issues, especially whenever we make any changes. Therefore, before discussing potential solutions, I hope we all agree that the very next important thing we should do is (yes, you are probably thinking about the same thing as I am) setting up a testing/evaluation mechanism."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#how-should-we-create-test-cases-for-this-search-application",
    "href": "posts/site-search-elasticsearch/index.html#how-should-we-create-test-cases-for-this-search-application",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "How should we create test cases for this search application?",
    "text": "How should we create test cases for this search application?\nIMHO, the first challenge is about moving data. The queries and the documents can both grow over time, so a static mock dataset might not be a very good representative of the search relevance anymore after a month. The next bit is related to our mindset. Sometimes we might need to think about whether we need 100% passed test cases in order to fix this new very urgent issue. For example, there are cases where if you fix some issues then the search result orderings of the other test cases might alter a bit. If we hard-code the rankings, then we might sweat ourselves trying to tweak our query template. But in practice a lot of the times we neither don’t need the ranking to be exactly pre-defined nor we are perfectly sure about which ordering is actually optimal. We should consider using a soft mechanism where we quantify the relevance of the system and using threshold instead.\nHere we look at how we can use Elasticsearch Ranking Evaluation API to implement such evaluation scheme:\n\n\nCode: Evaluation API\n\nGET restaurant/_rank_eval\n{\n  # Query template comes in really handy when used in conjunction with _rank_eval\n  \"templates\": [\n     {\n        \"id\": \"01-default-fuzzy-search-template\",\n        \"template\": {\n            \"id\": \"01-default-fuzzy-search-template\"\n        }\n     }\n  ],\n  \"requests\": [\n    {\n     \"id\": \"kbbq_query\",\n     # Here we manually define the true positives with rating &gt;= 1.0\n     # The actual rating number helps when using metrics that takes into account\n     # the ranking of the search results\n     \"ratings\": [\n        { \"_index\": \"restaurant\", \"_id\": \"004parkhangseokbbq\", \"rating\": 3 },\n        { \"_index\": \"restaurant\", \"_id\": \"005bestbbqintown\", \"rating\": 1 }\n      ],\n     \"template_id\": \"01-default-fuzzy-search-template\",\n     \"params\": {\n        \"query_string\": \"kbbq\"\n      }\n    },\n    {\n     \"id\": \"vietnamese_query\",\n     \"ratings\": [\n        { \"_index\": \"restaurant\", \"_id\": \"001sabichuong\", \"rating\": 3 },\n        { \"_index\": \"restaurant\", \"_id\": \"002vietnamesephonoodle\", \"rating\": 3 },\n        { \"_index\": \"restaurant\", \"_id\": \"003vietnamesepho\", \"rating\": 3 }\n      ],\n     \"template_id\": \"01-default-fuzzy-search-template\",\n     \"params\": {\n        \"query_string\": \"vietnamese\"\n      }\n    }\n  ],\n  \"metric\": {\n    \"dcg\": {\n      \"k\": 5,\n      \"normalize\": true\n    }\n  }\n}\n\n\n\nResult\n\n{\n  \"metric_score\": 0.8549048706984328,  # This is the overall metric score, best is 1.0, worst is 0.0\n  \"details\": {\n    \"kbbq_query\": {\n      # This kbbq_query has a imperfect score because it ranks the more relevant result lower\n      \"metric_score\": 0.7098097413968655,\n      \"unrated_docs\": [],\n      \"hits\": [\n        {\n          \"hit\": {\n            \"_index\": \"restaurant\",\n            \"_id\": \"005bestbbqintown\",\n            \"_score\": 8.384459\n          },\n          \"rating\": 1\n        },\n        {\n          \"hit\": {\n            \"_index\": \"restaurant\",\n            \"_id\": \"004parkhangseokbbq\",\n            \"_score\": 2.5153382\n          },\n          \"rating\": 3\n        }\n      ],\n      \"metric_details\": {\n        ...\n      }\n    },\n    \"vietnamese_query\": {\n      \"metric_score\": 1,\n      \"unrated_docs\": [],\n      \"hits\": [\n        ...\n      ],\n      \"metric_details\": {\n        ...\n      }\n    }\n  },\n  \"failures\": {}\n}\n\nLet’s try to better our search by introducing changes that move the evaluation score closer to the perfect 1.0."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#our-revised-search-model",
    "href": "posts/site-search-elasticsearch/index.html#our-revised-search-model",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Our revised search model",
    "text": "Our revised search model\nBefore start designing a new query template, we can take a step back and really think about how we should model the search engine. Below are the essentials:\n\nExact matching will always surface on top of not-exact ones like fuzzy matching;\nExact matches does not take into account field length or word/document frequencies. If two documents have the same exact match in a field, they should have the same keyword matching score;\nWithin the same level of matching (whether exact or fuzzy), while the initial keyword matching scores should be the same, they can be reranked by certain modifiers such as distance, popularity, … However, the modified scores should not make the final score to exceed the base score of the upper level, e.g. modifed fuzzy score should not be greater than exact base score. This is to ensure the essential #1.\n\nIf you watch football, this is similar to how the leagues such as Premiere League rank their teams. No matter how much more goals the team L has scored compared to team M’s or their head-to-head results, if team M has more points than team M has a higher ranking. The other measures are for tie-breaker only.\nThis understanding can be then transferred to how we use Elasticsearch to express our model.\nOne approach is to use dis_max query combined with constant_score query. The idea is to categorize each type of matching into different levels of score where one level will have twice the score of the below level. The documents fall into one level of matching (tie) will be reranked by modifiers but eventually the new scores will not exceed the upper base score. Here is the new query template:\n\n\nCode: New query template\n\nPUT _scripts/02-constant-score-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\": {\n        \"function_score\": {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"bool\": {\n                    \"should\": [\n                      {\n                        # `dis_max` query gets the max score of an array of clauses\n                        \"dis_max\": {\n                          \"queries\": [\n                            {\n                              # `constant_score` says that if matches, return a constant score\n                              \"constant_score\": {\n                                \"filter\": {\n                                  \"multi_match\" : {\n                                    \"query\": \"{{query_string}}\",\n                                    \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n                                  }\n                                },\n                                # This is the constant that is returned as score\n                                # Note that the exact number is chosen intentionally\n                                # Here the upper level will be twice the lower level\n                                # and we will restrict the modifiers to be only\n                                # able to boost by at most 100% the base score\n                                # so that the lower level can not exceed the upper\n                                \"boost\": 2\n                              }\n                            },\n                            {\n                              \"constant_score\": {\n                                \"filter\": {\n                                  \"multi_match\" : {\n                                    \"query\": \"{{query_string}}\",\n                                    \"fields\": [ \"restaurant_name\", \"cuisine\" ],\n                                    \"fuzziness\": \"AUTO\"\n                                  }\n                                },\n                                \"boost\": 1\n                              }\n                            }\n                          ]\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          },\n          \"functions\": [\n            # Design the modifiers to be multiplier of maximum 1.9999 the base score\n            {\n              \"weight\": 1\n            },\n            {\n              \"field_value_factor\": {\n                \"field\": \"rating\",\n                \"modifier\": \"ln\",\n                \"missing\": 1\n              },\n              \"weight\": 0.1\n            }\n          ],\n          \"score_mode\": \"sum\",\n          \"boost_mode\": \"multiply\"\n        }\n      }\n    },\n    \"params\": {\n      \"query_string\": \"My query string\"\n    }\n  }\n}\n\nWhen we re-run the evaluation, we can observe that the normalized DCG metric now has score equal to 1.0, denoting a perfect accuracy!"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#summary",
    "href": "posts/site-search-elasticsearch/index.html#summary",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Summary",
    "text": "Summary\nThis blog post focuses on putting you in the shoe of an Elasticsearch engineer who has to derive query templates that fit the needs of a site-search enginer. We have briefly coverred the following topics:\n\nKeyword matching with multiple fields\nUnderstanding default Elasticsearch scoring\nProblems with the default TFIDF\nBoosting search results by attributes\nFuzzy matching\nElasticsearch query templateEvaluation with Rank Evaluation API\nConstructing query with dis_maxand constant_score\n\nThough definitely not optimal, I hope that parts of the blog post help you come closer to utilize Elasticsearch to help solve your own problems.\nI also much appreciate any comments or feedbacks. If you want to discuss more, please comment on this post or open an issue in the Github repo.\nThanks all!"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#appendix",
    "href": "posts/site-search-elasticsearch/index.html#appendix",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Appendix",
    "text": "Appendix\n\nAppendix 1: Detailed breakdown of default TFIDF matching where length of the field value affect overall matching score\n\n\nResults\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_id\": \"003vietnamesepho\",\n        \"_score\": 1.0470967,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 3\n        },\n        \"_explanation\": {\n          \"value\": 1.0470967,\n          \"description\": \"max of:\",\n          \"details\": [\n            {\n              \"value\": 0.13353139,\n              \"description\": \"sum of:\",\n              \"details\": [\n                {\n                  \"value\": 0.13353139,\n                  \"description\": \"weight(cuisine:vietnamese in 0) [PerFieldSimilarity], result of:\",\n                  \"details\": [...]\n                }\n              ]\n            },\n            {\n              \"value\": 1.0470967,\n              \"description\": \"sum of:\",\n              \"details\": [\n                # Matching score with \"vietnamese\"\n                {\n                  \"value\": 0.52354836,\n                  \"description\": \"weight(restaurant_name:vietnamese in 0) [PerFieldSimilarity], result of:\",\n                  \"details\": [\n                    {\n                      \"value\": 0.52354836,\n                      \"description\": \"score(freq=1.0), computed as boost * idf * tf from:\",\n                      \"details\": [\n                        {\n                          \"value\": 2.2,\n                          \"description\": \"boost\",\n                          \"details\": []\n                        },\n                        {\n                          \"value\": 0.47000363,\n                          \"description\": \"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\",\n                          ...\n                        },\n                        {\n                          \"value\": 0.50632906,\n                          \"description\": \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\",\n                          \"details\": [\n                            {\n                              \"value\": 1,\n                              \"description\": \"freq, occurrences of term within document\",\n                              \"details\": []\n                            },\n                            {\n                              \"value\": 1.2,\n                              \"description\": \"k1, term saturation parameter\",\n                              \"details\": []\n                            },\n                            {\n                              \"value\": 0.75,\n                              \"description\": \"b, length normalization parameter\",\n                              \"details\": []\n                            },\n                            # Notice the length=2 here is in the denominator,\n                            # which means that the higher the length the less\n                            # the score\n                            {\n                              \"value\": 2,\n                              \"description\": \"dl, length of field\",\n                              \"details\": []\n                            },\n                            {\n                              \"value\": 2.6666667,\n                              \"description\": \"avgdl, average length of field\",\n                              \"details\": []\n                            }\n                          ]\n                        }\n                      ]\n                    }\n                  ]\n                },\n                # Matching score with \"pho\"\n                {\n                  \"value\": 0.52354836,\n                  \"description\": \"weight(restaurant_name:pho in 0) [PerFieldSimilarity], result of:\",\n                  # Details are exactly like above\n                  \"details\": [...]\n                }\n              ]\n            }\n          ]\n        }\n      },\n      {\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.8942772,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        },\n        \"_explanation\": {\n          \"value\": 0.8942772,\n          \"description\": \"max of:\",\n          \"details\": [\n            {\n              \"value\": 0.13353139,\n              \"description\": \"sum of:\",\n              \"details\": [...]\n            },\n            {\n              \"value\": 0.8942772,\n              \"description\": \"sum of:\",\n              \"details\": [\n                {\n                  \"value\": 0.4471386,\n                  \"description\": \"weight(restaurant_name:vietnamese in 1) [PerFieldSimilarity], result of:\",\n                  \"details\": [\n                    {\n                      \"value\": 0.4471386,\n                      \"description\": \"score(freq=1.0), computed as boost * idf * tf from:\",\n                      \"details\": [\n                        ...,\n                        {\n                          \"value\": 0.4324324,\n                          \"description\": \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\",\n                          \"details\": [\n                            ...,\n                            # Here the length=3 (greater than length=2 of the\n                            # above restaurant)\n                            {\n                              \"value\": 3,\n                              \"description\": \"dl, length of field\",\n                              \"details\": []\n                            },\n                            ...\n                          ]\n                        }\n                      ]\n                    }\n                  ]\n                },\n                {\n                  \"value\": 0.4471386,\n                  \"description\": \"weight(restaurant_name:pho in 1) [PerFieldSimilarity], result of:\",\n                  \"details\": [...]\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Jun 2023). A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration. dvquys.com. https://dvquys.com/posts/site-search-elasticsearch/."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html",
    "href": "posts/deploy-ml-gcp/index.html",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "",
    "text": "This article is originally published in VinID Engineering\nImagine a company named Rainbow imports boxes of flowers and need to classify them into species. For six months, they have some staff label the boxes manually. Now, they hire you to build a Machine Learning model to do the task.\nWith a small amount of labelled data as input and tons of experience working on Kaggle projects, you quickly develop a 95% accuracy using simple RandomForestClassifier from the popular scikit-learn library. Nice. Stakeholders approve and ask you when you could deploy that model to production.\nHmm, deploy a model from my laptop? …\nIn case you wonder, I hope this tutorial will help you understand one among some common and most simple approaches. The diagram below depicts how we will use Google Cloud Platform to do the job in a batch-processing manner.\nI choose the Iris data set as our input to help you see how our approach works with small-sized problems. All the codes are in this repo."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#introduction",
    "href": "posts/deploy-ml-gcp/index.html#introduction",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Introduction",
    "text": "Introduction\nLike many other self-taught data people, I am familiar with manipulating data and develop a model on my laptop.\nHowever, when you’re solving real-world problems, your duty does not stop after you deliver a presentation. You will have to think about how to bring that solution to the production environment.\nOver the last few months, I have tried to deploy multiple computing pipelines. They are different in their scopes and complexity, ranging from processing a dozen of MB to 400 GB data per run. In this article, I want to summarize and share what I learned."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#the-targeted-audience",
    "href": "posts/deploy-ml-gcp/index.html#the-targeted-audience",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "The targeted audience",
    "text": "The targeted audience\nThis post is for data analysts/scientists who want to deploy their local solution, especially those without a software engineering background.\nYou will need Cloud Dataproc to proceed. This product allows you to spin up a cluster of machines to run your computing job in a distributed manner. Please refer to this documentation if you don’t know what Dataproc is."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#agenda",
    "href": "posts/deploy-ml-gcp/index.html#agenda",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Agenda",
    "text": "Agenda\n\nDiscuss the approach\nStep-by-step instructions to create the infrastructure and run the pipeline\nExplain codebase\nIntroduce other extended components, including Big Data processing with Apache Spark, scheduler with Airflow, local development environment, unit testing\nSummary"
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#approaches",
    "href": "posts/deploy-ml-gcp/index.html#approaches",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Approaches",
    "text": "Approaches\n\nAbout writing codes\nInstead of writing a long script to do everything, we break a pipeline into tasks and checkpoint interim data to disk. For example, after doing preprocess on train and test data, we dump both the data outputs and the transformer to Google Cloud Storage. We then load those objects as inputs for the next step.\nThis strategy has several purposes. First, for a long-running task, if a job fails at one of the last steps, we can re-run the pipeline from the nearest checkpoint rather than wasting time and resources restarting the whole pipeline. Second, it allows us to (1) debug more easily, (2) get alert when things break and (3) monitor interim outputs. Lastly, decoupled components can be understood more clearly, and easier to be replaced or extended later.\n\n\nAbout computing resources\nNormally for a small input size, we are fine with setting up a single virtual machine on the cloud. However, in some companies with mature cloud practice, the overhead of managing that VM is a type of cost that is difficult to justify. Especially when we have better options. For instance, Cloud Dataproc provides us with virtual machines that only live for the duration of one run, thereby free us from managing the machines. In this post, we explore Dataproc as our main engine for all the computing process."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#step-by-step-instructions",
    "href": "posts/deploy-ml-gcp/index.html#step-by-step-instructions",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Step-by-step instructions",
    "text": "Step-by-step instructions\n\nCreate a GCP project and enable necessary components\n\n👉 Create a free GCP account with $300 credit by going to console.cloud.google.com. Beware that by following this tutorial, you might incur a cost of about $0.2–$0.5.\n\n\n\n\n\n👉 Click Billing at the left sidebar and initiate a billing account to be able to use the components used in this tutorial\n\n\n\n\n\n👉 Select Library, then search and enable the following API: Cloud Dataproc, Cloud Storage and Cloud Firestore.\n👉 Navigate to the Firestore either by scrolling the sidebar to the left or search from the top menu bar. When you arrive at the below screen, choose SELECT NATIVE MODE, then choose us-east1 as the location.\n\n\n\n\n\n\nEnvironment setup\n\nStep 1: Launch terminal window\n\n👉 At the home page of your GCP project, select the command button to the right of your menubar. The CloudShell window then appears as you can see below:\n\n\n\n\n\n👉 Launch Cloud Shell Editor:\n\n\n\n\n\n\nIt’s recommended to use Cloud Shell to follow this tutorial. However, if you’re using Linux and want to use terminal on your local machine, make sure you first install the Google Cloud SDK and firebase CLI.\n\n\nStep 2: Clone Github repo\n\n👉 In the Terminal window:\n\ngit clonehttps://github.com/dvquy13/gcp_ml_pipeline.git\ncd gcp_ml_pipeline\n\n👉 Select File then open the file gcp_ml_pipeline/configs/.project_env:\n\n\n\n\n\n👉 Replace the values enclosed by &lt;&gt;. For the GCP_PROJECT, you need to provide the id of your GCP project. For the remaining, feel free to choose some random names for the global variables that identify your resources. The final output looks like this:\n\nGCP_PROJECT='zinc-primer-230105'\nGCS_BUCKET=dvquys-tut-gcp-ml-pipeline\nDATA_LOCATION=us-east1\nBQ_DATASET=tut_iris\nBQ_ORG_TABLE=F_ORIGINAL\nCLUSTER_NAME=iris-pred\n\n👉 Grant execute permission to the folder scripts by running the command: chmod +x -R ./scripts. Then, run ./scripts/00_import_data_to_bigquery.sh. Link to the script.\n\n\n\nStep 3: Create Dataproc cluster and submit jobs\nWe use Makefile to orchestrate our actions. You can find it here.\n️Now, run the following commands in sequence:\n\nmake create-dataproc-cluster: This command creates a Dataproc cluster. The single-node flag indicates that this is a cluster containing only one machine. n1-standard-1 is the cheapest machine we can rent. To install Python packages, we supply the metadata and initialization-actions params.\nmake build: Package your code, including your source code and other 3rd party libraries that you can not pre-install when creating the cluster (PyYAML for example). To submit a job to the cluster, we will send these codes to those machines via the gcloud dataproc jobs submit pyspark command.\nmake submit-job ENV=dev MODULE=data_import TASK=query_train_pred: Submit job cloning input data for training and predicting. The submit-job make command allows you to use this interface to run on both local and development environments.\nmake submit-job ENV=dev MODULE=feature_engineer TASK=normalize: Prepare features. In this illustrative example, we choose to include only normalization in the pipeline. After learning the normalization parameters from the train data set, we save those configurations for later usage.\nmake submit-job ENV=dev MODULE=model TASK=fit: Train model. Here we build a pipeline consisting of 2 steps, Normalization and Logistic Regression. After that, we persist the fit pipeline.\nmake submit-job ENV=dev MODULE=predict TASK=batch_predict: Batch predict. This job demonstrates the process when you use your learned model to make predictions.\nmake submit-job ENV=dev MODULE=predict TASK=store_predictions: Store predictions. The reason we do not combine this with the above step is two-fold. First, writing to a database often takes time and requires several retries. Second, we write to a document database like Cloud Firestore because when other team uses, they typically retrieve one document per query. However, there are times when we want to inspect the whole batch of predictions (e.g. debugging, count number of documents scored more than 0.9). For this query pattern, we will better off using the persisted outputs from the previous step, stored as parquet files in Cloud Storage.\nmake delete-dataproc-cluster: Delete Dataproc cluster. After the process finishes, delete the cluster so no further cost incurs.\n\n\n\n\nSucceeded Dataproc jobs\nYou can see that your predictions are stored at Cloud Firestore by accessing its web console.\n\n\n\nFirestore populated with predictions\nAlong the way, you will see that the output data of each step is persisted in Cloud Storage. I use parquet rather than CSV as the serialization format because it can embed schema information (therefore you do not have to specify column types when reading) and reduce storage size. For more detail, please refer to this benchmark.\n\n\n\nClean up\n\n👉 Finally, when you’re done exploring the results, you can delete all resources by running these commands:\n\n./scripts/01_erase_resources.sh\n./scripts/02_disable_resources.sh\n./scripts/03_delete_project.sh"
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#explain-codebase",
    "href": "posts/deploy-ml-gcp/index.html#explain-codebase",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Explain codebase",
    "text": "Explain codebase\nscripts/: This directory contains some initial scripts, which are the steps to help you set things up. In practice, I also favor using script rather than user interfaces such as web console because it is self-documented and easy for others to follow the exact steps.\nconfigs/: Store all the arguments that need to be set initially. .project_env is a file to store the global variables used to work with GCP. We also have the runtime.yaml, where we use Anchor, Alias and Extension in YAML to define runtime parameters for multiple environments. Both of these files serve as a centralized config store so that we can easily look up and make changes, instead of finding the configs scattered elsewhere in the code.\nMakefile: Originally Makefile is used to orchestrate the build process in C programming language. But it has done so well out of being just a shortcut so people start using it to facilitate ML model development. I have seen many tutorials using this tool, including the one that inspires me to design my Pyspark codebase.In this small project, we also use Makefile to save us a lot of time. As you can see above in Step 3, I put there our frequently used commands so that I can easily type make &lt;something&gt; to run a particular step.\niris_pred/: Source code.\nmain.py: is the interface to all tasks. This file parses the arguments to load config and get the job name, then call analyze function in entry_point.py from the appropriate module.\njobs/: contain tasks as modules. Inside jobs, we have one module corresponding to a step in our pipeline. All these modules expose an entry_point.py file where we unify the API to easily and consistently communicate with main.py.\n\n\nCode: train.py\n\n\n\niris_pred/jobs/model/train.py\n\nimport logging\nlogger = logging.getLogger(__name__)\nimport subprocess\n\nfrom shared.io_handler import IOHandler\nfrom jobs.feature_engineer.normalize import FeatureNormalizer\nfrom sklearn.externals import joblib\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\n\n\nclass Trainer:\n    def __init__(self, params, load: bool):\n        self.params = params\n\n        self.io_handler = IOHandler(params)\n        self.interim_output_path, self.final_output_path = \\\n            self._get_fpath()\n\n        self.normalizer = None\n        self.learner = None\n        self.pipeline = None\n\n    def _get_fpath(self):\n        interim_output_path = \\\n            f'../{self.params.io.pipeline}/pipeline.joblib'\n        final_output_path = \\\n            f'{self.io_handler.fpath_dict.pipeline}/pipeline.joblib'\n        return interim_output_path, final_output_path\n\n    def _load_train_data(self):\n        X_train = self.io_handler.load('X_train')\n        y_train = self.io_handler.load('y_train')['species']\n        return X_train, y_train\n\n    def _load_transformer(self):\n        normalizer_wrapper = FeatureNormalizer(self.params, load=True)\n        self.normalizer = normalizer_wrapper.normalizer\n\n    def _initiate_learner(self):\n        self.learner = LogisticRegression()\n\n    def _make_pipeline(self):\n        self.pipeline = make_pipeline(\n            self.normalizer,\n            self.learner)\n\n    def _fit(self, X_train, y_train):\n        self.pipeline.fit(X_train, y_train)\n\n    def _persist_pipeline(self):\n        # Temporarily save model to disk\n        joblib.dump(self.pipeline, self.interim_output_path)\n\n        # Copy model to GCS\n        if self.params.env_name != 'local':\n            logger.info(f\"Persisting {self.final_output_path}...\")\n            subprocess.check_output([\n                'gsutil', '-m', 'cp', '-r',\n                self.interim_output_path,\n                self.final_output_path])\n\n    def run(self):\n        X_train, y_train = self._load_train_data()\n        self._load_transformer()\n        self._initiate_learner()\n        self._make_pipeline()\n        self._fit(X_train, y_train)\n        self._persist_pipeline()\n\n\nAs you can see in the snippet above, the class Trainer expose a function run. Each step in the process corresponds to a private function declared in the same class.\nshared/: functions and classes to be reused across modules\nIn io_handler.py, the class IOHandler applies the principle Composition Over Inheritance to ease the process of loading outputs from the previous step."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#further-discussion",
    "href": "posts/deploy-ml-gcp/index.html#further-discussion",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Further discussion",
    "text": "Further discussion\nTo completely build and operate a pipeline, there is still more to be considered.\n\nApache Spark for bigger data\nIn this tutorial, we rent one small machine from Dataproc and use pandas as our preprocessing engine, which perfectly handles the case of data fit into the memory of that machine. However, often data input in real-world situations will be much bigger, therefore require us to use a distributed computing framework for scalability. In that case, you can just switch to using Apache Spark. From version 1.3, Spark introduces its DataFrame API, which greatly bears resemblance to Pandas counterpart. After porting your code from Pandas to Spark, to be able to run jobs across multiple machines, you just need to create a bigger cluster with a master and multiple workers.\n\n\nApache Airflow for orchestration\nMost of the batch job is not ad hoc. If it is, we should not even think about putting effort to standardize the process in the first place. Apache Airflow can play the role of both a scheduler and a monitor. It keeps metadata of each run and can send you alerts when things fail.\n\n\n\n\nExample of Airflow DAG: Source\n\n\n\nAn alternative is Dataproc Workflows. This is a native solution offered by GCP, but I haven’t tried it myself so I will just leave the documentation here.\n\n\nLocal development\nBecause rarely our codes work the first time we write them, it’s very important to be able to quickly test without having to go through all the boilerplate steps from setting up variables to requesting cloud resources. My suggestion is that we should set up our local environment asap. We can install Apache Spark 2.4.3+ to act as our runner engine, and MongoDB to be our alternative for Cloud Firestore. Here in the code repo, you can still refer to some line containing what I call the “environment branching logic”, which enables you to switch between running the same code on both local and cloud environments.\n\n\nUnit testing\nMany people have already talked about unit testing, so I won’t go too detailed here. I also don’t do unit testing in this tutorial for the sake of simplicity. However, I strongly encourage you to add testing yourself. Whatever it takes, unit testing forces us to modularize our code and add a layer of alerting. This is very important because things in data science often break in silence."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#summary",
    "href": "posts/deploy-ml-gcp/index.html#summary",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Summary",
    "text": "Summary\nHere is a summary of what you have learned in this tutorial:\n\nHow to utilize different Google Cloud Platform components to build a batch job pipeline (whether it involves ML or not).\nA product named Google Cloud Dataproc, where you can both submit a light-weight job via single-node mode and easily scale to a cluster of computers.\nOne approach to structurize ML pipeline codebase: Link to the repo.\nSome convenient components in model development, e.g. Makefile, runtime config, parquet persistence. This mostly helps people with little or no software engineering background.\n\nAgain, one of my main goals in writing this article is to receive feedback from the community, so I can do my job better. Please feel free me leave me comments, and I hope you guys enjoy this tutorial."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#references",
    "href": "posts/deploy-ml-gcp/index.html#references",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "References",
    "text": "References\n\nRicky Kim. (Dec 2018). PySpark Sentiment Analysis on Google Dataproc. towardsdatascience.com. https://towardsdatascience.com/step-by-step-tutorial-pyspark-sentiment-analysis-on-google-dataproc-fef9bef46468.\nEvan Kampf. (Jan 2017). Best Practices Writing Production-Grade PySpark Jobs. developerzen.com. https://developerzen.com/best-practices-writing-production-grade-pyspark-jobs-cb688ac4d20f.\nKing Chung Huang. (Oct 2017). Don’t Repeat Yourself with Anchors, Aliases and Extensions in Docker Compose Files. medium.com. https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#credits",
    "href": "posts/deploy-ml-gcp/index.html#credits",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Credits",
    "text": "Credits\nKudos to Bido for reviewing my work; to anh Khanh, anh Linh, anh Tuan for providing me feedback.\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Feb 2020). From Model to Production: Deploying Your Machine Learning Solution on Google Cloud. dvquys.com. https://dvquys.com/posts/deploy-ml-gcp/."
  },
  {
    "objectID": "projects/reviews-parsing-mlsys/index.html",
    "href": "projects/reviews-parsing-mlsys/index.html",
    "title": "Let’s build an ML system",
    "section": "",
    "text": "This project focuses on applying engineering practices to build a Machine Learning System using Kubernetes and deploy on Google Cloud Platform."
  },
  {
    "objectID": "projects/reviews-parsing-mlsys/index.html#architecture",
    "href": "projects/reviews-parsing-mlsys/index.html#architecture",
    "title": "Let’s build an ML system",
    "section": "Architecture",
    "text": "Architecture"
  },
  {
    "objectID": "projects/reviews-parsing-mlsys/index.html#demo",
    "href": "projects/reviews-parsing-mlsys/index.html#demo",
    "title": "Let’s build an ML system",
    "section": "Demo",
    "text": "Demo\n\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Jun 2024). Let’s build an ML system. dvquys.com. https://dvquys.com/projects/reviews-parsing-mlsys/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Building a Conversational Assistant for Restaurant Discovery and Booking\n\n\nLessons from Creating a Chatbot Using RAG, LLMs, and Advanced Retrieval Techniques\n\n\n\ntech\n\n\nllm\n\n\n\n\n\n\nSep 22, 2024\n\n\n4 min\n\n\n\n\n\n\n\nLet’s build an ML system\n\n\nEnd-to-end set up and deploy on Kubernetes\n\n\n\ntech\n\n\nmachine learning\n\n\n\n\n\n\nJun 21, 2024\n\n\n1 min\n\n\n\n\n\n\n\nA Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration\n\n\nA Practical Guide to Designing Query Templates, Boosting Relevance, and Addressing Site-Search Challenges\n\n\n\ntech\n\n\nsearch\n\n\n\n\n\n\nJun 1, 2023\n\n\n57 min\n\n\n\n\n\n\n\nFrom Model to Production: Deploying Your Machine Learning Solution on Google Cloud\n\n\nTransforming a Laptop-Trained ML Model into a Scalable Batch Processing Pipeline using GCP’s Dataproc\n\n\n\ntech\n\n\nmachine learning\n\n\n\n\n\n\nFeb 17, 2020\n\n\n14 min\n\n\n\n\n\n\nNo matching items"
  }
]