[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Hi, I’m Quy—an Applied Data Scientist. I’m from Hanoi, Vietnam 🇻🇳. Currently living in Singapore 🇸🇬.\nI blog about RecSys, ML, Productivity and other random things. You can find some of my side projects here.\nI teach a RecSys course for practitioners at FullStackDataScience."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Implement a RecSys, Chapter 5: Session-based Recommendation Model\n\n\nDesign and build sequence models that capture temporal patterns in user behavior\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 31, 2025\n\n\n28 min\n\n\n\n\n\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation\n\n\nEstablishing the evaluation foundation and implementing your baseline\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 30, 2025\n\n\n14 min\n\n\n\n\n\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 3: Negative Sampling\n\n\nWhy your model needs to see what users don’t want—and how to generate those examples\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 26, 2025\n\n\n10 min\n\n\n\n\n\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 2: Understanding the Data and Feature Engineering\n\n\nExploring Amazon product dataset and building features for sequence models\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 25, 2025\n\n\n8 min\n\n\n\n\n\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 1: Introduction and Project Overview\n\n\nUnderstanding session-based recommendations and setting up your development environment\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 24, 2025\n\n\n9 min\n\n\n\n\n\n\n\n\n\n\n\n\nBuilding a Conversational Assistant for Restaurant Discovery and Booking\n\n\nLessons from Creating a Chatbot Using RAG, LLMs, and Advanced Retrieval Techniques\n\n\n\ntech\n\n\nllm\n\n\n\n\n\n\nSep 22, 2024\n\n\n4 min\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s build an ML system\n\n\nEnd-to-end set up and deploy on Kubernetes\n\n\n\ntech\n\n\nmachine learning\n\n\n\n\n\n\nJun 21, 2024\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/review-rec-bot/index.html",
    "href": "projects/review-rec-bot/index.html",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "",
    "text": "Project Details"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#demo",
    "href": "projects/review-rec-bot/index.html#demo",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Demo",
    "text": "Demo"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#problem-statement",
    "href": "projects/review-rec-bot/index.html#problem-statement",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Problem Statement",
    "text": "Problem Statement\nListing/reservation businesses like Yelp offer value to users by providing useful information to make them find out where to go next. Good search and recommendation systems go a long way, but they are still far from delivering the ultimate experience where users can interact naturally with the system for complex queries or have a conversation to drill down their needs."
  },
  {
    "objectID": "projects/review-rec-bot/index.html#approach",
    "href": "projects/review-rec-bot/index.html#approach",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Approach",
    "text": "Approach\nBuild a chatbot assistant to assist users in discovering places to go and booking.\nWorkflow:\n\nDownload Yelp reviews data. Sample 5,240 reviews from 100 businesses.\nSet up development environment including experimentation tracking via MLflow, observability with Arize Phoenix\nBuild MVP version using LlamaIndex, Qdrant\nBuild synthetic evaluation datasets with 30 questions for retrieval and response. Manual response dataset are gradually built up and added based on error analysis\nConduct error analysis and look at the model’s output to come up with new iteration ideas. Run a total of 10 experiments to improve the RAG, with notable attempts including: Replacing Llama-8.1B with GPT-4o-mini, Fine-tuning Embedding Model, Hybrid Retrievers, Semantic Chunking, BGE Reranker, Query Expansion\nBuild RAG Agent based on OpenAI API with Query Engine tool and Reservation Service tool. Chatbot UI is built with Chainlit."
  },
  {
    "objectID": "projects/review-rec-bot/index.html#evaluation",
    "href": "projects/review-rec-bot/index.html#evaluation",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Evaluation",
    "text": "Evaluation\nEvaluation results can be found here.\nTwo proposed key metrics are Retrieval Hit Rate and Response Correctness.\nRetrieval is a critical component in any RAG system. Along with data prep, retrieval sits at the top of the pipeline so any improvements in these fronts is more likely to improve the overall system. Hit rate is chosen as a key metric because since we can employ rerank as a subsequent step, we have room to optimize for the ranking issues. \nFor response, Correctness measures both how relevant the answer is with respect to the query and how correct it is compared to the referenced answer. It’s therefore a better indicator than pure relevance, which is just based on the query and hence easier to get right.\nFor reference, Response Correctness on synthetic dataset has improved +166% from 1.75 / 5.00 from MVP version to 4.67 / 5.00 on the current version. The current Retrieval Hit Rate @ 50 reaches 73%, not directly comparable but at MVP version Retrieval Hit Rate @ 10 was 20%.\nAs next steps, while there is not much room to improve Response Correctness, we ought to increase Retrieval Hit Rate to 90% which should be doable since this dataset only contains a small amount of data."
  },
  {
    "objectID": "projects/review-rec-bot/index.html#learningsremarks",
    "href": "projects/review-rec-bot/index.html#learningsremarks",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Learnings/Remarks",
    "text": "Learnings/Remarks\n\nUsing question-style query leads to 5-20% uplift in retrieval hit rate compared to using keyword search\nBM25 Retriever alone results in 200% increase in retrieval effectiveness including hit rate, average precision, MRR and NDCG\nFine-tuning small embedding model like Snowflake/snowflake-arctic-embed-m-v1.5 yield +80% retrieval effectiveness, especially rankings of the retrieved nodes\nUsing GPT-4o-mini as response synthesizer significantly improve the quality of response in all aspects (especially correctness from 2.6 to 3.8) compared to Llama 3.1-8B-Instruct\nUsing TreeSummarize with custom prompt yields a +10% uplift on response correctness evaluation, from 3.97 to 4.37. Based on eyeballing we also see a way better response that is recommendation-like"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#challenges",
    "href": "projects/review-rec-bot/index.html#challenges",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Challenges",
    "text": "Challenges\n\nChallenge 1: Auto-retrieval not reliable\nWhile theoretically both precision and recall should be greatly improved if we are able to apply the right filters for User questions instead of relying on embedding/keyword matching, my first attempt to apply auto-retrieval with ChromaDB did not yield promising results. There were at least two syntactic issues which broke the agentic workflow. Even after fixing those two the unreliable nature of this approach is still there and I also witnessed a -10% degradation in Retrieval Hit Rate.\nIn the end I forfeited the feature but nevertheless look forward to a way to re-applying this technique.\n\n\nChallenges 2: Indexing pipeline takes too long\nIndexing 70K nodes from 30K reviews for 400 businesses takes more than 6 hours!"
  },
  {
    "objectID": "projects/review-rec-bot/index.html#future-improvements",
    "href": "projects/review-rec-bot/index.html#future-improvements",
    "title": "Building a Conversational Assistant for Restaurant Discovery and Booking",
    "section": "Future Improvements",
    "text": "Future Improvements\n\nGuardrail system inputs and outputs\nExperiment with Contextual Compression and Filters\nFine tune LLM Re-ranker (FlagEmbedding BGE Reranker)\nTry ColBERT as a new retriever (may be add to the list of retrievers)\nTry different loss function in training embeddings\nImprove the diversity by implement custom re-ranker that weight downs the reviews from the already seen biz_id\n\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Sep 2024). Building a Conversational Assistant for Restaurant Discovery and Booking. dvquys.com. https://dvquys.com/projects/review-rec-bot/."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html",
    "href": "posts/site-search-elasticsearch/index.html",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "",
    "text": "This article is originally published in Towards Data Science"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#intro",
    "href": "posts/site-search-elasticsearch/index.html#intro",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Intro",
    "text": "Intro\nOver the last 22 months I have been working as a site-search engineer who uses Elasticsearch to help improve relevance in our restaurant platform. I have deployed in total 83 releases including 3 major versions.\nWith roughly one release per week, I can say that not only our search engine is much better than it was 2 years ago, but I have also learned quite a lot. Though still far from a great search engine, here are some things worth sharing in my opinion. More importantly, I want to get feedback about them.\nThis blog post is to provide an approach to design the Elasticsearch query template to deal with common site-search problems including searching for matches across different fields, boosting results and testing. Together we will identify issues with the default approach and then gradually come up with a new one to address the issues altogether.\nThis Github repo contains the examples and code discussed in this post."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#main",
    "href": "posts/site-search-elasticsearch/index.html#main",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Main",
    "text": "Main\nWe now play the role of a search engineer for a restaurant platform, which allows diners to discover and make reservation for their next meals. We haven’t had much experience, but luckily the app does not require accuracy level of Google from the start. The key is to make gradual visible progresses!\nAlright, let’s dive into it. First off, we make sure user can search for restaurant by name. Here we can rely on the simple default query-match to get the job done.\n\n\nCode: Index our first two restaurants\n\nPOST _bulk\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"001sabichuong\" } }\n{ \"restaurant_name\": \"Sa Bi Chuong\", \"cuisine\": \"Vietnamese\", \"rating\": 5.0 }\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"002vietnamesephonoodle\" } }\n{ \"restaurant_name\": \"Vietnamese Pho Noodle\", \"cuisine\": \"Vietnamese\", \"rating\": 4.0 }\n\n# Test searching for one\n# Should return Vietnamese Pho Noodle\nGET restaurant/_search\n{\n  \"query\" : {\n    \"match\" : { \"restaurant_name\": \"vietnamese\" }\n  }\n}\n\nThe above snippet can be run at Kibana’s Dev Tools &gt; Console, which will be available at your localhost:5601 if you follow the repo.\nThe code is self-explained. We ask Elasticsearch to return restaurants whose name contains vietnamese. And we get back one result for Vietnamese Pho Noodle. No problems.\nBut we quickly find out that name is not the only place we want to look for when user submit a query. Given keywordvietnamese we should also return the restaurant Sa Bi Chuong, because it’s a Vietnamese restaurant as tagged in the cuisine. A multi_match query allows us to do exactly that.\n\n\nCode: Matching multiple fields\n\n# Should return all 2 Vietnamese restaurant with the Vietnamese Pho Noodle on top\nGET restaurant/_search\n{\n  \"query\" : {\n    \"multi_match\" : {\n      \"query\": \"vietnamese\",\n      \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n    }\n  }\n}\n\n\n\nResult\n\n\"hits\": {\n    ...\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.6931471,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"001sabichuong\",\n        \"_score\": 0.18232156,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        }\n      }\n    ]\n  }"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#problems-with-the-default-tfidf",
    "href": "posts/site-search-elasticsearch/index.html#problems-with-the-default-tfidf",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Problems with the default TFIDF",
    "text": "Problems with the default TFIDF\nNotice the above scores. The first one is like 4 times higher than the second, indicating that it’s much more relevant given query vietnamese. One might have an assumption that because matching at multiple fields will make the score higher.\nWhenever we have doubts, we can use Elasticsearch explain to get a detailed breakdown of its scoring components.\n\n\nCode: Let’s use explain=true to see what happens under the hood\n\n# Vietnamese Pho Noodle is on top because of the default implementation of TFIDF that penalizes the matching at cuisine field because there are multiple restaurants with cuisine=Vietnamese while there are only one restaurant with name=Vietnamese\n# Question: But why having the name Vietnamese in its name makes it more Vietnamese than other restaurants?\nGET restaurant/_search\n{\n  \"query\" : {\n    \"multi_match\" : {\n      \"query\": \"vietnamese\",\n      \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n    }\n  },\n  \"explain\": true\n}\n# Result 👇\n\"hits\": {\n    \"hits\": [\n      {\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.6931471,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        },\n        \"_explanation\": {\n          \"value\": 0.6931471,\n          \"description\": \"max of:\",\n          \"details\": [\n            # Matching in field `cuisine` yields score=0.18\n            # Note that by default the score is calculated by TFIDF\n            # More info about Elasticsearch TFIDF: https://www.elastic.co/guide/en/elasticsearch/reference/8.6/index-modules-similarity.html#bm25\n            {\n              \"value\": 0.18232156,\n              \"description\": \"weight(cuisine:vietnamese in 1) [PerFieldSimilarity], result of:\",\n              \"details\": [...]\n            },\n            # Matching in field `restaurant_name` yields score=0.69\n            {\n              \"value\": 0.6931471,\n              \"description\": \"weight(restaurant_name:vietnamese in 1) [PerFieldSimilarity], result of:\",\n              \"details\": [...]\n            }\n            # Because the final score is \"max of:\" those two above scores,\n            # it is equal to the matching score with `restaurant_name`\n          ]\n        }\n      },\n      {\n        \"_id\": \"001sabichuong\",\n        \"_score\": 0.18232156,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        },\n        # Similarly since there's no matching with `restaurant_name`,\n        # here the final score is equal to the matching score of `cuisine`\n        \"_explanation\": {\n          \"value\": 0.18232156,\n          \"description\": \"max of:\",\n          \"details\": [\n            {\n              \"value\": 0.18232156,\n              \"description\": \"weight(cuisine:vietnamese in 0) [PerFieldSimilarity], result of:\",\n              \"details\": [...]\n            }\n          ]\n        }\n      }\n    ]\n  }\n\nAbove we can see that Vietnamese Pho Noodle is on top because of the default implementation of TFIDF that penalizes the matching at cuisine field because there are multiple restaurants with cuisine=Vietnamese while there are only one restaurant with name=Vietnamese.\nDiving into the _explanation block, we realize that score difference originates from the TFIDF matching output for restaurant_name. This is expected as the algorithm assumes that a keyword is a better signal if it is not common and usually found in a lot of documents (sort of a solution to automatically handle stopwords). In our examples, both the restaurants have cuisine Vietnamese so according to TFIDF, that match does not say much about the relevance of the documents.\nWhether we should encourage this behavior is a question. Is it true that having Vietnamese in the name make one restaurant more “Vietnamese” than the other?\nAnother problem with TFIDF is that it takes into account the length of the field.\n\n\nCode: Let’s add another restaurant\n\nPOST _bulk\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"003vietnamesepho\" } }\n{ \"restaurant_name\": \"Vietnamese Pho\", \"cuisine\": \"Vietnamese\", \"rating\": 3.0 }\n\n# In the below example we see that the new Vietnamese Pho restaurant is ranked higher...\nGET restaurant/_search\n{\n  \"query\" : {\n    \"multi_match\" : {\n      \"query\": \"vietnamese pho\",\n      \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n    }\n  },\n  \"explain\": true\n}\n\nYou can find the detailed and lengthy result in Appendix 1. In short, we see that the result ranks restaurant Vietnamese Pho first and then Vietnamese Pho Noodle. Analyzing the component scores indicates that the key difference is that Vietnamese Pho has length=2 (words) while Vietnamese Pho Noodle has length=3. It feels unintuitive since we know that the second restaurant has higher rating, given that both, in practice, are equally matching to user’s keyword."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#reranking-boosting-with-function_score",
    "href": "posts/site-search-elasticsearch/index.html#reranking-boosting-with-function_score",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Reranking (boosting) with function_score",
    "text": "Reranking (boosting) with function_score\nAs we talk about rating, we can wrap our query with function_score to incorporate that information to modify our matching scores, hence have a better control over our ranking.\n\n\nCode: Function score\n\nGET restaurant/_search\n{\n  \"query\": {\n    \"function_score\": {\n      # Our main query is wrapped in a function_score clause\n      \"query\": {\n        \"multi_match\" : {\n          \"query\": \"vietnamese\",\n          \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n        }\n      },\n      # We define the functions that will be applied on top of the matching scores\n      # returned by our main query\n      \"functions\": [\n        {\n          \"field_value_factor\": {\n            \"field\": \"rating\",\n            \"modifier\": \"none\",\n            \"missing\": 1\n          }\n        }\n      ],\n      # Retrieve the max boosting defined inside `functions`\n      # Above there is only one boosting so it's applied by default\n      \"score_mode\": \"max\",\n      # Multiply the matching score with the boosting calculated from functions\n      \"boost_mode\": \"multiply\"\n    }\n  }\n}\n\n\n\nResult\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 1.7885544,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"003vietnamesepho\",\n        \"_score\": 1.5706451,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 3\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"001sabichuong\",\n        \"_score\": 0.66765696,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        }\n      }\n    ]\n  }\n}\n\nThe higher rating restaurant is on top now. But how about restaurant Sa Bi Chuong with rating=5? It being the last result seems like we haven’t boosted “enough”.\nWe might start tinkering a bit more with function_score to make that happen. Here is one of the implementation which models the boosting in a non-linear manner to effectively apply a strong boost on documents with rating=5.\n\n\nCode: Non-linear function score boosting\n\nGET restaurant/_search\n{\n  \"query\": {\n    \"function_score\": {\n      \"query\": {\n        \"multi_match\" : {\n          \"query\": \"vietnamese\",\n          \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n        }\n      },\n      \"functions\": [\n        # Apply a non-linear function to model that\n        # a rating of 5 has much more weight than rating of 4 (not just 25% more)\n        {\n          \"filter\": {\n            \"range\": {\n              \"rating\": {\n                \"gte\": 5,\n                \"lte\": 5\n              }\n            }\n          },\n          \"weight\": 10\n        },\n        {\n          \"filter\": {\n            \"range\": {\n              \"rating\": {\n                \"gte\": 4,\n                \"lt\": 5\n              }\n            }\n          },\n          \"weight\": 2\n        }\n      ],\n      \"score_mode\": \"max\",\n      \"boost_mode\": \"multiply\"\n    }\n  }\n}\n\n\n\nResult\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"001sabichuong\",\n        \"_score\": 1.3353139,\n        \"_source\": {\n          \"restaurant_name\": \"Sa Bi Chuong\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 5\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.8942772,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"003vietnamesepho\",\n        \"_score\": 0.52354836,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 3\n        }\n      }\n    ]\n  }\n}\n\nYou may wonder that: “Isn’t the function boosting now looking too arbitrary? Will it work for other cases?”. Indeed, that’s the question we should ask ourselves. Overtime, with more and more requirements, our query template will grow in complexity, leading to conflicts between the modifications we make.\nLet’s move to the next example to illustrate what I mean by “conflict”."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#the-complexity-comes-with-fuzzy-matching",
    "href": "posts/site-search-elasticsearch/index.html#the-complexity-comes-with-fuzzy-matching",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "The complexity comes with fuzzy matching",
    "text": "The complexity comes with fuzzy matching\nWhile not vital, the ability to handle user’s typo is always a nice-to-have feature, especially when they are now familiar with smart search engine like Google’s. Elasticsearch has a built-in mechanism called fuzzy matching, which is configurable with the option fuzziness.\n\n\nCode: fuzzy matching\n\n# The use of `bool` query below is to implement the logic: At least one condition should match\nPUT _scripts/01-default-fuzzy-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\": {\n        \"function_score\": {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"bool\": {\n                    \"should\": [\n                      {\n                        \"multi_match\" : {\n                          \"query\": \"{{query_string}}\",\n                          \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n                        }\n                      },\n                      {\n                        \"multi_match\" : {\n                          \"query\": \"{{query_string}}\",\n                          \"fields\": [ \"restaurant_name\", \"cuisine\" ],\n                          # For the purpose of this demo, default behavior works well enough\n                          \"fuzziness\": \"AUTO\"\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          },\n          \"functions\": [\n            {\n              \"filter\": {\n                \"range\": {\n                  \"rating\": {\n                    \"gte\": 5,\n                    \"lte\": 5\n                  }\n                }\n              },\n              \"weight\": 10\n            },\n            {\n              \"filter\": {\n                \"range\": {\n                  \"rating\": {\n                    \"gte\": 4,\n                    \"lt\": 5\n                  }\n                }\n              },\n              \"weight\": 2\n            }\n          ],\n          \"score_mode\": \"max\",\n          \"boost_mode\": \"multiply\"\n        }\n      }\n    },\n    \"params\": {\n      \"query_string\": \"My query string\"\n    }\n  }\n}\n\nNotice that we just created a query template instead of running a query. We can now invoke the query with paramaters, which is a nice feature Elasticsearch introduces to make our code look less overwhelming. Like this:\nGET /_search/template\n{\n  \"id\": \"01-default-fuzzy-search-template\",\n  \"params\": {\n    \"query_string\": \"vietnames\"\n  }\n}\nThe above query returns our expected Vietnamese restaurant given a typo keyword vietnames. Under the hood, fuzzy matching uses Levenshtein edit distance, which measures similarity between strings by the number of modifications one make to make one become another. In our example, we just need to add one letter e at the end to make vietnames become vietnamese. Quite an easy task for the algorithm. One might also argue that it’s quite easy for our developers as well. 2 lines of code and a new beautiful feature.\nWell, the interesting bit lies elsewhere. One day, our sales team suddenly comes to us with a complaint that search result is wrong. People are getting Japanese BBQ restaurants over Korean ones even when they explicitly search for kbbq (which is a common acronym for korean bbq).\nHere are the restaurants:\nPOST _bulk\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"004parkhangseokbbq\" } }\n{ \"restaurant_name\": \"Park Hang-seo's KBBQ\", \"cuisine\": \"Korean\", \"rating\": 2.0 }\n{ \"index\" : { \"_index\" : \"restaurant\", \"_id\" : \"005bestbbqintown\" } }\n{ \"restaurant_name\": \"Best BBQ in town\", \"cuisine\": \"Japanese\", \"rating\": 5.0 }\nQuery:\n{\n  \"id\": \"01-default-fuzzy-search-template\",\n  \"params\": {\n    \"query_string\": \"kbbq\"\n  }\n}\n\n\nResult\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"005bestbbqintown\",\n        \"_score\": 8.384459,\n        \"_source\": {\n          \"restaurant_name\": \"Best BBQ in town\",\n          \"cuisine\": \"Japanese\",\n          \"rating\": 5\n        }\n      },\n      {\n        \"_index\": \"restaurant\",\n        \"_id\": \"004parkhangseokbbq\",\n        \"_score\": 2.5153382,\n        \"_source\": {\n          \"restaurant_name\": \"Park Hang-seo's KBBQ\",\n          \"cuisine\": \"Korean\",\n          \"rating\": 2\n        }\n      }\n    ]\n  }\n}\n\nTo understand what is happening, we need to enable explain=true to see what contributes to the final scores. As this time the output is too verbose, here are the findings:\n\nThe keyword matching score (before boosting) for the Best BBQ in town restaurant is 0.8, less than the 1.2 of Park Hang-seo's KBBQ\nSo if no boosting applied, we will see Park Hang-seo's KBBQ restaurant ranks at the first position\nBut then the boosting from rating modifies the score, leading to the ordering as we can see\n\nOne way to frame the issue is that we have imperfect boosting. Say we have a better formula that strikes the right balances, then the problem should be solved. But it’s close to impossible to guarantee that the new formula will not cause any other issues. We don’t want these kinds of issue creep into the system without any notice and then some day being flagged out by stakeholders. We want to be the first to be aware of those issues, especially whenever we make any changes. Therefore, before discussing potential solutions, I hope we all agree that the very next important thing we should do is (yes, you are probably thinking about the same thing as I am) setting up a testing/evaluation mechanism."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#how-should-we-create-test-cases-for-this-search-application",
    "href": "posts/site-search-elasticsearch/index.html#how-should-we-create-test-cases-for-this-search-application",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "How should we create test cases for this search application?",
    "text": "How should we create test cases for this search application?\nIMHO, the first challenge is about moving data. The queries and the documents can both grow over time, so a static mock dataset might not be a very good representative of the search relevance anymore after a month. The next bit is related to our mindset. Sometimes we might need to think about whether we need 100% passed test cases in order to fix this new very urgent issue. For example, there are cases where if you fix some issues then the search result orderings of the other test cases might alter a bit. If we hard-code the rankings, then we might sweat ourselves trying to tweak our query template. But in practice a lot of the times we neither don’t need the ranking to be exactly pre-defined nor we are perfectly sure about which ordering is actually optimal. We should consider using a soft mechanism where we quantify the relevance of the system and using threshold instead.\nHere we look at how we can use Elasticsearch Ranking Evaluation API to implement such evaluation scheme:\n\n\nCode: Evaluation API\n\nGET restaurant/_rank_eval\n{\n  # Query template comes in really handy when used in conjunction with _rank_eval\n  \"templates\": [\n     {\n        \"id\": \"01-default-fuzzy-search-template\",\n        \"template\": {\n            \"id\": \"01-default-fuzzy-search-template\"\n        }\n     }\n  ],\n  \"requests\": [\n    {\n     \"id\": \"kbbq_query\",\n     # Here we manually define the true positives with rating &gt;= 1.0\n     # The actual rating number helps when using metrics that takes into account\n     # the ranking of the search results\n     \"ratings\": [\n        { \"_index\": \"restaurant\", \"_id\": \"004parkhangseokbbq\", \"rating\": 3 },\n        { \"_index\": \"restaurant\", \"_id\": \"005bestbbqintown\", \"rating\": 1 }\n      ],\n     \"template_id\": \"01-default-fuzzy-search-template\",\n     \"params\": {\n        \"query_string\": \"kbbq\"\n      }\n    },\n    {\n     \"id\": \"vietnamese_query\",\n     \"ratings\": [\n        { \"_index\": \"restaurant\", \"_id\": \"001sabichuong\", \"rating\": 3 },\n        { \"_index\": \"restaurant\", \"_id\": \"002vietnamesephonoodle\", \"rating\": 3 },\n        { \"_index\": \"restaurant\", \"_id\": \"003vietnamesepho\", \"rating\": 3 }\n      ],\n     \"template_id\": \"01-default-fuzzy-search-template\",\n     \"params\": {\n        \"query_string\": \"vietnamese\"\n      }\n    }\n  ],\n  \"metric\": {\n    \"dcg\": {\n      \"k\": 5,\n      \"normalize\": true\n    }\n  }\n}\n\n\n\nResult\n\n{\n  \"metric_score\": 0.8549048706984328,  # This is the overall metric score, best is 1.0, worst is 0.0\n  \"details\": {\n    \"kbbq_query\": {\n      # This kbbq_query has a imperfect score because it ranks the more relevant result lower\n      \"metric_score\": 0.7098097413968655,\n      \"unrated_docs\": [],\n      \"hits\": [\n        {\n          \"hit\": {\n            \"_index\": \"restaurant\",\n            \"_id\": \"005bestbbqintown\",\n            \"_score\": 8.384459\n          },\n          \"rating\": 1\n        },\n        {\n          \"hit\": {\n            \"_index\": \"restaurant\",\n            \"_id\": \"004parkhangseokbbq\",\n            \"_score\": 2.5153382\n          },\n          \"rating\": 3\n        }\n      ],\n      \"metric_details\": {\n        ...\n      }\n    },\n    \"vietnamese_query\": {\n      \"metric_score\": 1,\n      \"unrated_docs\": [],\n      \"hits\": [\n        ...\n      ],\n      \"metric_details\": {\n        ...\n      }\n    }\n  },\n  \"failures\": {}\n}\n\nLet’s try to better our search by introducing changes that move the evaluation score closer to the perfect 1.0."
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#our-revised-search-model",
    "href": "posts/site-search-elasticsearch/index.html#our-revised-search-model",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Our revised search model",
    "text": "Our revised search model\nBefore start designing a new query template, we can take a step back and really think about how we should model the search engine. Below are the essentials:\n\nExact matching will always surface on top of not-exact ones like fuzzy matching;\nExact matches does not take into account field length or word/document frequencies. If two documents have the same exact match in a field, they should have the same keyword matching score;\nWithin the same level of matching (whether exact or fuzzy), while the initial keyword matching scores should be the same, they can be reranked by certain modifiers such as distance, popularity, … However, the modified scores should not make the final score to exceed the base score of the upper level, e.g. modifed fuzzy score should not be greater than exact base score. This is to ensure the essential #1.\n\nIf you watch football, this is similar to how the leagues such as Premiere League rank their teams. No matter how much more goals the team L has scored compared to team M’s or their head-to-head results, if team M has more points than team M has a higher ranking. The other measures are for tie-breaker only.\nThis understanding can be then transferred to how we use Elasticsearch to express our model.\nOne approach is to use dis_max query combined with constant_score query. The idea is to categorize each type of matching into different levels of score where one level will have twice the score of the below level. The documents fall into one level of matching (tie) will be reranked by modifiers but eventually the new scores will not exceed the upper base score. Here is the new query template:\n\n\nCode: New query template\n\nPUT _scripts/02-constant-score-search-template\n{\n  \"script\": {\n    \"lang\": \"mustache\",\n    \"source\": {\n      \"query\": {\n        \"function_score\": {\n          \"query\": {\n            \"bool\": {\n              \"must\": [\n                {\n                  \"bool\": {\n                    \"should\": [\n                      {\n                        # `dis_max` query gets the max score of an array of clauses\n                        \"dis_max\": {\n                          \"queries\": [\n                            {\n                              # `constant_score` says that if matches, return a constant score\n                              \"constant_score\": {\n                                \"filter\": {\n                                  \"multi_match\" : {\n                                    \"query\": \"{{query_string}}\",\n                                    \"fields\": [ \"restaurant_name\", \"cuisine\" ]\n                                  }\n                                },\n                                # This is the constant that is returned as score\n                                # Note that the exact number is chosen intentionally\n                                # Here the upper level will be twice the lower level\n                                # and we will restrict the modifiers to be only\n                                # able to boost by at most 100% the base score\n                                # so that the lower level can not exceed the upper\n                                \"boost\": 2\n                              }\n                            },\n                            {\n                              \"constant_score\": {\n                                \"filter\": {\n                                  \"multi_match\" : {\n                                    \"query\": \"{{query_string}}\",\n                                    \"fields\": [ \"restaurant_name\", \"cuisine\" ],\n                                    \"fuzziness\": \"AUTO\"\n                                  }\n                                },\n                                \"boost\": 1\n                              }\n                            }\n                          ]\n                        }\n                      }\n                    ]\n                  }\n                }\n              ]\n            }\n          },\n          \"functions\": [\n            # Design the modifiers to be multiplier of maximum 1.9999 the base score\n            {\n              \"weight\": 1\n            },\n            {\n              \"field_value_factor\": {\n                \"field\": \"rating\",\n                \"modifier\": \"ln\",\n                \"missing\": 1\n              },\n              \"weight\": 0.1\n            }\n          ],\n          \"score_mode\": \"sum\",\n          \"boost_mode\": \"multiply\"\n        }\n      }\n    },\n    \"params\": {\n      \"query_string\": \"My query string\"\n    }\n  }\n}\n\nWhen we re-run the evaluation, we can observe that the normalized DCG metric now has score equal to 1.0, denoting a perfect accuracy!"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#summary",
    "href": "posts/site-search-elasticsearch/index.html#summary",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Summary",
    "text": "Summary\nThis blog post focuses on putting you in the shoe of an Elasticsearch engineer who has to derive query templates that fit the needs of a site-search enginer. We have briefly coverred the following topics:\n\nKeyword matching with multiple fields\nUnderstanding default Elasticsearch scoring\nProblems with the default TFIDF\nBoosting search results by attributes\nFuzzy matching\nElasticsearch query templateEvaluation with Rank Evaluation API\nConstructing query with dis_maxand constant_score\n\nThough definitely not optimal, I hope that parts of the blog post help you come closer to utilize Elasticsearch to help solve your own problems.\nI also much appreciate any comments or feedbacks. If you want to discuss more, please comment on this post or open an issue in the Github repo.\nThanks all!"
  },
  {
    "objectID": "posts/site-search-elasticsearch/index.html#appendix",
    "href": "posts/site-search-elasticsearch/index.html#appendix",
    "title": "A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration",
    "section": "Appendix",
    "text": "Appendix\n\nAppendix 1: Detailed breakdown of default TFIDF matching where length of the field value affect overall matching score\n\n\nResults\n\n{\n  \"hits\": {\n    \"hits\": [\n      {\n        \"_id\": \"003vietnamesepho\",\n        \"_score\": 1.0470967,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 3\n        },\n        \"_explanation\": {\n          \"value\": 1.0470967,\n          \"description\": \"max of:\",\n          \"details\": [\n            {\n              \"value\": 0.13353139,\n              \"description\": \"sum of:\",\n              \"details\": [\n                {\n                  \"value\": 0.13353139,\n                  \"description\": \"weight(cuisine:vietnamese in 0) [PerFieldSimilarity], result of:\",\n                  \"details\": [...]\n                }\n              ]\n            },\n            {\n              \"value\": 1.0470967,\n              \"description\": \"sum of:\",\n              \"details\": [\n                # Matching score with \"vietnamese\"\n                {\n                  \"value\": 0.52354836,\n                  \"description\": \"weight(restaurant_name:vietnamese in 0) [PerFieldSimilarity], result of:\",\n                  \"details\": [\n                    {\n                      \"value\": 0.52354836,\n                      \"description\": \"score(freq=1.0), computed as boost * idf * tf from:\",\n                      \"details\": [\n                        {\n                          \"value\": 2.2,\n                          \"description\": \"boost\",\n                          \"details\": []\n                        },\n                        {\n                          \"value\": 0.47000363,\n                          \"description\": \"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:\",\n                          ...\n                        },\n                        {\n                          \"value\": 0.50632906,\n                          \"description\": \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\",\n                          \"details\": [\n                            {\n                              \"value\": 1,\n                              \"description\": \"freq, occurrences of term within document\",\n                              \"details\": []\n                            },\n                            {\n                              \"value\": 1.2,\n                              \"description\": \"k1, term saturation parameter\",\n                              \"details\": []\n                            },\n                            {\n                              \"value\": 0.75,\n                              \"description\": \"b, length normalization parameter\",\n                              \"details\": []\n                            },\n                            # Notice the length=2 here is in the denominator,\n                            # which means that the higher the length the less\n                            # the score\n                            {\n                              \"value\": 2,\n                              \"description\": \"dl, length of field\",\n                              \"details\": []\n                            },\n                            {\n                              \"value\": 2.6666667,\n                              \"description\": \"avgdl, average length of field\",\n                              \"details\": []\n                            }\n                          ]\n                        }\n                      ]\n                    }\n                  ]\n                },\n                # Matching score with \"pho\"\n                {\n                  \"value\": 0.52354836,\n                  \"description\": \"weight(restaurant_name:pho in 0) [PerFieldSimilarity], result of:\",\n                  # Details are exactly like above\n                  \"details\": [...]\n                }\n              ]\n            }\n          ]\n        }\n      },\n      {\n        \"_id\": \"002vietnamesephonoodle\",\n        \"_score\": 0.8942772,\n        \"_source\": {\n          \"restaurant_name\": \"Vietnamese Pho Noodle\",\n          \"cuisine\": \"Vietnamese\",\n          \"rating\": 4\n        },\n        \"_explanation\": {\n          \"value\": 0.8942772,\n          \"description\": \"max of:\",\n          \"details\": [\n            {\n              \"value\": 0.13353139,\n              \"description\": \"sum of:\",\n              \"details\": [...]\n            },\n            {\n              \"value\": 0.8942772,\n              \"description\": \"sum of:\",\n              \"details\": [\n                {\n                  \"value\": 0.4471386,\n                  \"description\": \"weight(restaurant_name:vietnamese in 1) [PerFieldSimilarity], result of:\",\n                  \"details\": [\n                    {\n                      \"value\": 0.4471386,\n                      \"description\": \"score(freq=1.0), computed as boost * idf * tf from:\",\n                      \"details\": [\n                        ...,\n                        {\n                          \"value\": 0.4324324,\n                          \"description\": \"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:\",\n                          \"details\": [\n                            ...,\n                            # Here the length=3 (greater than length=2 of the\n                            # above restaurant)\n                            {\n                              \"value\": 3,\n                              \"description\": \"dl, length of field\",\n                              \"details\": []\n                            },\n                            ...\n                          ]\n                        }\n                      ]\n                    }\n                  ]\n                },\n                {\n                  \"value\": 0.4471386,\n                  \"description\": \"weight(restaurant_name:pho in 1) [PerFieldSimilarity], result of:\",\n                  \"details\": [...]\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ]\n  }\n}\n\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Jun 2023). A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration. dvquys.com. https://dvquys.com/posts/site-search-elasticsearch/."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html",
    "href": "posts/deploy-ml-gcp/index.html",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "",
    "text": "This article is originally published in VinID Engineering\nImagine a company named Rainbow imports boxes of flowers and need to classify them into species. For six months, they have some staff label the boxes manually. Now, they hire you to build a Machine Learning model to do the task.\nWith a small amount of labelled data as input and tons of experience working on Kaggle projects, you quickly develop a 95% accuracy using simple RandomForestClassifier from the popular scikit-learn library. Nice. Stakeholders approve and ask you when you could deploy that model to production.\nHmm, deploy a model from my laptop? …\nIn case you wonder, I hope this tutorial will help you understand one among some common and most simple approaches. The diagram below depicts how we will use Google Cloud Platform to do the job in a batch-processing manner.\nI choose the Iris data set as our input to help you see how our approach works with small-sized problems. All the codes are in this repo."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#introduction",
    "href": "posts/deploy-ml-gcp/index.html#introduction",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Introduction",
    "text": "Introduction\nLike many other self-taught data people, I am familiar with manipulating data and develop a model on my laptop.\nHowever, when you’re solving real-world problems, your duty does not stop after you deliver a presentation. You will have to think about how to bring that solution to the production environment.\nOver the last few months, I have tried to deploy multiple computing pipelines. They are different in their scopes and complexity, ranging from processing a dozen of MB to 400 GB data per run. In this article, I want to summarize and share what I learned."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#the-targeted-audience",
    "href": "posts/deploy-ml-gcp/index.html#the-targeted-audience",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "The targeted audience",
    "text": "The targeted audience\nThis post is for data analysts/scientists who want to deploy their local solution, especially those without a software engineering background.\nYou will need Cloud Dataproc to proceed. This product allows you to spin up a cluster of machines to run your computing job in a distributed manner. Please refer to this documentation if you don’t know what Dataproc is."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#agenda",
    "href": "posts/deploy-ml-gcp/index.html#agenda",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Agenda",
    "text": "Agenda\n\nDiscuss the approach\nStep-by-step instructions to create the infrastructure and run the pipeline\nExplain codebase\nIntroduce other extended components, including Big Data processing with Apache Spark, scheduler with Airflow, local development environment, unit testing\nSummary"
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#approaches",
    "href": "posts/deploy-ml-gcp/index.html#approaches",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Approaches",
    "text": "Approaches\n\nAbout writing codes\nInstead of writing a long script to do everything, we break a pipeline into tasks and checkpoint interim data to disk. For example, after doing preprocess on train and test data, we dump both the data outputs and the transformer to Google Cloud Storage. We then load those objects as inputs for the next step.\nThis strategy has several purposes. First, for a long-running task, if a job fails at one of the last steps, we can re-run the pipeline from the nearest checkpoint rather than wasting time and resources restarting the whole pipeline. Second, it allows us to (1) debug more easily, (2) get alert when things break and (3) monitor interim outputs. Lastly, decoupled components can be understood more clearly, and easier to be replaced or extended later.\n\n\nAbout computing resources\nNormally for a small input size, we are fine with setting up a single virtual machine on the cloud. However, in some companies with mature cloud practice, the overhead of managing that VM is a type of cost that is difficult to justify. Especially when we have better options. For instance, Cloud Dataproc provides us with virtual machines that only live for the duration of one run, thereby free us from managing the machines. In this post, we explore Dataproc as our main engine for all the computing process."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#step-by-step-instructions",
    "href": "posts/deploy-ml-gcp/index.html#step-by-step-instructions",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Step-by-step instructions",
    "text": "Step-by-step instructions\n\nCreate a GCP project and enable necessary components\n\n👉 Create a free GCP account with $300 credit by going to console.cloud.google.com. Beware that by following this tutorial, you might incur a cost of about $0.2–$0.5.\n\n\n\n\n\n👉 Click Billing at the left sidebar and initiate a billing account to be able to use the components used in this tutorial\n\n\n\n\n\n👉 Select Library, then search and enable the following API: Cloud Dataproc, Cloud Storage and Cloud Firestore.\n👉 Navigate to the Firestore either by scrolling the sidebar to the left or search from the top menu bar. When you arrive at the below screen, choose SELECT NATIVE MODE, then choose us-east1 as the location.\n\n\n\n\n\n\nEnvironment setup\n\nStep 1: Launch terminal window\n\n👉 At the home page of your GCP project, select the command button to the right of your menubar. The CloudShell window then appears as you can see below:\n\n\n\n\n\n👉 Launch Cloud Shell Editor:\n\n\n\n\n\n\nIt’s recommended to use Cloud Shell to follow this tutorial. However, if you’re using Linux and want to use terminal on your local machine, make sure you first install the Google Cloud SDK and firebase CLI.\n\n\nStep 2: Clone Github repo\n\n👉 In the Terminal window:\n\ngit clonehttps://github.com/dvquy13/gcp_ml_pipeline.git\ncd gcp_ml_pipeline\n\n👉 Select File then open the file gcp_ml_pipeline/configs/.project_env:\n\n\n\n\n\n👉 Replace the values enclosed by &lt;&gt;. For the GCP_PROJECT, you need to provide the id of your GCP project. For the remaining, feel free to choose some random names for the global variables that identify your resources. The final output looks like this:\n\nGCP_PROJECT='zinc-primer-230105'\nGCS_BUCKET=dvquys-tut-gcp-ml-pipeline\nDATA_LOCATION=us-east1\nBQ_DATASET=tut_iris\nBQ_ORG_TABLE=F_ORIGINAL\nCLUSTER_NAME=iris-pred\n\n👉 Grant execute permission to the folder scripts by running the command: chmod +x -R ./scripts. Then, run ./scripts/00_import_data_to_bigquery.sh. Link to the script.\n\n\n\nStep 3: Create Dataproc cluster and submit jobs\nWe use Makefile to orchestrate our actions. You can find it here.\n️Now, run the following commands in sequence:\n\nmake create-dataproc-cluster: This command creates a Dataproc cluster. The single-node flag indicates that this is a cluster containing only one machine. n1-standard-1 is the cheapest machine we can rent. To install Python packages, we supply the metadata and initialization-actions params.\nmake build: Package your code, including your source code and other 3rd party libraries that you can not pre-install when creating the cluster (PyYAML for example). To submit a job to the cluster, we will send these codes to those machines via the gcloud dataproc jobs submit pyspark command.\nmake submit-job ENV=dev MODULE=data_import TASK=query_train_pred: Submit job cloning input data for training and predicting. The submit-job make command allows you to use this interface to run on both local and development environments.\nmake submit-job ENV=dev MODULE=feature_engineer TASK=normalize: Prepare features. In this illustrative example, we choose to include only normalization in the pipeline. After learning the normalization parameters from the train data set, we save those configurations for later usage.\nmake submit-job ENV=dev MODULE=model TASK=fit: Train model. Here we build a pipeline consisting of 2 steps, Normalization and Logistic Regression. After that, we persist the fit pipeline.\nmake submit-job ENV=dev MODULE=predict TASK=batch_predict: Batch predict. This job demonstrates the process when you use your learned model to make predictions.\nmake submit-job ENV=dev MODULE=predict TASK=store_predictions: Store predictions. The reason we do not combine this with the above step is two-fold. First, writing to a database often takes time and requires several retries. Second, we write to a document database like Cloud Firestore because when other team uses, they typically retrieve one document per query. However, there are times when we want to inspect the whole batch of predictions (e.g. debugging, count number of documents scored more than 0.9). For this query pattern, we will better off using the persisted outputs from the previous step, stored as parquet files in Cloud Storage.\nmake delete-dataproc-cluster: Delete Dataproc cluster. After the process finishes, delete the cluster so no further cost incurs.\n\n\n\n\nSucceeded Dataproc jobs\nYou can see that your predictions are stored at Cloud Firestore by accessing its web console.\n\n\n\nFirestore populated with predictions\nAlong the way, you will see that the output data of each step is persisted in Cloud Storage. I use parquet rather than CSV as the serialization format because it can embed schema information (therefore you do not have to specify column types when reading) and reduce storage size. For more detail, please refer to this benchmark.\n\n\n\nClean up\n\n👉 Finally, when you’re done exploring the results, you can delete all resources by running these commands:\n\n./scripts/01_erase_resources.sh\n./scripts/02_disable_resources.sh\n./scripts/03_delete_project.sh"
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#explain-codebase",
    "href": "posts/deploy-ml-gcp/index.html#explain-codebase",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Explain codebase",
    "text": "Explain codebase\nscripts/: This directory contains some initial scripts, which are the steps to help you set things up. In practice, I also favor using script rather than user interfaces such as web console because it is self-documented and easy for others to follow the exact steps.\nconfigs/: Store all the arguments that need to be set initially. .project_env is a file to store the global variables used to work with GCP. We also have the runtime.yaml, where we use Anchor, Alias and Extension in YAML to define runtime parameters for multiple environments. Both of these files serve as a centralized config store so that we can easily look up and make changes, instead of finding the configs scattered elsewhere in the code.\nMakefile: Originally Makefile is used to orchestrate the build process in C programming language. But it has done so well out of being just a shortcut so people start using it to facilitate ML model development. I have seen many tutorials using this tool, including the one that inspires me to design my Pyspark codebase.In this small project, we also use Makefile to save us a lot of time. As you can see above in Step 3, I put there our frequently used commands so that I can easily type make &lt;something&gt; to run a particular step.\niris_pred/: Source code.\nmain.py: is the interface to all tasks. This file parses the arguments to load config and get the job name, then call analyze function in entry_point.py from the appropriate module.\njobs/: contain tasks as modules. Inside jobs, we have one module corresponding to a step in our pipeline. All these modules expose an entry_point.py file where we unify the API to easily and consistently communicate with main.py.\n\n\nCode: train.py\n\n\n\niris_pred/jobs/model/train.py\n\nimport logging\nlogger = logging.getLogger(__name__)\nimport subprocess\n\nfrom shared.io_handler import IOHandler\nfrom jobs.feature_engineer.normalize import FeatureNormalizer\nfrom sklearn.externals import joblib\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.pipeline import make_pipeline\n\n\nclass Trainer:\n    def __init__(self, params, load: bool):\n        self.params = params\n\n        self.io_handler = IOHandler(params)\n        self.interim_output_path, self.final_output_path = \\\n            self._get_fpath()\n\n        self.normalizer = None\n        self.learner = None\n        self.pipeline = None\n\n    def _get_fpath(self):\n        interim_output_path = \\\n            f'../{self.params.io.pipeline}/pipeline.joblib'\n        final_output_path = \\\n            f'{self.io_handler.fpath_dict.pipeline}/pipeline.joblib'\n        return interim_output_path, final_output_path\n\n    def _load_train_data(self):\n        X_train = self.io_handler.load('X_train')\n        y_train = self.io_handler.load('y_train')['species']\n        return X_train, y_train\n\n    def _load_transformer(self):\n        normalizer_wrapper = FeatureNormalizer(self.params, load=True)\n        self.normalizer = normalizer_wrapper.normalizer\n\n    def _initiate_learner(self):\n        self.learner = LogisticRegression()\n\n    def _make_pipeline(self):\n        self.pipeline = make_pipeline(\n            self.normalizer,\n            self.learner)\n\n    def _fit(self, X_train, y_train):\n        self.pipeline.fit(X_train, y_train)\n\n    def _persist_pipeline(self):\n        # Temporarily save model to disk\n        joblib.dump(self.pipeline, self.interim_output_path)\n\n        # Copy model to GCS\n        if self.params.env_name != 'local':\n            logger.info(f\"Persisting {self.final_output_path}...\")\n            subprocess.check_output([\n                'gsutil', '-m', 'cp', '-r',\n                self.interim_output_path,\n                self.final_output_path])\n\n    def run(self):\n        X_train, y_train = self._load_train_data()\n        self._load_transformer()\n        self._initiate_learner()\n        self._make_pipeline()\n        self._fit(X_train, y_train)\n        self._persist_pipeline()\n\n\nAs you can see in the snippet above, the class Trainer expose a function run. Each step in the process corresponds to a private function declared in the same class.\nshared/: functions and classes to be reused across modules\nIn io_handler.py, the class IOHandler applies the principle Composition Over Inheritance to ease the process of loading outputs from the previous step."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#further-discussion",
    "href": "posts/deploy-ml-gcp/index.html#further-discussion",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Further discussion",
    "text": "Further discussion\nTo completely build and operate a pipeline, there is still more to be considered.\n\nApache Spark for bigger data\nIn this tutorial, we rent one small machine from Dataproc and use pandas as our preprocessing engine, which perfectly handles the case of data fit into the memory of that machine. However, often data input in real-world situations will be much bigger, therefore require us to use a distributed computing framework for scalability. In that case, you can just switch to using Apache Spark. From version 1.3, Spark introduces its DataFrame API, which greatly bears resemblance to Pandas counterpart. After porting your code from Pandas to Spark, to be able to run jobs across multiple machines, you just need to create a bigger cluster with a master and multiple workers.\n\n\nApache Airflow for orchestration\nMost of the batch job is not ad hoc. If it is, we should not even think about putting effort to standardize the process in the first place. Apache Airflow can play the role of both a scheduler and a monitor. It keeps metadata of each run and can send you alerts when things fail.\n\n\n\n\nExample of Airflow DAG: Source\n\n\n\nAn alternative is Dataproc Workflows. This is a native solution offered by GCP, but I haven’t tried it myself so I will just leave the documentation here.\n\n\nLocal development\nBecause rarely our codes work the first time we write them, it’s very important to be able to quickly test without having to go through all the boilerplate steps from setting up variables to requesting cloud resources. My suggestion is that we should set up our local environment asap. We can install Apache Spark 2.4.3+ to act as our runner engine, and MongoDB to be our alternative for Cloud Firestore. Here in the code repo, you can still refer to some line containing what I call the “environment branching logic”, which enables you to switch between running the same code on both local and cloud environments.\n\n\nUnit testing\nMany people have already talked about unit testing, so I won’t go too detailed here. I also don’t do unit testing in this tutorial for the sake of simplicity. However, I strongly encourage you to add testing yourself. Whatever it takes, unit testing forces us to modularize our code and add a layer of alerting. This is very important because things in data science often break in silence."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#summary",
    "href": "posts/deploy-ml-gcp/index.html#summary",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Summary",
    "text": "Summary\nHere is a summary of what you have learned in this tutorial:\n\nHow to utilize different Google Cloud Platform components to build a batch job pipeline (whether it involves ML or not).\nA product named Google Cloud Dataproc, where you can both submit a light-weight job via single-node mode and easily scale to a cluster of computers.\nOne approach to structurize ML pipeline codebase: Link to the repo.\nSome convenient components in model development, e.g. Makefile, runtime config, parquet persistence. This mostly helps people with little or no software engineering background.\n\nAgain, one of my main goals in writing this article is to receive feedback from the community, so I can do my job better. Please feel free me leave me comments, and I hope you guys enjoy this tutorial."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#references",
    "href": "posts/deploy-ml-gcp/index.html#references",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "References",
    "text": "References\n\nRicky Kim. (Dec 2018). PySpark Sentiment Analysis on Google Dataproc. towardsdatascience.com. https://towardsdatascience.com/step-by-step-tutorial-pyspark-sentiment-analysis-on-google-dataproc-fef9bef46468.\nEvan Kampf. (Jan 2017). Best Practices Writing Production-Grade PySpark Jobs. developerzen.com. https://developerzen.com/best-practices-writing-production-grade-pyspark-jobs-cb688ac4d20f.\nKing Chung Huang. (Oct 2017). Don’t Repeat Yourself with Anchors, Aliases and Extensions in Docker Compose Files. medium.com. https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd."
  },
  {
    "objectID": "posts/deploy-ml-gcp/index.html#credits",
    "href": "posts/deploy-ml-gcp/index.html#credits",
    "title": "From Model to Production: Deploying Your Machine Learning Solution on Google Cloud",
    "section": "Credits",
    "text": "Credits\nKudos to Bido for reviewing my work; to anh Khanh, anh Linh, anh Tuan for providing me feedback.\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Feb 2020). From Model to Production: Deploying Your Machine Learning Solution on Google Cloud. dvquys.com. https://dvquys.com/posts/deploy-ml-gcp/."
  },
  {
    "objectID": "projects/reviews-parsing-mlsys/index.html",
    "href": "projects/reviews-parsing-mlsys/index.html",
    "title": "Let’s build an ML system",
    "section": "",
    "text": "This project focuses on applying engineering practices to build a Machine Learning System using Kubernetes and deploy on Google Cloud Platform."
  },
  {
    "objectID": "projects/reviews-parsing-mlsys/index.html#architecture",
    "href": "projects/reviews-parsing-mlsys/index.html#architecture",
    "title": "Let’s build an ML system",
    "section": "Architecture",
    "text": "Architecture"
  },
  {
    "objectID": "projects/reviews-parsing-mlsys/index.html#demo",
    "href": "projects/reviews-parsing-mlsys/index.html#demo",
    "title": "Let’s build an ML system",
    "section": "Demo",
    "text": "Demo\n\n If you find this article helpful, please cite this writeup as:\n\nQuy, Dinh. (Jun 2024). Let’s build an ML system. dvquys.com. https://dvquys.com/projects/reviews-parsing-mlsys/."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Blog",
    "section": "",
    "text": "Implement a RecSys, Chapter 5: Session-based Recommendation Model\n\n\nDesign and build sequence models that capture temporal patterns in user behavior\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 31, 2025\n\n\n28 min\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation\n\n\nEstablishing the evaluation foundation and implementing your baseline\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 30, 2025\n\n\n14 min\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 3: Negative Sampling\n\n\nWhy your model needs to see what users don’t want—and how to generate those examples\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 26, 2025\n\n\n10 min\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 2: Understanding the Data and Feature Engineering\n\n\nExploring Amazon product dataset and building features for sequence models\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 25, 2025\n\n\n8 min\n\n\n\n\n\n\n\nImplement a RecSys, Chapter 1: Introduction and Project Overview\n\n\nUnderstanding session-based recommendations and setting up your development environment\n\n\n\nrecsys\n\n\nimplement-recsys-series\n\n\n\n\n\n\nMay 24, 2025\n\n\n9 min\n\n\n\n\n\n\n\nBuilding a Conversational Assistant for Restaurant Discovery and Booking\n\n\nLessons from Creating a Chatbot Using RAG, LLMs, and Advanced Retrieval Techniques\n\n\n\ntech\n\n\nllm\n\n\n\n\n\n\nSep 22, 2024\n\n\n4 min\n\n\n\n\n\n\n\nLet’s build an ML system\n\n\nEnd-to-end set up and deploy on Kubernetes\n\n\n\ntech\n\n\nmachine learning\n\n\n\n\n\n\nJun 21, 2024\n\n\n1 min\n\n\n\n\n\n\n\nA Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration\n\n\nA Practical Guide to Designing Query Templates, Boosting Relevance, and Addressing Site-Search Challenges\n\n\n\ntech\n\n\nsearch\n\n\n\n\n\n\nJun 1, 2023\n\n\n57 min\n\n\n\n\n\n\n\nFrom Model to Production: Deploying Your Machine Learning Solution on Google Cloud\n\n\nTransforming a Laptop-Trained ML Model into a Scalable Batch Processing Pipeline using GCP’s Dataproc\n\n\n\ntech\n\n\nmachine learning\n\n\n\n\n\n\nFeb 17, 2020\n\n\n14 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html",
    "href": "projects/real-time-seq-recsys/c1/index.html",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "",
    "text": "Imagine you’re building an e-commerce site and your CEO asks: “Why don’t we show personalized recommendations that update in real-time as users browse?” You think to yourself—sounds simple enough, but then reality hits: How do you capture user intent from their session behavior? How do you serve recommendations fast enough to feel real-time? How do you handle the complexity of sequence modeling at scale?\nIf this sounds familiar, this tutorial series is for you.\nOver the next several chapters, I’ll walk you through building a complete real-time recommendation system that learns from user behavior sequences. We’ll go from raw data to a complete recommender system that personalizes recommendations as users interact with your platform.\n\n\n\n\n\n\nEnough Talking, Show Me the Code!\n\n\n\nIf you’re familiar with RecSys and just want to see the code, here it is: https://github.com/dvquy13/recsys-seq-model.\n\n\nFor those who aren’t well aware of what a recommender system is, here is a quick recap. Recommender systems are specialized tools designed to suggest items—whether products, content, or services—to users based on what we know about their preferences and behaviors. At their core, they comprise a set of technologies, algorithms, and processes that analyze user interaction signals (clicks, views, purchases, ratings, etc.) to predict what individual users might find relevant or engaging.\n\n\n\nFrom a business standpoint, the primary goals of a recommender system are to create a sense of “we understand you” for each user and to drive revenue through personalized cross-selling opportunities. By tailoring recommendations to each user, companies can boost engagement and average order value. From the user’s perspective, these systems help uncover content or products they might never have discovered on their own and save time by surfacing the most relevant options up front.\nIn practice, recommender systems power some of the world’s largest digital platforms. For example, Amazon’s “Frequently Bought Together” suggestions guide shoppers toward complementary products, Facebook uses recommendation algorithms to prioritize posts and ads in users’ feeds, and Netflix’s home screen is largely driven by personalized movie and show recommendations.\n\n\n\nThe impact of these systems is profound: According to this report from McKinsey, roughly 75 percent of Netflix viewing hours come from recommended titles, 35 percent of Amazon’s purchases are influenced by its recommendations, and Netflix alone saves around $1 billion per year through improved user retention and engagement. These metrics underscore why recommender systems have become a critical component of modern digital businesses."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#introduction",
    "href": "projects/real-time-seq-recsys/c1/index.html#introduction",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "",
    "text": "Imagine you’re building an e-commerce site and your CEO asks: “Why don’t we show personalized recommendations that update in real-time as users browse?” You think to yourself—sounds simple enough, but then reality hits: How do you capture user intent from their session behavior? How do you serve recommendations fast enough to feel real-time? How do you handle the complexity of sequence modeling at scale?\nIf this sounds familiar, this tutorial series is for you.\nOver the next several chapters, I’ll walk you through building a complete real-time recommendation system that learns from user behavior sequences. We’ll go from raw data to a complete recommender system that personalizes recommendations as users interact with your platform.\n\n\n\n\n\n\nEnough Talking, Show Me the Code!\n\n\n\nIf you’re familiar with RecSys and just want to see the code, here it is: https://github.com/dvquy13/recsys-seq-model.\n\n\nFor those who aren’t well aware of what a recommender system is, here is a quick recap. Recommender systems are specialized tools designed to suggest items—whether products, content, or services—to users based on what we know about their preferences and behaviors. At their core, they comprise a set of technologies, algorithms, and processes that analyze user interaction signals (clicks, views, purchases, ratings, etc.) to predict what individual users might find relevant or engaging.\n\n\n\nFrom a business standpoint, the primary goals of a recommender system are to create a sense of “we understand you” for each user and to drive revenue through personalized cross-selling opportunities. By tailoring recommendations to each user, companies can boost engagement and average order value. From the user’s perspective, these systems help uncover content or products they might never have discovered on their own and save time by surfacing the most relevant options up front.\nIn practice, recommender systems power some of the world’s largest digital platforms. For example, Amazon’s “Frequently Bought Together” suggestions guide shoppers toward complementary products, Facebook uses recommendation algorithms to prioritize posts and ads in users’ feeds, and Netflix’s home screen is largely driven by personalized movie and show recommendations.\n\n\n\nThe impact of these systems is profound: According to this report from McKinsey, roughly 75 percent of Netflix viewing hours come from recommended titles, 35 percent of Amazon’s purchases are influenced by its recommendations, and Netflix alone saves around $1 billion per year through improved user retention and engagement. These metrics underscore why recommender systems have become a critical component of modern digital businesses."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#what-youll-build",
    "href": "projects/real-time-seq-recsys/c1/index.html#what-youll-build",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "What You’ll Build",
    "text": "What You’ll Build\nBy the end of this series, you’ll have constructed an end-to-end recommendation system while know how to:\n\nDesign and Train Session-based RecSys models using PyTorch to personalizes recommendations in real-time based on users’ recent interaction sequences\nTrack experiments with MLflow for reproducible ML workflows\nServe predictions through a FastAPI service in conjunction with a vector database and caching\nPackage the project using Docker and modern ML infrastructure\nLaunch aninteractive demo with a frontend1\n\n\n\n\n\nThe Demo"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#target-audience",
    "href": "projects/real-time-seq-recsys/c1/index.html#target-audience",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Target Audience",
    "text": "Target Audience\nThis tutorial series is designed for:\n\nData Scientists looking beyond training models and into ML services\nML Engineers building scalable recommendation systems\n\nBackend Developers interested in ML/RecSys architecture\nAnyone curious about a modern and real-time end-to-end RecSys project"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#session-based-vs-traditional-recommendations",
    "href": "projects/real-time-seq-recsys/c1/index.html#session-based-vs-traditional-recommendations",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Session-Based vs Traditional Recommendations",
    "text": "Session-Based vs Traditional Recommendations\n\nTraditional Collaborative Filtering\nTraditional recommendation systems often rely on collaborative filtering, which uses historical user-item interaction matrices to find similar users or items. While effective, these approaches have limitations:\n\nStatic representations: User preferences are treated as fixed\nCold start problems: Difficulty with new users or items\nLimited temporal understanding: Doesn’t capture evolving user interests within a session\n\n\n\nSession-Based Recommendations\nSession-based recommendation systems address these limitations by:\n\nModeling sequences: Understanding the order and timing of user interactions\nCapturing short-term intent: Focusing on recent behaviors within a session\nHandling anonymity: Working even without persistent user identifiers\nReal-time adaptation: Continuously updating recommendations as users interact"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#why-sequence-modeling-matters",
    "href": "projects/real-time-seq-recsys/c1/index.html#why-sequence-modeling-matters",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Why Sequence Modeling Matters",
    "text": "Why Sequence Modeling Matters\nUser behavior is inherently sequential. Consider an e-commerce browsing session:\n\nUser searches for “wireless headphones”\nViews a Sony model\nChecks reviews for Audio-Technica alternatives\nCompares prices across brands\n\nEach step provides context for the next recommendation. Traditional systems might miss this sequential pattern, while sequence models capture the evolving intent throughout the session.\n\n\n\n\nData signals"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#real-time-architecture-a-simplified-payload-approach",
    "href": "projects/real-time-seq-recsys/c1/index.html#real-time-architecture-a-simplified-payload-approach",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Real-Time Architecture: A Simplified Payload Approach",
    "text": "Real-Time Architecture: A Simplified Payload Approach\nIn production, real-time recommendation systems typically leverage streaming architectures with event pipelines (Kafka, Kinesis, etc.) that process user interactions. The streaming system is normally built in a centralized manner by a platform team with the aim to provide real-time data processing capabilities to multiple downstream usages. This approach also ensures scalability and reliability.\nHowever, for the purpose of this tutorial, we’ll use the simplified request-payload approach to focus on the ML aspects rather than streaming infrastructure complexity.\nBasically we would include the real-time events in the payload of the requests coming in to RecSys APIs. In real-world, implementation can be done by frontend capturing user interactions locally (clicks, views, etc.) and includes recent session history in each API request.\nWhile this approach looks like a hacky-workaround ways, I have seen teams using this in production for early-stage real-time ML RecSys. In the end, the idea in and of itself has some merits such as minimal signal delay, users not needing to refresh to get updated recommendations and easier to implement and debug.\nIn the below screenshot you can see that in the POST request payload sending to a recommendation endpoint, we include the recent user interacted item IDs in item_seq_raw in the payload.\n\n\n\n\nExample request payload"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#our-technology-stack",
    "href": "projects/real-time-seq-recsys/c1/index.html#our-technology-stack",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Our Technology Stack",
    "text": "Our Technology Stack\nBelow is a list of the technology frameworks we use in this project. There is no need to understand all of them in detail, so do not worry too much if you are not familiar. However, I do encourage you to at least learn the basics of each of them. Wherever possible I would also explain the rationale and what roles they play in the system that we build together.\n\n\n\nComponent\nTechnology\nPurpose\n\n\n\n\nML Framework\nPyTorch\nDeep learning model training\n\n\nAPI Server\nFastAPI\nHigh-performance API endpoints\n\n\nExperiment Tracking\nMLflow\nModel versioning and experiments\n\n\nVector Database\nQdrant\nSimilarity search and retrieval\n\n\nCaching\nRedis\nReal-time data storage\n\n\nPackage Management\nuv\nFast Python dependency management\n\n\nContainerization\nDocker\nConsistent deployment environments"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#project-structure-overview",
    "href": "projects/real-time-seq-recsys/c1/index.html#project-structure-overview",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Project Structure Overview",
    "text": "Project Structure Overview\nThe codebase can be found here. Below is a quick glance into its structure.\nrecsys-seq-model/\n├── notebooks/           # Progressive tutorial notebooks\n│   ├── 000-prep-data.ipynb\n│   ├── 001-features.ipynb\n│   ├── 002-negative-sample.ipynb\n│   ├── 010-baseline-popular.ipynb\n│   ├── 011-sequence-modeling.ipynb\n│   ├── 020-ann-index.ipynb\n│   └── 021-redis-prep.ipynb\n├── src/                 # Core implementation modules\n│   ├── cfg.py          # Configuration management\n│   ├── dataset.py      # Data loading utilities  \n│   ├── id_mapper.py    # ID mapping functionality\n│   ├── negative_sampling.py  # Sampling strategies\n│   ├── sequence/       # Sequence model implementations\n│   ├── eval/          # Evaluation frameworks\n│   └── vectorstore.py # Qdrant integration\n├── api/                # FastAPI service\n│   ├── app.py         # Main application\n│   ├── services.py    # Business logic\n│   └── models.py      # Request/response schemas\n├── mlflow/            # MLflow configuration\n├── data/              # Dataset storage\n└── compose.yml        # Docker orchestration\n\nProgressive Notebook Approach\nNotice the numbered notebook sequence (000, 001, 002, etc.). This design ensures you build knowledge progressively:\n\n000-series: Data preparation and exploration\n010-series: Model training and evaluation\n\n020-series: Production deployment preparation\n\nEach notebook represents a complete milestone, allowing you to pause and resume at any point.\n\n\nA note on the commonly used commands\nYou may found the below commands useful, as I have myself running them regularly when developing the projects. Treating them as shortcuts, I have put them in the Makefile:\n# Environment Management\nmake ml-platform-up      # Start MLflow, Qdrant, Redis\nmake ml-platform-down    # Stop all services\nmake ml-platform-logs    # View service logs\n\n# Development\nuv sync --all-groups     # Install/update dependencies\nmake requirements-txt    # Export requirements for Docker\n\n# API Operations (covered in later chapters)\nmake api-up             # Start the FastAPI service\nmake api-test           # Run API tests\n\n# UI Demo (optional)\nmake ui-up              # Start the frontend demo"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#what-weve-covered",
    "href": "projects/real-time-seq-recsys/c1/index.html#what-weve-covered",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "What We’ve Covered",
    "text": "What We’ve Covered\nTo get a hands on the system that we will build together, you can clone the repo and follow the instructions in the README to get the project running.\nAfter that you should have:\n\nA clear picture of what session-based recommendations are and why they’re useful\nYour development environment ready to go with all services running\n\nFamiliarity with the project structure so you can navigate the codebase\n\nThe foundation knowledge to tackle the upcoming chapters"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#whats-next",
    "href": "projects/real-time-seq-recsys/c1/index.html#whats-next",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "What’s Next",
    "text": "What’s Next\nIn Chapter 2, we’ll get our hands dirty while setting up the input data in a format that’s designed for sequence modeling.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Building Real-time RecSys Chapter 1 - Introduction and Project Overview. dvquys.com. https://dvquys.com/projects/real-time-seq-recsys/c1/."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#footnotes",
    "href": "projects/real-time-seq-recsys/c1/index.html#footnotes",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThough not covered in this tutorial, there would be example UI code in the repo.↩︎"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html",
    "href": "projects/real-time-seq-recsys/c2/index.html",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "",
    "text": "In Chapter 1, we set up our development environment and explored the project architecture. Now it’s time to dive into the heart of any recommendation system: data. The quality of our recommendations depends entirely on how well we understand, process, and engineer features from our data.\nThis chapter focuses on the data pipeline from raw data to model-ready features. We’ll explore the Amazon product dataset, understand user-item interaction sequences, and build the feature engineering pipeline that will power our session-based recommender.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/000-prep-data.ipynb and notebooks/001-features.ipynb files in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#introduction",
    "href": "projects/real-time-seq-recsys/c2/index.html#introduction",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "",
    "text": "In Chapter 1, we set up our development environment and explored the project architecture. Now it’s time to dive into the heart of any recommendation system: data. The quality of our recommendations depends entirely on how well we understand, process, and engineer features from our data.\nThis chapter focuses on the data pipeline from raw data to model-ready features. We’ll explore the Amazon product dataset, understand user-item interaction sequences, and build the feature engineering pipeline that will power our session-based recommender.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/000-prep-data.ipynb and notebooks/001-features.ipynb files in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#dataset-overview-amazon-reviews-2023",
    "href": "projects/real-time-seq-recsys/c2/index.html#dataset-overview-amazon-reviews-2023",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Dataset Overview: Amazon Reviews 2023",
    "text": "Dataset Overview: Amazon Reviews 2023\nA good dataset for this kind of sequential recommendation project would typically have the following characteristics:\n\nTemporal richness: Each interaction has a timestamp, enabling sequence modeling\nScale: Millions of interactions across thousands of users and items\nReal-world patterns: Authentic user behavior with natural sparsity\n\nAmong the well-known public datasets, I chose the Amazon Reviews 2023 dataset from the McAuley Lab, specifically the “Books” category. Beyond the characteristics above, this dataset has other useful features—like reviews for both users and items—with plenty of observations to work with.\n\n\n\n\n\n\nThe main schema of the dataset is as simple as follows:\n# From cfg/common.yaml\ndata:\n1  user_col: \"user_id\"\n2  item_col: \"parent_asin\"\n3  rating_col: \"rating\"\n4  timestamp_col: \"timestamp\"\n\n1\n\nUnique user identifier\n\n2\n\nProduct identifier (in our case, the ASIN—Amazon Standard Identification Number)\n\n3\n\nUser rating (1-5 scale)\n\n4\n\nInteraction timestamp\n\n\n\n\n\n\n\n\nConfiguration Management\n\n\n\n\n\nfrom src.cfg import ConfigLoader\n\n# Load configuration\ncfg = ConfigLoader(\"cfg/common.yaml\")\nThroughout this project, we store most configuration in cfg/common.yaml. This design does not only make it easier for notebooks and scripts to access their inputs and outputs but also help us try different configurations quickly."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#core-data-schema",
    "href": "projects/real-time-seq-recsys/c2/index.html#core-data-schema",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Core Data Schema",
    "text": "Core Data Schema\nOur processed dataset follows a clean schema optimized for recommendation systems:\n\n\n\nField\nDescription\nSource Column\n\n\n\n\nuser_id\nUnique user identifier\nuser_id\n\n\nparent_asin\nProduct identifier (our item_id)\nparent_asin\n\n\nrating\nUser rating (1-5 scale)\nrating\n\n\ntimestamp\nInteraction timestamp\ntimestamp\n\n\n\nThis maps to our configuration:\n# From cfg/common.yaml\ndata:\n  user_col: \"user_id\"\n  item_col: \"parent_asin\"  \n  rating_col: \"rating\"\n  timestamp_col: \"timestamp\""
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#data-preprocessing-pipeline",
    "href": "projects/real-time-seq-recsys/c2/index.html#data-preprocessing-pipeline",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Data Preprocessing Pipeline",
    "text": "Data Preprocessing Pipeline\nThe data flows through several key preprocessing steps:\n\n1. Data Sampling and Filtering\nAs ML is mostly about iterative development, the main rationale of sampling and filtering is to have a small but decent enough dataset to experiment different ideas fast. The more experiments we run, the more likely we would introduce improvements to our models.\nWhat does it mean for a decent RecSys dataset? One of the key criteria is sparsity—the ratio of observed interactions to all possible user-item pairs.\nTo understand why sparsity is problematic, consider the interaction matrix where each cell represents a potential user-item interaction:\n\nMatrix size: num_users × num_items (total possible interactions)\nActual interactions: Much smaller number of observed ratings/clicks\nSparsity: 1 - (actual_interactions / (num_users × num_items))\n\nThe sparsity problem gets quadratically worse as datasets grow:\n# Small dataset example\nusers = 1,000, items = 1,000 → possible interactions = 1M\nactual interactions = 50,000 → sparsity = 95%\n\n# Larger dataset \nusers = 10,000, items = 10,000 → possible interactions = 100M  \nactual interactions = 500,000 → sparsity = 99.5%\nEach new user adds an entire row of mostly empty interactions, and each new item adds an entire column of mostly empty interactions. Since users typically interact with only a tiny fraction of available items, the interaction matrix becomes increasingly sparse as the catalog grows.\nIn RecSys, the interaction distribution is typically long tail—a lot of noisy items or users have just a few interactions. So while randomly sampling may work just fine for many ML use cases, we need to apply it a bit more carefully here. Remember that ultimately we want to have a sample dataset where each user/item has at least X interactions.\nThe tricky part is that a basic random sampling of users and items would create sparsity cascade—a domino effect that breaks your dataset.\nHere’s what happens: You start with users and items that look fine on their own. User A has 10 interactions, Item X has 15 interactions. When you remove User B, you also lose all of User B’s interactions with Item X. Suddenly Item X only has 8 interactions. Oops, now it’s too sparse, so you remove it too. But removing Item X means User A loses some interactions and might become too sparse as well.\nIt’s like pulling threads from a sweater—everything starts unraveling.\nTo deal with this problem, we can take an iterative approach where we gradually drop random users from the dataset while keeping an eye on the conditions and our sampling target. The trade-off is that we would no longer have an exact fixed number of users and items in the dataset as we would like, but rather defining minimum acceptable thresholds, like below:\n# From cfg/common.yaml\nsample:\n  sample_users: 10000\n1  min_val_records: 5000\n  min_user_interactions: 5\n  min_item_interactions: 10\n\n1\n\nWe need to ensure sufficient validation data to evaluate our models.\n\n\nfrom src.sample import InteractionDataSampler\n\ndata_sampler = InteractionDataSampler(\n    user_col=cfg.data.user_col,\n    item_col=cfg.data.item_col,\n    sample_users=cfg.sample.sample_users,\n    min_val_records=cfg.sample.min_val_records,\n    random_seed=cfg.run.random_seed,\n    min_item_interactions=cfg.sample.min_item_interactions,\n    min_user_interactions=cfg.sample.min_user_interactions,\n    perc_users_removed_each_round=0.1,\n    debug=False,\n)\n...\n\nRandomly removing 2960 users - Round 18 started\nAfter randomly removing users - round 18: num_users=29,605\nNumber of users 29,605 are still greater than expected, keep removing...\n\nRandomly removing 2413 users - Round 19 started\nAfter randomly removing users - round 19: num_users=24,137\nNumber of users 24,137 are still greater than expected, keep removing...\nNumber of val_df records 4,282 are falling below expected threshold, stop and use `sample_df` as final output...\nlen(sample_users)=19,734 len(sample_items)=7,388\n\n\n\n\n\n\nInteractionDataSampler implementation\n\n\n\n\n\n\nIn the end, we would not have exact like 10000 users, but the numbers would be close to that. The distribution of the interaction is shown below:\n\n\n\n\n\n2. Train-test split\nWe need to have a validation test dataset to evaluate our models, so that we can have an estimate of how well it performs on unseen data.\nThere are two main types of train-test-split in RecSys:\n\n\n\nAFAIK, the last-one-out is often used more in academic settings while absolute timestamp is more common in industry. As whatever model you have deployed on production would be tested against data in the next day."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#id-mapping-from-strings-to-indices",
    "href": "projects/real-time-seq-recsys/c2/index.html#id-mapping-from-strings-to-indices",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "ID Mapping: From Strings to Indices",
    "text": "ID Mapping: From Strings to Indices\nAs discussed in Chapter 1, we’re modeling this problem with neural networks. Deep learning models work with numerical indices, not string IDs. So we use our IDMapper to provide deterministic mapping from user and item IDs to indices:\nfrom src.id_mapper import IDMapper\n\nuser_ids = train_df[cfg.data.user_col].values\nitem_ids = train_df[cfg.data.item_col].values\nunique_user_ids = list(set(user_ids))\nunique_item_ids = list(set(item_ids))\nidm = IDMapper()\nidm.fit(unique_user_ids, unique_item_ids)\n\n# Save for later use in model serving\nidm.save(\"data/idm.json\")"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#sequence-generation-the-heart-of-sequential-recsys",
    "href": "projects/real-time-seq-recsys/c2/index.html#sequence-generation-the-heart-of-sequential-recsys",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Sequence Generation: The Heart of Sequential RecSys",
    "text": "Sequence Generation: The Heart of Sequential RecSys\nThe key innovation in our approach is generating item sequences for each user interaction. This captures the temporal context that traditional collaborative filtering misses.\nfrom src.sequence.utils import generate_item_sequences\n\ndef generate_sequences(df, sequence_length=10):\n    \"\"\"\n    For each user interaction, create a sequence of their previous items.\n    This gives our model context about user behavior patterns.\n    \"\"\"\n    df_with_sequences = generate_item_sequences(\n        df=df,\n        user_col='user_indice',\n        item_col='item_indice', \n        timestamp_col='timestamp',\n        sequence_length=sequence_length,\n        padding=True,\n        padding_value=-1  # Special token for \"no previous item\"\n    )\n    \n    return df_with_sequences\n\nHow Sequence Generation Works\nLet’s trace through an example:\n# User interactions over time:\n# Time 1: User buys \"Python Programming\" (item_indice: 42)\n# Time 2: User buys \"Machine Learning\" (item_indice: 73) \n# Time 3: User buys \"Deep Learning\" (item_indice: 91)\n\n# Generated sequences:\n# Row 1: item_sequence = [-1, -1, ..., -1]           # No previous items\n# Row 2: item_sequence = [-1, -1, ..., 42]          # Previous: Python book\n# Row 3: item_sequence = [-1, -1, ..., 42, 73]      # Previous: Python, ML books\nThis gives our model the context it needs to understand user preferences and make sequential predictions.\n\n\nConfiguration for Sequences\n# From cfg/common.yaml\ntrain:\n  sequence:\n    sequence_length: 10  # Keep last 10 items as context\nThe sequence length is a key hyperparameter: - Longer sequences: More context but higher memory usage - Shorter sequences: Less context but faster training - Padding: Ensures all sequences have the same length for batch processing"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#dataset-classes-for-training",
    "href": "projects/real-time-seq-recsys/c2/index.html#dataset-classes-for-training",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Dataset Classes for Training",
    "text": "Dataset Classes for Training\nOur src/dataset.py provides PyTorch-compatible dataset classes:\nfrom src.dataset import UserItemBinaryDFDataset\n\n# Create dataset for binary feedback (clicked/not clicked)\ndataset = UserItemBinaryDFDataset(\n    df=df_with_sequences,\n    user_col='user_indice',\n    item_col='item_indice',\n    rating_col='rating',\n    timestamp_col='timestamp'\n)\n\n# Each sample contains:\nsample = dataset[0]\nprint(f\"User: {sample['user']}\")           # User index\nprint(f\"Item: {sample['item']}\")           # Item index  \nprint(f\"Rating: {sample['rating']}\")       # Binary label (0 or 1)\nprint(f\"Sequence: {sample['item_sequence']}\")  # Previous items\n\nWhy Binary Labels?\nWe convert ratings to binary labels because: - Implicit feedback: Focus on engagement (rating ≥ 1) vs no engagement - Training stability: Binary classification is more stable than rating prediction - Real-world relevance: Most recommendation systems optimize for engagement, not rating accuracy"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#data-flow-through-the-pipeline",
    "href": "projects/real-time-seq-recsys/c2/index.html#data-flow-through-the-pipeline",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Data Flow Through the Pipeline",
    "text": "Data Flow Through the Pipeline\nLet’s trace the complete data flow from our configuration:\n# 1. Raw data paths (from cfg/common.yaml)\ndata:\n  train_fp: \"$ROOT_DIR/data/train.parquet\"           # Processed train split\n  val_fp: \"$ROOT_DIR/data/val.parquet\"               # Processed validation split\n  train_features_fp: \"$ROOT_DIR/data/train_features.parquet\"  # With sequences\n  val_features_fp: \"$ROOT_DIR/data/val_features.parquet\"      # With sequences\n  idm_fp: \"$ROOT_DIR/data/idm.json\"                  # ID mappings\n\n# 2. Processing pipeline (notebooks/001-features.ipynb)\nraw_data → iterative_sampling → train_test_split → id_mapping → sequence_generation → save\n\nKey Processing Steps\n\nData Loading: Load preprocessed train/val splits\nID Mapping: Convert string IDs to numerical indices\n\nSequence Generation: Create item sequence features\nData Validation: Ensure data quality and consistency\nSerialization: Save processed features for model training"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#configuration-driven-development",
    "href": "projects/real-time-seq-recsys/c2/index.html#configuration-driven-development",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Configuration-Driven Development",
    "text": "Configuration-Driven Development\nEverything is controlled through our YAML configuration:\n# cfg/common.yaml - Data section\ndata:\n  hf_datasets:\n    name: \"McAuley-Lab/Amazon-Reviews-2023\"\n    mcauley_variant: \"Books\"\n  \n  # File paths with environment variable substitution\n  train_fp: \"$ROOT_DIR/data/train.parquet\"\n  val_fp: \"$ROOT_DIR/data/val.parquet\"\n  idm_fp: \"$ROOT_DIR/data/idm.json\"\n  \n  # Column mappings\n  user_col: \"user_id\"\n  item_col: \"parent_asin\" \n  rating_col: \"rating\"\n  timestamp_col: \"timestamp\"\n\n# Sampling configuration  \nsample:\n  sample_users: 10000\n  min_user_interactions: 5\n  min_item_interactions: 10\n\n# Sequence configuration\ntrain:\n  sequence:\n    sequence_length: 10\nThis approach provides: - Reproducibility: Same config = same results - Flexibility: Easy to experiment with different parameters - Environment handling: Automatic path resolution with $ROOT_DIR"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#data-quality-checks",
    "href": "projects/real-time-seq-recsys/c2/index.html#data-quality-checks",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Data Quality Checks",
    "text": "Data Quality Checks\nBefore moving to model training, we validate our processed data:\ndef validate_processed_data(df, idm):\n    \"\"\"Ensure our processed data is ready for model training.\"\"\"\n    \n    print(f\"Data shape: {df.shape}\")\n    print(f\"Users: {df['user_indice'].nunique()}\")\n    print(f\"Items: {df['item_indice'].nunique()}\")\n    \n    # Check for invalid indices\n    max_user_idx = len(idm.user_to_index) - 1\n    max_item_idx = len(idm.item_to_index) - 1\n    \n    assert df['user_indice'].max() &lt;= max_user_idx, \"Invalid user indices\"\n    assert df['item_indice'].max() &lt;= max_item_idx, \"Invalid item indices\"\n    \n    # Check sequence validity\n    if 'item_sequence' in df.columns:\n        seq_lengths = df['item_sequence'].apply(len)\n        print(f\"Sequence lengths: min={seq_lengths.min()}, max={seq_lengths.max()}\")\n    \n    print(\"✅ Data validation passed!\")"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#what-weve-accomplished",
    "href": "projects/real-time-seq-recsys/c2/index.html#what-weve-accomplished",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "What We’ve Accomplished",
    "text": "What We’ve Accomplished\nBy the end of this chapter, you have:\n✅ Understanding of recommendation data characteristics - Temporal patterns, sparsity, and user behavior\n✅ Processed dataset with proper ID mappings - Ready for deep learning models\n✅ Feature engineering pipeline for sequences - The core of session-based recommendations\n✅ Configuration-driven data processing - Reproducible and flexible pipeline\n✅ Data validation and quality checks - Ensuring reliability for model training\n\nKey Files Created\n\ndata/train_features.parquet - Training data with sequences\ndata/val_features.parquet - Validation data with sequences\n\ndata/idm.json - ID mappings for production deployment"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#whats-next",
    "href": "projects/real-time-seq-recsys/c2/index.html#whats-next",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "What’s Next",
    "text": "What’s Next\nIn Chapter 3, we’ll tackle the critical challenge of negative sampling. If our model only sees positive interactions (ratings), it can’t learn meaningful patterns for generalization. We need to generate negative examples so the model can distill the patterns by learning to distinguish between positive and negative interactions.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering. dvquys.com. https://dvquys.com/projects/real-time-seq-recsys/c2/."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#interactiondatasampler-implementation",
    "href": "projects/real-time-seq-recsys/c2/index.html#interactiondatasampler-implementation",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "InteractionDataSampler implementation",
    "text": "InteractionDataSampler implementation"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#sequence-generation",
    "href": "projects/real-time-seq-recsys/c2/index.html#sequence-generation",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Sequence Generation",
    "text": "Sequence Generation\nAt this point, you might wonder about the sequences I mentioned earlier. How does user-item rating data relate to sequences?\nTraditional collaborative filtering approaches like Matrix Factorization only use the user-item rating matrix. But one important signal gets left out: the timestamps.\nThe key insight is simple: when a user interacts with items over time, those interactions tell a story. We group each user’s interactions chronologically to create sequences of items, with the assumption that items a user engages with have meaningful relationships to each other.\nLet’s trace through an example to understand how sequence generation works:\n# User interactions over time:\n# Time 1: User buys \"Python Programming\" (item_indice: 42)\n# Time 2: User buys \"Machine Learning\" (item_indice: 73) \n# Time 3: User buys \"Deep Learning\" (item_indice: 91)\n\n# Generated sequences:\n# Row 1: item_sequence = [-1, -1, ..., -1]           # No previous items\n# Row 2: item_sequence = [-1, -1, ..., 42]          # Previous: Python book\n# Row 3: item_sequence = [-1, -1, ..., 42, 73]      # Previous: Python, ML books\n# Sample DataFrame\ndata = {\n    \"user_indices\": [0, 0, 1, 1, 1],\n    \"item_indices\": [0, 1, 2, 3, 4],\n    \"timestamp\": [0, 1, 2, 3, 4],\n    \"ratings\": [1, 4, 5, 3, 2],\n}\n\ndf = pd.DataFrame(data)\n\n# Generate the item sequences\ndf_with_sequences = generate_item_sequences(\n    df,\n    user_col=\"user_indices\",\n    item_col=\"item_indices\",\n    timestamp_col=\"timestamp\",\n    sequence_length=3,\n    padding=True,\n    padding_value=-1,\n)\n\nAs you can see, the above item_sequence column contains the sequence of items in chronological order which holds the context for the model to understand user preferences and make sequential predictions.\nIn this project, we use the user’s last 10 items as the sequence length, but this is configurable. The choice depends on experimentation, but generally there’s a trade-off: longer sequences provide more context but use more memory, while shorter sequences focus on recent items and process faster.\nDo take note that we need to pad sequences to the same length so we can batch process them in our PyTorch model.\n# From cfg/common.yaml\ntrain:\n  sequence:\n    sequence_length: 10  # Keep last 10 items as context"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#data-sampling-and-filtering",
    "href": "projects/real-time-seq-recsys/c2/index.html#data-sampling-and-filtering",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Data Sampling and Filtering",
    "text": "Data Sampling and Filtering\nAs ML is mostly about iterative development, the main rationale of sampling and filtering is to have a small but decent enough dataset to experiment different ideas fast. The more experiments we run, the more likely we would introduce improvements to our models.\nWhat does it mean for a decent RecSys dataset? One of the key criteria is sparsity—the ratio of observed interactions to all possible user-item pairs.\nTo understand why sparsity is problematic, consider the interaction matrix where each cell represents a potential user-item interaction:\n\nMatrix size: num_users × num_items (total possible interactions)\nActual interactions: Much smaller number of observed ratings/clicks\nSparsity: 1 - (actual_interactions / (num_users × num_items))\n\nThe sparsity problem gets quadratically worse as datasets grow:\n# Small dataset example\nusers = 1,000, items = 1,000 → possible interactions = 1M\nactual interactions = 50,000 → sparsity = 95%\n\n# Larger dataset \nusers = 10,000, items = 10,000 → possible interactions = 100M  \nactual interactions = 500,000 → sparsity = 99.5%\nEach new user adds an entire row of mostly empty interactions, and each new item adds an entire column of mostly empty interactions. Since users typically interact with only a tiny fraction of available items, the interaction matrix becomes increasingly sparse as the catalog grows.\nIn recommendation systems, interactions follow a long-tailed distribution—many users and items have only a few interactions. So while randomly sampling may work just fine for many ML use cases, we need to apply it a bit more carefully here. Ultimately we want to have a sample dataset where each user/item has at least X interactions.\nThe tricky part is that a basic random sampling of users and items would create sparsity cascade—a domino effect that breaks your dataset.\nHere’s what happens: You start with users and items that look fine on their own. User A has 10 interactions, Item X has 15 interactions. When you remove User B, you also lose all of User B’s interactions with Item X. Suddenly Item X only has 8 interactions. Oops, now it’s too sparse, so you remove it too. But removing Item X means User A loses some interactions and might become too sparse as well.\nIt’s like pulling threads from a sweater—everything starts unraveling.\nTo solve this, we take an iterative approach. We gradually drop random users from the dataset while watching our conditions and sampling targets. The trade-off is that while it’s hard to get an exact predefined number of users and items, we can control the minimum acceptable thresholds:\n# From cfg/common.yaml\nsample:\n  sample_users: 10000\n1  min_val_records: 5000\n  min_user_interactions: 5\n  min_item_interactions: 10\n\n1\n\nWe need to ensure sufficient validation data to evaluate our models.\n\n\nfrom src.sample import InteractionDataSampler\n\ndata_sampler = InteractionDataSampler(\n    user_col=cfg.data.user_col,\n    item_col=cfg.data.item_col,\n    sample_users=cfg.sample.sample_users,\n    min_val_records=cfg.sample.min_val_records,\n    random_seed=cfg.run.random_seed,\n    min_item_interactions=cfg.sample.min_item_interactions,\n    min_user_interactions=cfg.sample.min_user_interactions,\n    perc_users_removed_each_round=0.1,\n    debug=False,\n)\n...\n\nRandomly removing 2960 users - Round 18 started\nAfter randomly removing users - round 18: num_users=29,605\nNumber of users 29,605 are still greater than expected, keep removing...\n\nRandomly removing 2413 users - Round 19 started\nAfter randomly removing users - round 19: num_users=24,137\nNumber of users 24,137 are still greater than expected, keep removing...\nNumber of val_df records 4,282 are falling below expected threshold, stop and use `sample_df` as final output...\nlen(sample_users)=19,734 len(sample_items)=7,388\n\n\n\n\n\n\nInteractionDataSampler implementation\n\n\n\n\n\n\nIn the end, we won’t have exactly 10,000 users, but the numbers will be close. The distribution of interactions is shown below:"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#train-test-split",
    "href": "projects/real-time-seq-recsys/c2/index.html#train-test-split",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Train-Test Split",
    "text": "Train-Test Split\nAfter sampling our data, we need to split it into a train and validation dataset to evaluate our models. The validation dataset plays a critical role in providing an estimate of how well the model performs on unseen data.\nThere are two main types of train-test-split in RecSys:\n\n\n\nFrom what I’ve seen, last-one-out is used more in academic settings, while absolute timestamp is more common in industry. This makes sense from the perspective that any model deployed in production gets tested against future data."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#recap",
    "href": "projects/real-time-seq-recsys/c2/index.html#recap",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Recap",
    "text": "Recap\nIn this chapter, we covered:\n\nData Sampling and Filtering: We discussed problems with basic random sampling of dyadic data and introduced our iterative sampling approach\nID Mapping: We converted string IDs to numerical indices to work with PyTorch model\nSequence Generation: We created item sequence features based on user’s chronological interactions\n\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/000-prep-data.ipynb and notebooks/001-features.ipynb files in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c1/index.html#recap",
    "href": "projects/real-time-seq-recsys/c1/index.html#recap",
    "title": "Building Real-time RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Recap",
    "text": "Recap\nTo get a hands on the system that we will build together, you can clone the repo and follow the instructions in the README to get the project running.\nAfter that you should have:\n\nA clear picture of what session-based recommendations are and why they’re useful\nYour development environment ready to go with all services running\n\nFamiliarity with the project structure so you can navigate the codebase\n\nThe foundation knowledge to tackle the upcoming chapters"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c2/index.html#feature-engineering",
    "href": "projects/real-time-seq-recsys/c2/index.html#feature-engineering",
    "title": "Building Real-time RecSys Chapter 2 - Understanding the Data and Feature Engineering",
    "section": "Feature Engineering",
    "text": "Feature Engineering\n\nID Mapping: From Strings to Indices\nAs discussed in Chapter 1, we’re modeling this problem with neural networks. Deep learning models work with numerical indices, not string IDs. So we use our IDMapper to provide deterministic mapping from user and item IDs to indices:\nfrom src.id_mapper import IDMapper\n\nuser_ids = train_df[cfg.data.user_col].values\nitem_ids = train_df[cfg.data.item_col].values\nunique_user_ids = list(set(user_ids))\nunique_item_ids = list(set(item_ids))\nidm = IDMapper()\nidm.fit(unique_user_ids, unique_item_ids)\n\n# Save for later use in model serving\nidm.save(\"data/idm.json\")\n\n# Below is the example output of the indice mapping for user IDs:\ndisplay(idm.user_to_index)\n{\n  \"AE224PFXAEAT66IXX43GRJSWHXCA\": 0,\n  \"AE225Y3KDZ44DHLUKLE4RJ63HC5Q\": 1,\n  \"AE226YVDC3MAGJZMZ4IBGE7RFJSQ\": 2,\n  \"AE22EJZ4354VB7MN4IE2CDGHA2DQ\": 3,\n  \"AE22O3TURLPFCJKL7YCX5CPF22OA\": 4\n}\n\n\nSequence Generation\nAt this point, you might wonder about the sequences I mentioned earlier. How does user-item rating data relate to sequences?\nTraditional collaborative filtering approaches like Matrix Factorization only use the user-item rating matrix. But one important signal gets left out: the timestamps.\nThe key insight is simple: when a user interacts with items over time, those interactions tell a story. We group each user’s interactions chronologically to create sequences of items, with the assumption that items a user engages with have meaningful relationships to each other.\nLet’s trace through an example to understand how sequence generation works:\n# User interactions over time:\n# Time 1: User buys \"Python Programming\" (item_indice: 42)\n# Time 2: User buys \"Machine Learning\" (item_indice: 73) \n# Time 3: User buys \"Deep Learning\" (item_indice: 91)\n\n# Generated sequences:\n# Row 1: item_sequence = [-1, -1, ..., -1]           # No previous items\n# Row 2: item_sequence = [-1, -1, ..., 42]          # Previous: Python book\n# Row 3: item_sequence = [-1, -1, ..., 42, 73]      # Previous: Python, ML books\n# Sample DataFrame\ndata = {\n    \"user_indices\": [0, 0, 1, 1, 1],\n    \"item_indices\": [0, 1, 2, 3, 4],\n    \"timestamp\": [0, 1, 2, 3, 4],\n    \"ratings\": [1, 4, 5, 3, 2],\n}\n\ndf = pd.DataFrame(data)\n\n# Generate the item sequences\ndf_with_sequences = generate_item_sequences(\n    df,\n    user_col=\"user_indices\",\n    item_col=\"item_indices\",\n    timestamp_col=\"timestamp\",\n    sequence_length=3,\n    padding=True,\n    padding_value=-1,\n)\n\ndisplay(df_with_sequences)\n\nAs you can see, the above item_sequence column contains the sequence of items in chronological order which holds the context for the model to understand user preferences and make sequential predictions.\nIn this project, we use the user’s last 10 items as the sequence length, but this is configurable. The choice depends on experimentation, but generally there’s a trade-off: longer sequences provide more context but use more memory, while shorter sequences focus on recent items and process faster.\nDo take note that we need to pad sequences to the same length so we can batch process them in our PyTorch model.\n# From cfg/common.yaml\ntrain:\n  sequence:\n    sequence_length: 10  # Keep last 10 items as context"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html",
    "href": "projects/real-time-seq-recsys/c3/index.html",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "",
    "text": "In Chapter 2, we dug into our Amazon dataset and built a solid feature preprocessing pipeline. But we’re not ready to train any models yet. We’re missing something crucial: the labels that will teach our model the difference between what users want and what they don’t.\nWe already know which items users bought. So here’s a natural idea: let’s turn this into a sequence prediction problem. Show the model a user’s past actions, then ask it to predict what comes next.\nIf this idea of predicting next thing based on a sequence of things sounds familiar, then it’s expected. This is exactly what researchers in natural language processing figured out years ago. Take Word2Vec. It’s a simple but brilliant model that learns word relationships by studying which words hang out together. Word2Vec breaks a sentence into input-output pairs where the surrounding words are the input and the hidden target word is what you’re trying to predict.\n\n\n\nSource: A simple Word2Vec tutorial\n\n\nAt each step, we pick a target word along with its neighboring context to form a positive training example. How about the negatives? That’s where negative sampling comes in. Rather than letting the model see only context words that belong together, we throw in some randomly selected words from outside the context. This mix challenges the model, teaching it to learn the patterns of words that appear in similar contexts.\nNow let’s apply this to our book dataset. When a user clicks, views, or buys something, that’s a clear positive signal. But what about the millions of items they never touch? Are these items bad, or did the user just never discover them? Negative sampling helps us figure this out. It gives the model examples of what a user probably won’t pick.\nI personally find this analogy helpful: Training a recommendation model without negative samples is like teaching someone to recognize cats by only showing them cat pictures. They might think everything is a cat!\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is in notebooks/002-negative-sample.ipynb and src/negative_sampling.py in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#introduction",
    "href": "projects/real-time-seq-recsys/c3/index.html#introduction",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "",
    "text": "In Chapter 2, we dug into our Amazon dataset and built a solid feature preprocessing pipeline. But we’re not ready to train any models yet. We’re missing something crucial: the labels that will teach our model the difference between what users want and what they don’t.\nWe already know which items users bought. So here’s a natural idea: let’s turn this into a sequence prediction problem. Show the model a user’s past actions, then ask it to predict what comes next.\nIf this idea of predicting next thing based on a sequence of things sounds familiar, then it’s expected. This is exactly what researchers in natural language processing figured out years ago. Take Word2Vec. It’s a simple but brilliant model that learns word relationships by studying which words hang out together. Word2Vec breaks a sentence into input-output pairs where the surrounding words are the input and the hidden target word is what you’re trying to predict.\n\n\n\nSource: A simple Word2Vec tutorial\n\n\nAt each step, we pick a target word along with its neighboring context to form a positive training example. How about the negatives? That’s where negative sampling comes in. Rather than letting the model see only context words that belong together, we throw in some randomly selected words from outside the context. This mix challenges the model, teaching it to learn the patterns of words that appear in similar contexts.\nNow let’s apply this to our book dataset. When a user clicks, views, or buys something, that’s a clear positive signal. But what about the millions of items they never touch? Are these items bad, or did the user just never discover them? Negative sampling helps us figure this out. It gives the model examples of what a user probably won’t pick.\nI personally find this analogy helpful: Training a recommendation model without negative samples is like teaching someone to recognize cats by only showing them cat pictures. They might think everything is a cat!\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is in notebooks/002-negative-sample.ipynb and src/negative_sampling.py in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#the-implicit-feedback-problem",
    "href": "projects/real-time-seq-recsys/c3/index.html#the-implicit-feedback-problem",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "The Implicit Feedback Problem",
    "text": "The Implicit Feedback Problem\n\nUnderstanding the Challenge\nIn recommendation systems, we typically deal with implicit feedback—user actions like clicks, views, or purchases that indicate positive interest. Unlike explicit feedback (ratings, thumbs up/down), implicit feedback only tells us about positive interactions.\nConsider this user-item interaction matrix:\n        Item_A  Item_B  Item_C  Item_D  Item_E\nUser_1    1       0       1       0       0\nUser_2    0       1       0       0       1  \nUser_3    1       0       0       1       0\nThe 1s represent observed interactions (positive samples), but what do the 0s mean?\n\nTrue negatives: User genuinely dislikes the item\nMissing positives: User would like the item but hasn’t discovered it yet\nContextual negatives: User might like it in different circumstances\n\nThis ambiguity makes training challenging. Without negative samples, our model might simply learn to recommend the most popular items to everyone.\n\n\nWhy We Need Negative Samples\nTraining a recommendation model without negative samples is like teaching someone to recognize cats by only showing them cat pictures—they might think everything is a cat! Negative samples help our model learn:\n\nDiscrimination: What makes items relevant vs. irrelevant for specific users\nPersonalization: User-specific preferences rather than global popularity\nGeneralization: Patterns that transfer to unseen user-item pairs"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#negative-sampling-strategies",
    "href": "projects/real-time-seq-recsys/c3/index.html#negative-sampling-strategies",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Negative Sampling Strategies",
    "text": "Negative Sampling Strategies\n\nRandom Sampling\nLet’s start with the obvious approach: just pick random items the user hasn’t touched.\nThis is faily straightforward to code up. You grab all the items a user hasn’t interacted with, throw them in a hat, and pull out however many negatives you need. It’s fast, it’s unbiased, and it works.\nBut there’s a problem. Some of those “random” negatives might actually be items the user would love if they found them. There’s also another issue: the model might get biased toward popular items, since they show up in lots of positive pairs.\n\n\nPopularity-Based Sampling\nTo deal with the above popularity biase, instead of picking negatives randomly, we sample them based on how popular they are in the dataset. This makes popular items get chosen as negatives more often.\nWhy does this work better? A popular item has a higher chance of being liked by any user than a random item. So when we use popular items as negatives, we’re creating harder training examples. We’re forcing the model to learn why this specific user didn’t interact with this popular item, even though lots of other people did.\nThis has a nice side effect. It helps the model learn beyond simple popularity bias. Instead of just recommending whatever’s trending, it has to figure out what makes items relevant for specific users.\nThe downside? It’s more work to implement. You need to track popularity statistics. And there’s a catch: popular items aren’t always bad choices for a user. Sometimes they’re popular because they’re actually good. So when we force a negative for a user-item pair, it might confuse the model.\n\n\nHard Negative Mining\nThis is the fancy approach. You need a model that’s already somewhat trained, and you use it to find items it thinks a user would like—but shouldn’t. These become your negative samples.\nIt’s like having a sparring partner who knows your weaknesses. The model keeps getting challenged by examples that are specifically designed to trip it up. As the model gets better, the negatives get harder, creating a virtuous cycle of improvement.\nSounds great, right? But it’s not always worth the extra effort, especially at the start. You need to train iteratively, which takes more time and compute. And there’s always the risk that you’re just teaching the model to overfit to its own biases.\nFor this project, we’ll use popularity-based negative sampling. It strikes a good balance between effectiveness and simplicity."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#our-implementation-popularity-aware-sampling",
    "href": "projects/real-time-seq-recsys/c3/index.html#our-implementation-popularity-aware-sampling",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Our Implementation: Popularity-Aware Sampling",
    "text": "Our Implementation: Popularity-Aware Sampling\nFor this project, we implement popularity-based negative sampling as it strikes a good balance between effectiveness and simplicity. Let’s examine our implementation:\nfrom src.negative_sampling import generate_negative_samples\n\ndef generate_negative_samples(\n    df,\n    user_col=\"user_indice\",\n    item_col=\"item_indice\", \n    label_col=\"rating\",\n    neg_label=0,\n    seed=None,\n):\n    \"\"\"\n    Generate negative samples for a user-item interaction DataFrame.\n    \n    The key insight: sample negative items proportional to their \n    popularity to create more challenging training scenarios.\n    \"\"\"\n\nStep 1: Calculate Item Popularity\n# Calculate item popularity based on interaction frequency\nitem_popularity = df[item_col].value_counts()\nitems = item_popularity.index.values\nall_items_set = set(items)\n\n# Convert to sampling probabilities\npopularity = item_popularity.values.astype(np.float64)\ntotal_popularity = popularity.sum()\nsampling_probs = popularity / total_popularity\nThis creates a probability distribution where more popular items have higher chances of being selected as negatives.\n\n\nStep 2: Identify Negative Candidates\n# Create user-item interaction mapping\nuser_item_dict = df.groupby(user_col)[item_col].apply(set).to_dict()\n\n# For each user, find items they haven't interacted with\nfor user, pos_items in user_item_dict.items():\n    negative_candidates = all_items_set - pos_items\nWe ensure we only sample from items the user hasn’t already interacted with.\n\n\nStep 3: Popularity-Weighted Sampling\n# Sample negatives proportional to popularity\ncandidate_indices = [item_to_index[item] for item in negative_candidates_list]\ncandidate_probs = sampling_probs[candidate_indices]\ncandidate_probs /= candidate_probs.sum()  # Normalize\n\nsampled_items = np.random.choice(\n    negative_candidates_list, \n    size=num_neg, \n    replace=False, \n    p=candidate_probs\n)\nThis ensures popular items are more likely to be selected as negatives, creating harder training examples."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#balancing-positive-and-negative-samples",
    "href": "projects/real-time-seq-recsys/c3/index.html#balancing-positive-and-negative-samples",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Balancing Positive and Negative Samples",
    "text": "Balancing Positive and Negative Samples\n\nThe 1:1 Ratio Strategy\nOur implementation generates equal numbers of positive and negative samples for each user:\nnum_pos = len(pos_items)  # Number of positive interactions\nnum_neg = min(num_pos, num_neg_candidates)  # Match positive count\nWhy 1:1 ratio?\n\nBalanced learning: Prevents model from being biased toward either class\nComputational efficiency: Reasonable dataset size for training\nEmpirical success: Works well in practice for many recommendation tasks\n\n\n\nAlternative Ratios\nDifferent ratios work better for different scenarios:\n\n1:4 (pos:neg): When you want to emphasize learning what users don’t want\n1:10: For very sparse datasets where negatives are abundant\nDynamic ratios: Adjust based on user activity levels"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#adding-temporal-context-to-negatives",
    "href": "projects/real-time-seq-recsys/c3/index.html#adding-temporal-context-to-negatives",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Adding Temporal Context to Negatives",
    "text": "Adding Temporal Context to Negatives\nA crucial aspect of our implementation is maintaining temporal consistency:\ndef add_features_to_neg_df(pos_df, neg_df, user_col, timestamp_col, feature_cols=[]):\n    \"\"\"\n    Add features from positive samples to negative samples DataFrame.\n    \n    Key insight: Negative samples should have realistic timestamps\n    that align with when the user was actually active.\n    \"\"\"\n    \n    # Create pseudo timestamps for negatives\n    neg_df = neg_df.assign(\n        timestamp_pseudo=lambda df: df.groupby(user_col).cumcount() + 1\n    )\n    \n    # Merge with corresponding positive interaction timestamps\n    neg_df = pd.merge(\n        neg_df,\n        pos_df.assign(\n            timestamp_pseudo=lambda df: df.groupby([user_col])[timestamp_col].rank(\n                method=\"first\"\n            )\n        )[[user_col, timestamp_col, \"timestamp_pseudo\", *feature_cols]],\n        how=\"left\",\n        on=[user_col, \"timestamp_pseudo\"],\n    ).drop(columns=[\"timestamp_pseudo\"])\n    \n    return neg_df\nThis ensures our negative samples have realistic timestamps, which is crucial for sequence modeling where temporal order matters."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#testing-our-implementation",
    "href": "projects/real-time-seq-recsys/c3/index.html#testing-our-implementation",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Testing Our Implementation",
    "text": "Testing Our Implementation\nLet’s see our negative sampling in action with a simple example:\n# Sample input: User-item interactions\ninteractions = [\n    (1, 101, 1, 1),  # user_id, item_id, rating, timestamp\n    (1, 102, 2, 2),\n    (1, 103, 3, 4),\n    (2, 101, 4, 1),\n    (2, 104, 5, 2),\n    (3, 105, 1, 1),\n    (3, 106, 2, 5),\n]\n\ndf = pd.DataFrame(\n    interactions,\n    columns=[\"user_indice\", \"item_indice\", \"rating\", \"timestamp\"]\n)\n\n# Generate negative samples\nneg_df = generate_negative_samples(df)\nneg_df = add_features_to_neg_df(df, neg_df, \"user_indice\", \"timestamp\")\nOutput:\n   user_indice  item_indice  rating  timestamp\n0            1          105       0          1\n1            1          104       0          2  \n2            1          106       0          4\n3            2          106       0          1\n4            2          105       0          2\n5            3          101       0          1\n6            3          102       0          5\nNotice how: - Each user gets negative samples for items they haven’t interacted with - The number of negatives matches the number of positives per user - Timestamps align with the user’s actual activity periods - Popular items (like 101, 102) appear more frequently as negatives"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#configuration-and-reproducibility",
    "href": "projects/real-time-seq-recsys/c3/index.html#configuration-and-reproducibility",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Configuration and Reproducibility",
    "text": "Configuration and Reproducibility\nOur implementation supports configurable parameters for experimentation:\n# From cfg/common.yaml\nsample:\n  sample_users: 10000\n  min_val_records: 5000\n  min_user_interactions: 5\n  min_item_interactions: 10\n\n# Negative sampling parameters (in code)\nneg_label: 0              # Label for negative samples\nseed: 41                  # For reproducible sampling\nsampling_strategy: \"popularity\"  # Could be \"random\", \"popularity\", etc."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#impact-on-model-training",
    "href": "projects/real-time-seq-recsys/c3/index.html#impact-on-model-training",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Impact on Model Training",
    "text": "Impact on Model Training\n\nBefore Negative Sampling\nTraining data: Only positive interactions\nModel learns: \"Recommend popular items to everyone\"\nResult: Poor personalization, popularity bias\n\n\nAfter Negative Sampling\nTraining data: Balanced positive/negative pairs\nModel learns: \"What makes items relevant for specific users\"\nResult: Better personalization, reduced popularity bias\nThe negative samples force our model to learn discriminative features that distinguish between items a user would and wouldn’t be interested in."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#running-the-complete-pipeline",
    "href": "projects/real-time-seq-recsys/c3/index.html#running-the-complete-pipeline",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Running the Complete Pipeline",
    "text": "Running the Complete Pipeline\nTo generate negative samples for your dataset:\n# 1. Ensure you've completed data preparation (Chapter 2)\n# 2. Run the negative sampling notebook\njupyter notebook notebooks/002-negative-sample.ipynb\n\n# Or use the module directly\npython -c \"\nfrom src.negative_sampling import generate_negative_samples\nfrom src.cfg import ConfigLoader\nimport pandas as pd\n\ncfg = ConfigLoader('cfg/common.yaml')\ntrain_df = pd.read_parquet(cfg.data.train_features_fp)\nneg_df = generate_negative_samples(train_df)\nprint(f'Generated {len(neg_df)} negative samples')\n\""
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#whats-next",
    "href": "projects/real-time-seq-recsys/c3/index.html#whats-next",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "What’s Next?",
    "text": "What’s Next?\nWith our balanced dataset of positive and negative samples, we’re ready to tackle model evaluation. In Chapter 4, we’ll set up our evaluation framework and experiment tracking with MLflow while implementing a baseline model along the way as an illustration. This will give us the foundation for systematic model development and comparison.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Building Real-time RecSys Chapter 3 - Negative Sampling. dvquys.com. https://dvquys.com/projects/real-time-seq-recsys/c3/."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#key-takeaways",
    "href": "projects/real-time-seq-recsys/c3/index.html#key-takeaways",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Key Takeaways",
    "text": "Key Takeaways\n\nImplicit feedback creates ambiguity - we need negative samples to train effective models\nPopularity-based sampling creates harder, more realistic training scenarios\nTemporal consistency in negative samples is crucial for sequence modeling\nBalanced datasets (1:1 positive:negative ratio) work well in practice\nReproducible sampling enables consistent experimentation and debugging\n\nThe negative sampling strategy you choose can significantly impact your model’s performance. Our popularity-aware approach helps create models that learn meaningful user preferences rather than just memorizing popularity patterns.\n\nNext: Chapter 4 - Evaluation Setup and MLflow Experiment Tracking"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#lets-implement",
    "href": "projects/real-time-seq-recsys/c3/index.html#lets-implement",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Let’s implement",
    "text": "Let’s implement\nThe full implementation is here.\nFunction signature:\n\n\nsrc/negative_sampling.py\n\n\ndef generate_negative_samples(\n    df,\n    user_col=\"user_indice\",\n    item_col=\"item_indice\", \n    label_col=\"rating\",\n    neg_label=0,\n    seed=None,\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Generate negative samples for a user-item interaction DataFrame.\n    \n    The key insight: sample negative items proportional to their \n    popularity to create more challenging training scenarios.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing user-item interactions.\n        user_col (str): Column name representing users.\n        item_col (str): Column name representing items.\n        label_col (str): Column name for the interaction label (e.g., rating).\n        neg_label (int): Label to assign to negative samples (default is 0).\n        seed (int, optional): Seed for random number generator to ensure reproducibility.\n\n    Returns:\n        pd.DataFrame: DataFrame containing generated negative samples.\n    \"\"\"\n\n\nStep 1: Calculate Item Popularity\n# Calculate item popularity based on interaction frequency\nitem_popularity = df[item_col].value_counts()\n\n# Convert to sampling probabilities to be used in the next step\npopularity = item_popularity.values.astype(np.float64)\ntotal_popularity = popularity.sum()\nsampling_probs = popularity / total_popularity\nThis creates a probability distribution where more popular items have higher chances of being selected as negatives.\n\n\nStep 2: Identify Negative Candidates\n# Create user-item interaction mapping\nuser_item_dict = df.groupby(user_col)[item_col].apply(set).to_dict()\n\n# For each user, find items they haven't interacted with\nfor user, pos_items in user_item_dict.items():\n    negative_candidates = all_items_set - pos_items\nWe make sure we only sample from items the user hasn’t already interacted with.\n\n\nStep 3: Popularity-Weighted Sampling\n# Create a mapping from item to index to quickly access item-related data.\nitems = item_popularity.index.values\nitem_to_index = {item: idx for idx, item in enumerate(items)}\n\n# Sample negatives proportional to popularity\ncandidate_indices = [item_to_index[item] for item in negative_candidates_list]\ncandidate_probs = sampling_probs[candidate_indices]\ncandidate_probs /= candidate_probs.sum()  # Normalize\n\nsampled_items = np.random.choice(\n    negative_candidates_list, \n    size=num_neg, \n    replace=False, \n    p=candidate_probs\n)\nThis makes sure popular items are more likely to be selected as negatives, creating harder training examples.\nIn our implementation, we choose to have the same number of negative samples as positive samples. This helps us avoid dealing with imbalanced training data. But feel free to experiment with different ratios (you’ll need to update the implementation).\nnum_pos = len(pos_items)  # Number of positive interactions\nnum_neg = min(num_pos, num_neg_candidates)  # Match positive count\nLike other crucial parts of our pipeline, let’s test this with some mock data to make sure it works."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#adding-features-to-the-generated-negative-samples",
    "href": "projects/real-time-seq-recsys/c3/index.html#adding-features-to-the-generated-negative-samples",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Adding Features to the generated negative samples",
    "text": "Adding Features to the generated negative samples\nAs you can see from the above output, we only have the item indice and the label. We also need to populate the new negative observations with the same features as the positive ones, i.e. the sequence of previously interacted items.\nSince these negative samples come from the same user, we can use the same features as the positive ones. We just need to use the timestamp of the corresponding positive interaction.\ndef add_features_to_neg_df(pos_df, neg_df, user_col, timestamp_col, feature_cols=[]):\n    \"\"\"\n    Add features from positive samples to negative samples DataFrame.\n    \n    Key insight: Negative samples should have realistic timestamps\n    that align with when the user was actually active.\n    \"\"\"\n    \n    # Create pseudo timestamps for negatives\n    # This timestamp pseudo column is used as join key to the positive samples, ensuring that each negative\n    # maps to one positive sample and get the positive's features.\n    neg_df = neg_df.assign(\n        timestamp_pseudo=lambda df: df.groupby(user_col).cumcount() + 1\n    )\n    \n    # Merge with corresponding positive interaction timestamps\n    neg_df = pd.merge(\n        neg_df,\n        pos_df.assign(\n            timestamp_pseudo=lambda df: df.groupby([user_col])[timestamp_col].rank(\n                method=\"first\"\n            )\n        )[[user_col, timestamp_col, \"timestamp_pseudo\", *feature_cols]],\n        how=\"left\",\n        on=[user_col, \"timestamp_pseudo\"],\n    ).drop(columns=[\"timestamp_pseudo\"])\n    \n    return neg_df"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#concat-and-re-split-train-test",
    "href": "projects/real-time-seq-recsys/c3/index.html#concat-and-re-split-train-test",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Concat and re-split train-test",
    "text": "Concat and re-split train-test\nAfter adding features to the negative samples, we can combine them with the positive samples. Then we re-split the dataset based on the timestamp milestone we used in our original train-test split."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c3/index.html#recap",
    "href": "projects/real-time-seq-recsys/c3/index.html#recap",
    "title": "Building Real-time RecSys Chapter 3 - Negative Sampling",
    "section": "Recap",
    "text": "Recap\nIn this chapter, we tackled the tricky problem of implicit feedback in recommendation systems. Here’s what we covered:\n\nWhy we need negative samples: Without them, our model would be like someone trying to recognize cats by only seeing cat pictures. We need examples of what users don’t want to create balanced learning.\nThree approaches to negative sampling: We looked at random sampling (simple but not very challenging), popularity-based sampling (our chosen approach that creates harder training scenarios), and hard negative mining (powerful but complex).\nOur popularity-based implementation: We built a system that samples negative items based on their popularity. This forces our model to learn why a user didn’t interact with popular items that others liked.\nKeeping things balanced: We generate equal numbers of positive and negative samples for each user (1:1 ratio) to avoid bias in either direction.\nAdding realistic features: We make sure our negative samples have proper timestamps and features that align with when users were actually active. This maintains temporal consistency for sequence modeling.\n\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is in notebooks/002-negative-sample.ipynb and src/negative_sampling.py in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html",
    "href": "projects/real-time-seq-recsys/c4/index.html",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "",
    "text": "In Chapter 3, inspired by how Word2Vec cleverly samples out-of-context words to train its language model, we implemented our own popularity-based sampling strategy to generate negative samples for our training dataset. Now we’re ready to tackle one of the most critical aspects of any ML project: evaluation.\nWe will discuss building a comprehensive evaluation framework, setting up MLflow for experiment tracking, and implementing a popularity-based baseline model to illustrate the end-to-end process. A solid measuring foundation provides the groundwork for systematic model development—you’ll use these tools throughout your different attempts at improving the model performance.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/010-baseline-popular.ipynb file and the src/eval/ directory in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#introduction",
    "href": "projects/real-time-seq-recsys/c4/index.html#introduction",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "",
    "text": "In Chapter 3, inspired by how Word2Vec cleverly samples out-of-context words to train its language model, we implemented our own popularity-based sampling strategy to generate negative samples for our training dataset. Now we’re ready to tackle one of the most critical aspects of any ML project: evaluation.\nWe will discuss building a comprehensive evaluation framework, setting up MLflow for experiment tracking, and implementing a popularity-based baseline model to illustrate the end-to-end process. A solid measuring foundation provides the groundwork for systematic model development—you’ll use these tools throughout your different attempts at improving the model performance.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/010-baseline-popular.ipynb file and the src/eval/ directory in the project repository."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#why-evaluation-matters-in-recommendation-systems",
    "href": "projects/real-time-seq-recsys/c4/index.html#why-evaluation-matters-in-recommendation-systems",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Why Evaluation Matters in Recommendation Systems",
    "text": "Why Evaluation Matters in Recommendation Systems\nRecommendation systems are notoriously tricky to evaluate. Unlike classification problems where accuracy is straightforward, recommendations involve ranking, relevance, and user satisfaction—all of which are nuanced concepts.\nRecommendation systems present unique evaluation challenges that go far beyond traditional machine learning problems. The most fundamental issue is the counterfactual problem: we only observe user interactions with items they actually encountered, but we have no ground truth for the vast majority of items they never saw. If a user interacted with 10 items in their history, we can reasonably infer labels for those 10, but what about the remaining thousands or millions of items in our catalog? Did the user avoid them because they’re irrelevant, or simply because they never discovered them? This missing data problem makes offline evaluation inherently problematic—we’re essentially trying to measure recommendation quality using an incomplete and biased sample of user preferences.\nBeyond this counterfactual challenge, recommendation systems must also grapple with implicit feedback where users rarely provide explicit ratings, ranking quality where the order of recommendations matters as much as the items themselves, personalization where a perfect recommendation for one user might be terrible for another, and temporal dynamics where user preferences evolve over time. These complexities mean that unlike classification problems where accuracy is straightforward, recommendations involve nuanced concepts of relevance, satisfaction, and utility that resist simple measurement.\nTo address these challenges, we need a comprehensive evaluation framework that can measure multiple aspects of recommendation quality."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#online-vs-offline-evaluation",
    "href": "projects/real-time-seq-recsys/c4/index.html#online-vs-offline-evaluation",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Online vs Offline Evaluation",
    "text": "Online vs Offline Evaluation\nBefore diving into implementation, let’s understand the two main evaluation paradigms:\n\nOnline Evaluation\n\nWhat it is: Testing recommendations with real users in production\nMetrics: Click-through rates, conversion rates, user engagement\nPros: Measures real business impact and user satisfaction\nCons: Expensive, slow, requires significant traffic\n\n\n\nOffline Evaluation\n\nWhat it is: Testing recommendations on historical data\nMetrics: Precision@K, Recall@K, NDCG, coverage\nPros: Fast, cheap, reproducible, enables rapid iteration\nCons: May not capture real user behavior perfectly\n\nFor this tutorial series, we’ll focus on offline evaluation to enable rapid experimentation. In production, you’d typically use offline evaluation for model development and online evaluation for final validation."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#evaluation-metrics-for-recommendation-systems",
    "href": "projects/real-time-seq-recsys/c4/index.html#evaluation-metrics-for-recommendation-systems",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Evaluation Metrics for Recommendation Systems",
    "text": "Evaluation Metrics for Recommendation Systems\nThere are plenty of great posts diving into the details of these metrics so I would just briefly mention them here. Our evaluation framework implements several key metrics:\n\nRanking Metrics\n\nPrecision@K: What fraction of top-K recommendations are relevant?\nRecall@K: What fraction of relevant items appear in top-K recommendations?\nNDCG@K: Normalized Discounted Cumulative Gain—rewards relevant items appearing higher in the ranking\n\n\n\nDiversity Metrics\n\nPersonalization: Measures how different recommendations are across users (higher is better)\n\n\n\nClassification Metrics\n\nROC-AUC: Area under the ROC curve for binary relevance prediction\nPrecision-Recall curves: Trade-offs between precision and recall at different thresholds\n\nIf you wish to learn more, I suggest checking out this post by Amit Chaudhary and the Evidently documentation on Ranking metrics."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#the-evaluation-framework-architecture",
    "href": "projects/real-time-seq-recsys/c4/index.html#the-evaluation-framework-architecture",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "The Evaluation Framework Architecture",
    "text": "The Evaluation Framework Architecture\nOur evaluation framework is built around three core modules in src/eval/:\nfrom src.eval import (\n    create_label_df,           # Create ground truth labels\n    merge_recs_with_target,    # Merge recommendations with labels  \n    log_ranking_metrics,       # Log ranking-based metrics\n    log_classification_metrics # Log classification-based metrics\n)\n\nCore Evaluation Utilities\nThe src/eval/utils.py module provides essential functions for evaluation setup:\ndef create_label_df(df, user_col, item_col, rating_col, timestamp_col):\n    \"\"\"\n    Create ground truth labels from validation data.\n    Ranks items by rating and timestamp for each user.\n    \"\"\"\n    label_cols = [user_col, item_col, rating_col, \"rating_rank\"]\n    label_df = (\n        df.sort_values([timestamp_col], ascending=[False])\n        .assign(\n            rating_rank=lambda df: df.groupby(user_col)[rating_col].rank(\n                method=\"first\", ascending=False\n            )\n        )\n        .sort_values([\"rating_rank\"], ascending=[True])[label_cols]\n    )\n    return label_df\nThis function creates a ranking of items for each user based on their ratings and interaction timestamps, providing the ground truth for evaluation.\ndef merge_recs_with_target(recs_df, label_df, k=10, user_col, item_col, rating_col):\n    \"\"\"\n    Merge recommendation rankings with ground truth labels.\n    Essential for computing ranking metrics.\n    \"\"\"\n    return (\n        recs_df.pipe(\n            lambda df: pd.merge(\n                df, label_df[[user_col, item_col, rating_col, \"rating_rank\"]],\n                on=[user_col, item_col], how=\"outer\"\n            )\n        )\n        .assign(\n            rating=lambda df: df[rating_col].fillna(0).astype(int),\n            rec_ranking=lambda df: df[\"rec_ranking\"].fillna(k + 1).astype(int),\n        )\n        .sort_values([user_col, \"rec_ranking\"])\n    )\nThis function aligns your model’s recommendations with the ground truth, handling cases where recommended items don’t appear in the validation set.\n\n\nMetric Logging with Evidently\nThe src/eval/log_metrics.py module uses the Evidently library to compute and log comprehensive metrics:\ndef log_ranking_metrics(cfg: Config, eval_df):\n    \"\"\"\n    Compute and log ranking metrics using Evidently.\n    Automatically integrates with MLflow for experiment tracking.\n    \"\"\"\n    column_mapping = ColumnMapping(\n        recommendations_type=\"rank\",\n        target=cfg.data.rating_col,\n        prediction=\"rec_ranking\", \n        item_id=cfg.data.item_col,\n        user_id=cfg.data.user_col,\n    )\n\n    report = Report(\n        metrics=[\n            NDCGKMetric(k=cfg.eval.top_k_rerank),\n            RecallTopKMetric(k=cfg.eval.top_k_retrieve),\n            PrecisionTopKMetric(k=cfg.eval.top_k_rerank),\n            FBetaTopKMetric(k=cfg.eval.top_k_rerank),\n            PersonalizationMetric(k=cfg.eval.top_k_rerank),\n        ]\n    )\n    \n    report.run(reference_data=None, current_data=eval_df, column_mapping=column_mapping)\n    \n    # Automatically log to MLflow if configured\n    if cfg.run.log_to_mlflow:\n        mlflow.log_artifact(evidently_report_fp)\n        # Log individual metrics for easy comparison\n        for metric_result in report.as_dict()[\"metrics\"]:\n            # ... metric logging logic\n    \n    return report\nThe beauty of this approach is that Evidently handles the complex metric calculations while our framework automatically logs everything to MLflow for tracking and comparison."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#mlflow-integration-configuration-driven-experiment-tracking",
    "href": "projects/real-time-seq-recsys/c4/index.html#mlflow-integration-configuration-driven-experiment-tracking",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "MLflow Integration: Configuration-Driven Experiment Tracking",
    "text": "MLflow Integration: Configuration-Driven Experiment Tracking\nOne of the standout features of our framework is the seamless MLflow integration through the configuration system. Instead of manually managing MLflow runs, everything is handled through the ConfigLoader:\n\nConfiguration-Based Setup\nfrom src.cfg import ConfigLoader\n\n# Load configuration and initialize MLflow\ncfg = ConfigLoader(\"../cfg/common.yaml\")\ncfg.run.run_name = \"001-baseline-popular\"\ncfg.run.experiment_name = \"Retrieve - Binary\"\ncfg.init()  # This automatically sets up MLflow!\nThe cfg.init() method handles all the MLflow setup:\ndef init(self):\n    \"\"\"Initialize MLflow experiment tracking automatically.\"\"\"\n    if self.run.log_to_mlflow:\n        logger.info(f\"Setting up MLflow experiment {self.run.experiment_name}...\")\n        mlflow.set_experiment(self.run.experiment_name)\n        mlflow.start_run(run_name=self.run.run_name)\n        \n        self._mlf_logger = MLFlowLogger(\n            experiment_name=self.run.experiment_name,\n            run_id=mlflow.active_run().info.run_id,\n            tracking_uri=mlflow_uri,\n            log_model=True,\n        )\n    return self\n\n\nAutomatic Parameter Logging\nThe configuration system automatically logs all parameters to MLflow:\ndef log_config_to_mlflow(self):\n    \"\"\"Log all configuration parameters to MLflow with dot notation.\"\"\"\n    flat_config = flatten_dict(self.config.model_dump())\n    for key, value in flat_config.items():\n        mlflow.log_param(key, value)  # e.g., \"train.learning_rate\": 0.01\nThis means every experiment automatically captures the complete configuration, making results fully reproducible."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#implementing-the-popularity-baseline",
    "href": "projects/real-time-seq-recsys/c4/index.html#implementing-the-popularity-baseline",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Implementing the Popularity Baseline",
    "text": "Implementing the Popularity Baseline\nNow let’s implement our first recommendation model: a popularity-based recommender. While simple, this baseline serves several important purposes:\n\nSanity check: Ensures our evaluation pipeline works correctly\nPerformance benchmark: Provides a baseline for more complex models to beat\nProduction fallback: Often used as a fallback when personalized models fail\n\n\nPopularity Score Calculation\nThe implementation is straightforward—we rank items by their interaction frequency in the training data:\n# Calculate popularity scores from training data\npopular_items_df = (\n    train_df.groupby(cfg.data.item_col, as_index=False)\n    .size()\n    .assign(\n        score=lambda df: df[\"size\"] / df[\"size\"].max(),  # Normalize to [0,1]\n        rec_ranking=lambda df: df[\"score\"]\n        .rank(method=\"first\", ascending=False)\n        .astype(int),\n    )\n    .sort_values([\"rec_ranking\"], ascending=[True])\n)\n\n# Get top-K popular items for evaluation\ntop_popular_items_df = popular_items_df.head(cfg.eval.top_k_retrieve)\nThis creates a ranking where the most frequently interacted items get the highest scores.\n\n\nGenerating Recommendations for All Users\nFor evaluation, we need to generate recommendations for every user in the validation set:\n# Create recommendations: same popular items for every user\nunique_users = val_df[cfg.data.user_col].unique()\nrecommendations_df = pd.concat([\n    top_popular_items_df.assign(**{cfg.data.user_col: user})\n    for user in unique_users\n], ignore_index=True)\nThis gives every user the same set of popular items, which is exactly what a popularity-based recommender should do."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#complete-evaluation-workflow",
    "href": "projects/real-time-seq-recsys/c4/index.html#complete-evaluation-workflow",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Complete Evaluation Workflow",
    "text": "Complete Evaluation Workflow\nHere’s how everything comes together in the 010-baseline-popular.ipynb notebook:\n\n1. Setup and Configuration\nfrom src.cfg import ConfigLoader\nfrom src.eval import (\n    create_label_df, log_classification_metrics, \n    log_ranking_metrics, merge_recs_with_target,\n)\n\n# Initialize configuration with MLflow\ncfg = ConfigLoader(\"../cfg/common.yaml\")\ncfg.run.run_name = \"001-baseline-popular\"\ncfg.run.experiment_name = \"Retrieve - Binary\"\ncfg.init()  # Automatic MLflow setup\n\n\n2. Data Preparation\n# Load preprocessed data with negative samples\ntrain_df = pd.read_parquet(cfg.data.train_features_neg_fp)\nval_df = pd.read_parquet(cfg.data.val_features_neg_fp)\n\n# Create ground truth labels for evaluation\nlabel_df = create_label_df(\n    val_df,\n    user_col=cfg.data.user_col,\n    item_col=cfg.data.item_col,\n    rating_col=cfg.data.rating_col,\n    timestamp_col=cfg.data.timestamp_col,\n)\n\n\n3. Model Implementation and Evaluation\n# Calculate popularity scores and generate recommendations\npopular_items_df = (\n    train_df.groupby(cfg.data.item_col, as_index=False)\n    .size()\n    .assign(\n        score=lambda df: df[\"size\"] / df[\"size\"].max(),\n        rec_ranking=lambda df: df[\"score\"].rank(method=\"first\", ascending=False).astype(int),\n    )\n    .sort_values([\"rec_ranking\"], ascending=[True])\n)\n\n# Generate recommendations for all users\nunique_users = val_df[cfg.data.user_col].unique()\nrecommendations_df = pd.concat([\n    popular_items_df.head(cfg.eval.top_k_retrieve).assign(**{cfg.data.user_col: user})\n    for user in unique_users\n], ignore_index=True)\n\n# Merge recommendations with ground truth\neval_df = merge_recs_with_target(\n    recommendations_df, label_df,\n    k=cfg.eval.top_k_retrieve,\n    user_col=cfg.data.user_col,\n    item_col=cfg.data.item_col,\n    rating_col=cfg.data.rating_col,\n)\n\n# Log ranking metrics\nranking_report = log_ranking_metrics(cfg, eval_df)\n\n\n4. Classification Metrics\nWe also evaluate the model’s ability to predict binary relevance:\n# Prepare data for classification evaluation\neval_classification_df = pd.merge(\n    val_df,\n    popular_items_df[[cfg.data.item_col, \"score\"]],\n    on=[cfg.data.item_col],\n    how=\"left\",\n    validate=\"m:1\",\n).assign(label=lambda df: df[cfg.data.rating_col].gt(0).astype(int))\n\n# Log classification metrics\nclassification_report = log_classification_metrics(\n    cfg, eval_classification_df, \n    target_col=\"label\", \n    prediction_col=\"score\"\n)\n\n\n5. Experiment Cleanup\n# Log all configuration parameters and end the MLflow run\nif cfg.run.log_to_mlflow:\n    cfg.log_config_to_mlflow()\n    mlflow.end_run()"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#understanding-the-results",
    "href": "projects/real-time-seq-recsys/c4/index.html#understanding-the-results",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Understanding the Results",
    "text": "Understanding the Results\nAfter running the baseline, you’ll see several types of outputs:\n\nMLflow Experiment Tracking\n\nParameters: All configuration values automatically logged\nMetrics: Ranking and classification metrics with step-wise tracking\nArtifacts: Evidently HTML reports for detailed analysis\n\n\n\nEvidently Reports\nThe framework generates comprehensive HTML reports showing: - Precision@K and Recall@K curves - NDCG scores across different K values - Personalization metrics - ROC curves and precision-recall curves\n\n\nBaseline Performance Expectations\nFor a popularity-based recommender, expect: - Low personalization scores: Everyone gets the same recommendations - Moderate precision@K: Popular items have broad appeal - Variable recall: Depends on how well popular items match user preferences - Decent ROC-AUC: Popular items are often relevant"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#why-this-foundation-matters",
    "href": "projects/real-time-seq-recsys/c4/index.html#why-this-foundation-matters",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Why This Foundation Matters",
    "text": "Why This Foundation Matters\nThis evaluation framework and baseline implementation provide several critical benefits:\n\n1. Reproducible Experiments\nEvery experiment is fully tracked with: - Complete configuration parameters - Evaluation metrics across multiple dimensions - Generated artifacts for detailed analysis\n\n\n2. Systematic Model Development\nThe framework enables you to: - Compare models objectively using consistent metrics - Track improvements over time - Identify which changes actually help\n\n\n3. Production Readiness\nThe evaluation patterns you establish here will: - Scale to more complex models - Integrate with production monitoring - Support A/B testing frameworks\n\n\n4. Debugging and Validation\nA working baseline helps you: - Validate that your evaluation pipeline works correctly - Identify data quality issues early - Establish reasonable performance expectations"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#configuration-management-best-practices",
    "href": "projects/real-time-seq-recsys/c4/index.html#configuration-management-best-practices",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Configuration Management Best Practices",
    "text": "Configuration Management Best Practices\nThe configuration-driven approach offers several advantages:\n\nCentralized Configuration\n# cfg/common.yaml\neval:\n  top_k_retrieve: 100\n  top_k_rerank: 10\n  min_roc_auc: 0.5\n\nrun:\n  log_to_mlflow: true\n  experiment_name: \"Retrieve - Binary\"\n\n\nEasy Experimentation\n# Try different evaluation settings\ncfg.eval.top_k_retrieve = 50\ncfg.eval.top_k_rerank = 5\n\n# Or different experiment tracking\ncfg.run.experiment_name = \"Retrieve - Rating\"\ncfg.train.label_format = \"rating\"\n\n\nAutomatic Documentation\nEvery MLflow run captures the complete configuration, making it easy to reproduce results or understand what changed between experiments."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#whats-next",
    "href": "projects/real-time-seq-recsys/c4/index.html#whats-next",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "What’s Next",
    "text": "What’s Next\nWith your evaluation framework and baseline model in place, you have:\n\nA robust evaluation pipeline that can assess recommendation quality across multiple dimensions\nMLflow integration for systematic experiment tracking and comparison\nA working baseline model that establishes performance expectations\nThe foundation for building and evaluating more sophisticated models\n\nIn Chapter 5, we’ll build on this foundation to implement sequence-based recommendation models that can capture temporal patterns in user behavior. The evaluation framework you’ve built here will be essential for measuring whether these more complex models actually improve upon our simple baseline."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#recap",
    "href": "projects/real-time-seq-recsys/c4/index.html#recap",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Recap",
    "text": "Recap\nThis chapter established the critical evaluation infrastructure for your recommendation system:\n\nComprehensive metrics: Ranking, classification, and diversity metrics using Evidently\nSeamless MLflow integration: Configuration-driven experiment tracking\nBaseline implementation: Popularity-based recommender as a performance benchmark\nComplete workflow: From data preparation to metric logging and experiment cleanup\n\nThe evaluation framework you’ve built is production-ready and will scale with you as you develop more sophisticated models. Most importantly, you now have a systematic way to measure progress and make data-driven decisions about model improvements.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation. dvquys.com. https://dvquys.com/projects/real-time-seq-recsys/c4/."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#the-challenges-of-evaluation-in-recommendation-systems",
    "href": "projects/real-time-seq-recsys/c4/index.html#the-challenges-of-evaluation-in-recommendation-systems",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "The Challenges of Evaluation in Recommendation Systems",
    "text": "The Challenges of Evaluation in Recommendation Systems\nRecommendation systems are notoriously tricky to evaluate. Unlike classification problems where accuracy is straightforward, recommendations involve ranking, relevance, and user satisfaction—all of which are nuanced concepts.\nRecSys present unique evaluation challenges that go far beyond traditional machine learning problems. The most fundamental issue is the counterfactual problem: we only observe user interactions with items they actually encountered, but we have no ground truth for the vast majority of items they never saw. If a user interacted with 10 items in their history, we can reasonably infer labels for those 10, but what about the remaining thousands or millions of items in our catalog? Did the user avoid them because they’re irrelevant, or simply because they never discovered them? This missing data problem makes offline evaluation inherently problematic—we’re essentially trying to measure recommendation quality using an incomplete and biased sample of user preferences.\nBeyond this counterfactual challenge, recommendation systems must also struggle with implicit feedback where users rarely provide explicit ratings, ranking quality where the order of recommendations matters as much as the items themselves, personalization where a perfect recommendation for one user might be terrible for another, and temporal dynamics where user preferences evolve over time. These complexities mean that unlike classification problems where accuracy is straightforward, recommendations involve nuanced concepts of relevance, satisfaction, and utility that resist simple measurement.\nTo address these challenges, we need a comprehensive evaluation framework that can measure multiple aspects of recommendation quality. For the scope of this tutorial, we would be focusing on measuring both the ranking quality and the classification quality of the recommendations, while leaving the problem of counterfactual evaluation for a future post perhaps1."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#footnotes",
    "href": "projects/real-time-seq-recsys/c4/index.html#footnotes",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou may take a look at this writing Counterfactual Evaluation for Recommendation Systems to learn more.↩︎\nYou may take a look at this writing Counterfactual Evaluation for Recommendation Systems to learn more.↩︎"
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#online-vs-offline-evaluation-the-ultimate-goal-vs-the-development-tool",
    "href": "projects/real-time-seq-recsys/c4/index.html#online-vs-offline-evaluation-the-ultimate-goal-vs-the-development-tool",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Online vs Offline Evaluation: The Ultimate Goal vs The Development Tool",
    "text": "Online vs Offline Evaluation: The Ultimate Goal vs The Development Tool\nBefore diving into the technical details, let me remind you of the what ultimately matters to the business: delivering relevant recommendations measured via business metrics like click-through rates and conversion rates.\nThese metrics can only be evaluated at production environment with the help of online experiments. But they are typically expensive and slow. A/B testing and its alike require real users, real traffic, and real time to see if your changes work. So to iterate quickly on your backlog of a hundred different ideas, we often resort to offline evaluation as our development tool. The assumption is that improvements made over historical observational data can guide our decisions.\nThough more often than not, offline improvements don’t always translate to online wins. You might build a model that crushes your offline metrics, deploy it to production, and watch your click-through rates stay flat or even drop. The gap between offline and online performance is one of the most challenging aspects of recommendation systems.\nOf course there have already been research efforts to address this, and googling around would actually lead us to some interesting ideas2. IMHO though, the approaches are often too complicated so I normally refrain from fancy techniques in the early phases of the project. In principle we should nonetheless design our offline evaluation to match online results as closely as possible, while maintaining a mindset that offline evaluation is a guiding tool and a guardrail, not the definitive answer.\nI usually think like this: if your offline metrics show clear improvements, that’s a good sign to move forward. If they show no change but you have strong reasons to believe your improvements are effective, don’t let that stop you from running an online experiment. Sometimes the best ideas don’t show up in offline metrics until they meet real users. Just make sure you can roll back quickly if you see significant drops in the early days.\nFor this tutorial series, we’ll focus on offline evaluation because it lets us iterate fast and learn the fundamentals. But important message worths repeating—the real test happens when your recommendations meet actual users."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#how-we-set-up-evaluation-for-our-project",
    "href": "projects/real-time-seq-recsys/c4/index.html#how-we-set-up-evaluation-for-our-project",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "How We Set Up Evaluation for our Project",
    "text": "How We Set Up Evaluation for our Project\nOur evaluation framework is built around three core modules in src/eval/:\nfrom src.eval import (\n    create_label_df,           # Create ground truth labels\n    merge_recs_with_target,    # Merge recommendations with labels  \n    log_ranking_metrics,       # Log ranking-based metrics\n    log_classification_metrics # Log classification-based metrics\n)\n\nCore Evaluation Utilities\nThe src/eval/utils.py module provides essential functions for evaluation setup:\ndef create_label_df(df, user_col, item_col, rating_col, timestamp_col):\n    \"\"\"\n    Create ground truth labels from validation data.\n    Ranks items by rating and timestamp for each user.\n    \"\"\"\n    label_cols = [user_col, item_col, rating_col, \"rating_rank\"]\n    label_df = (\n        df.sort_values([timestamp_col], ascending=[False])\n        .assign(\n            rating_rank=lambda df: df.groupby(user_col)[rating_col].rank(\n                method=\"first\", ascending=False\n            )\n        )\n        .sort_values([\"rating_rank\"], ascending=[True])[label_cols]\n    )\n    return label_df\nThis function creates a ranking of items for each user based on their ratings and interaction timestamps, providing the ground truth for evaluation.\ndef merge_recs_with_target(recs_df, label_df, k=10, user_col, item_col, rating_col):\n    \"\"\"\n    Merge recommendation rankings with ground truth labels.\n    Essential for computing ranking metrics.\n    \"\"\"\n    return (\n        recs_df.pipe(\n            lambda df: pd.merge(\n                df, label_df[[user_col, item_col, rating_col, \"rating_rank\"]],\n                on=[user_col, item_col], how=\"outer\"\n            )\n        )\n        .assign(\n            rating=lambda df: df[rating_col].fillna(0).astype(int),\n            rec_ranking=lambda df: df[\"rec_ranking\"].fillna(k + 1).astype(int),\n        )\n        .sort_values([user_col, \"rec_ranking\"])\n    )\nThis function aligns your model’s recommendations with the ground truth, handling cases where recommended items don’t appear in the validation set.\n\n\nMetric Logging with Evidently\nThe src/eval/log_metrics.py module uses the Evidently library to compute and log comprehensive metrics:\ndef log_ranking_metrics(cfg: Config, eval_df):\n    \"\"\"\n    Compute and log ranking metrics using Evidently.\n    Automatically integrates with MLflow for experiment tracking.\n    \"\"\"\n    column_mapping = ColumnMapping(\n        recommendations_type=\"rank\",\n        target=cfg.data.rating_col,\n        prediction=\"rec_ranking\", \n        item_id=cfg.data.item_col,\n        user_id=cfg.data.user_col,\n    )\n\n    report = Report(\n        metrics=[\n            NDCGKMetric(k=cfg.eval.top_k_rerank),\n            RecallTopKMetric(k=cfg.eval.top_k_retrieve),\n            PrecisionTopKMetric(k=cfg.eval.top_k_rerank),\n            FBetaTopKMetric(k=cfg.eval.top_k_rerank),\n            PersonalizationMetric(k=cfg.eval.top_k_rerank),\n        ]\n    )\n    \n    report.run(reference_data=None, current_data=eval_df, column_mapping=column_mapping)\n    \n    # Automatically log to MLflow if configured\n    if cfg.run.log_to_mlflow:\n        mlflow.log_artifact(evidently_report_fp)\n        # Log individual metrics for easy comparison\n        for metric_result in report.as_dict()[\"metrics\"]:\n            # ... metric logging logic\n    \n    return report\nThe beauty of this approach is that Evidently handles the complex metric calculations while our framework automatically logs everything to MLflow for tracking and comparison."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#the-baseline-recommender-system",
    "href": "projects/real-time-seq-recsys/c4/index.html#the-baseline-recommender-system",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "The baseline recommender system",
    "text": "The baseline recommender system\nTo demonstrate how we evaluate a model, let’s first build a baseline one for easier illustration. This will serve as a sanity check for our evaluation framework and provide a performance benchmark for more complex models to beat.\nIn the world of RecSys, the most popular base line is “popular” recommender (no pun intended). It’s simple, fast, easy to implement, easy to understand for users, and sometimes quite effective, especialy compared to the effort required to put up.\nTo get the most popular items, we only need a few lines of Pandas code to group by item and count the number of interactions: \nThen, for each of the user in our validation set, we can simply assign the most popular items to them: \nThat’s it. We now have recommendations provided for our users. Now we can move to the actual evaluation part."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#mlflow-integration-experiment-tracking",
    "href": "projects/real-time-seq-recsys/c4/index.html#mlflow-integration-experiment-tracking",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "MLflow Integration: Experiment Tracking",
    "text": "MLflow Integration: Experiment Tracking\nOne of the standout features of our framework is the seamless MLflow integration through the configuration system. Instead of manually managing MLflow runs, everything is handled through the ConfigLoader:\n\nConfiguration-Based Setup\nfrom src.cfg import ConfigLoader\n\n# Load configuration and initialize MLflow\ncfg = ConfigLoader(\"../cfg/common.yaml\")\ncfg.run.run_name = \"001-baseline-popular\"\ncfg.run.experiment_name = \"Retrieve - Binary\"\ncfg.init()  # This automatically sets up MLflow!\nThe cfg.init() method handles all the MLflow setup:\ndef init(self):\n    \"\"\"Initialize MLflow experiment tracking automatically.\"\"\"\n    if self.run.log_to_mlflow:\n        logger.info(f\"Setting up MLflow experiment {self.run.experiment_name}...\")\n        mlflow.set_experiment(self.run.experiment_name)\n        mlflow.start_run(run_name=self.run.run_name)\n        \n        self._mlf_logger = MLFlowLogger(\n            experiment_name=self.run.experiment_name,\n            run_id=mlflow.active_run().info.run_id,\n            tracking_uri=mlflow_uri,\n            log_model=True,\n        )\n    return self\n\n\nAutomatic Parameter Logging\nThe configuration system automatically logs all parameters to MLflow:\ndef log_config_to_mlflow(self):\n    \"\"\"Log all configuration parameters to MLflow with dot notation.\"\"\"\n    flat_config = flatten_dict(self.config.model_dump())\n    for key, value in flat_config.items():\n        mlflow.log_param(key, value)  # e.g., \"train.learning_rate\": 0.01\nThis means every experiment automatically captures the complete configuration, making results fully reproducible."
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#experiment-tracking-with-mlflow",
    "href": "projects/real-time-seq-recsys/c4/index.html#experiment-tracking-with-mlflow",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Experiment Tracking with MLflow",
    "text": "Experiment Tracking with MLflow\nMachine learning development is fundamentally an iterative process—the more ideas we systematically test, the better our chances of discovering meaningful improvements. This iterative nature means we’re constantly cycling through hypotheses: trying new features, adjusting hyperparameters, experimenting with different architectures, and refining our approach based on results. To maximize this exploration while maintaining scientific rigor, we need more than just robust evaluation metrics; we need a convenient way to track every experiment, compare results across iterations, and easily revisit previous approaches. Comprehensive experiment logging creates a safety net that encourages bold experimentation—when you know you can reproduce any previous result or quickly understand what changed between runs, you’re more willing to try ambitious ideas that might not work. This psychological safety accelerates the entire development cycle.\nThere are often no restrictions on how you should track your experiments. Even manually keeping things in a spreadsheet works just fine. However, in our project and based on my own experience, I feel like MLflow is the most convenient way though, since this tool is mature and well-integrated with other ML frameworks. It also offers other fundamental capabilities like model registry which becomes very handy when we talk about model serving and deployment.\nAs MLflow should be enabled in our every model training run, I put most of the MLflow integration implementation in our configuration code:\nfrom src.cfg import ConfigLoader\n\n# Load configuration and initialize MLflow\ncfg = ConfigLoader(\"../cfg/common.yaml\")\ncfg.run.run_name = \"001-baseline-popular\"\ncfg.run.experiment_name = \"Retrieve - Binary\"\ncfg.init()  # This automatically sets up MLflow!\nThe cfg.init() method handles all the MLflow setup:\nfrom lightning.pytorch.loggers import MLFlowLogger\n\ndef init(self):\n    \"\"\"Initialize MLflow experiment tracking automatically.\"\"\"\n    if self.run.log_to_mlflow:\n        logger.info(f\"Setting up MLflow experiment {self.run.experiment_name}...\")\n        mlflow.set_experiment(self.run.experiment_name)\n        mlflow.start_run(run_name=self.run.run_name)\n        \n1        self._mlf_logger = MLFlowLogger(\n            experiment_name=self.run.experiment_name,\n            run_id=mlflow.active_run().info.run_id,\n            tracking_uri=mlflow_uri,\n            log_model=True,\n        )\n    return self\n\n1\n\nNote that MLFlowLogger here is a PyTorch Lightning logger, which we would use later when defining our PyTorch Lightning model for logging our model training progress.\n\n\nIn the end of our run, we can call this method cfg.log_config_to_mlflow() to log all parameters to MLflow:\ndef log_config_to_mlflow(self):\n    \"\"\"Log all configuration parameters to MLflow with dot notation.\"\"\"\n    flat_config = flatten_dict(self.config.model_dump())\n    for key, value in flat_config.items():\n        mlflow.log_param(key, value)  # e.g., \"train.learning_rate\": 0.01\nThe result is we can access our experiment parameters like this:\n\n\n\nHowever, when we starts to develop our notebook, we may not want to log to MLflow. We can easily control this by setting the log_to_mlflow flag to false in our configuration file:\n# cfg/common.yaml\nrun:\n  log_to_mlflow: true\n  experiment_name: \"Retrieve - Binary\""
  },
  {
    "objectID": "projects/real-time-seq-recsys/c4/index.html#recap-1",
    "href": "projects/real-time-seq-recsys/c4/index.html#recap-1",
    "title": "Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Recap",
    "text": "Recap\nThis chapter established the critical evaluation infrastructure for your recommendation system:\n\nComprehensive metrics: Ranking, classification, and diversity metrics using Evidently\nSeamless MLflow integration: Configuration-driven experiment tracking\nBaseline implementation: Popularity-based recommender as a performance benchmark\nComplete workflow: From data preparation to metric logging and experiment cleanup\n\nThe evaluation framework you’ve built is production-ready and will scale with you as you develop more sophisticated models. Most importantly, you now have a systematic way to measure progress and make data-driven decisions about model improvements.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Building Real-time RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation. dvquys.com. https://dvquys.com/projects/real-time-seq-recsys/c4/."
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html",
    "href": "projects/implement-recsys/c2/index.html",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "",
    "text": "This is the second chapter of the tutorial series: Implement a RecSys."
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html#introduction",
    "href": "projects/implement-recsys/c2/index.html#introduction",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "Introduction",
    "text": "Introduction\nIn Chapter 1, we set up our development environment and explored the project architecture. Now it’s time to dive into the heart of any recommendation system: data. The quality of our recommendations depends entirely on how well we understand, process, and engineer features from our data.\nThis chapter focuses on the data pipeline from raw data to model-ready features. We’ll explore the Amazon product dataset, understand user-item interaction sequences, and build the feature engineering pipeline that will power our session-based recommender.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/000-prep-data.ipynb and notebooks/001-features.ipynb files in the project repository."
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html#dataset-overview-amazon-reviews-2023",
    "href": "projects/implement-recsys/c2/index.html#dataset-overview-amazon-reviews-2023",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "Dataset Overview: Amazon Reviews 2023",
    "text": "Dataset Overview: Amazon Reviews 2023\nA good dataset for this kind of sequential recommendation project would typically have the following characteristics:\n\nTemporal richness: Each interaction has a timestamp, enabling sequence modeling\nScale: Millions of interactions across thousands of users and items\nReal-world patterns: Authentic user behavior with natural sparsity\n\nAmong the well-known public datasets, I chose the Amazon Reviews 2023 dataset from the McAuley Lab, specifically the “Books” category. Beyond the characteristics above, this dataset has other useful features—like reviews for both users and items—with plenty of observations to work with.\n\n\n\n\n\n\nThe main schema of the dataset is as simple as follows:\n# From cfg/common.yaml\ndata:\n1  user_col: \"user_id\"\n2  item_col: \"parent_asin\"\n3  rating_col: \"rating\"\n4  timestamp_col: \"timestamp\"\n\n1\n\nUnique user identifier\n\n2\n\nProduct identifier (in our case, the ASIN—Amazon Standard Identification Number)\n\n3\n\nUser rating (1-5 scale)\n\n4\n\nInteraction timestamp\n\n\n\n\n\n\n\n\nConfiguration Management\n\n\n\n\n\nfrom src.cfg import ConfigLoader\n\n# Load configuration\ncfg = ConfigLoader(\"cfg/common.yaml\")\nThroughout this project, we store most configuration in cfg/common.yaml. This design does not only make it easier for notebooks and scripts to access their inputs and outputs but also help us try different configurations quickly."
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html#data-sampling-and-filtering",
    "href": "projects/implement-recsys/c2/index.html#data-sampling-and-filtering",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "Data Sampling and Filtering",
    "text": "Data Sampling and Filtering\nAs ML is mostly about iterative development, the main rationale of sampling and filtering is to have a small but decent enough dataset to experiment different ideas fast. The more experiments we run, the more likely we would introduce improvements to our models.\nWhat does it mean for a decent RecSys dataset? One of the key criteria is sparsity—the ratio of observed interactions to all possible user-item pairs.\nTo understand why sparsity is problematic, consider the interaction matrix where each cell represents a potential user-item interaction:\n\nMatrix size: num_users × num_items (total possible interactions)\nActual interactions: Much smaller number of observed ratings/clicks\nSparsity: 1 - (actual_interactions / (num_users × num_items))\n\nThe sparsity problem gets quadratically worse as datasets grow:\n# Small dataset example\nusers = 1,000, items = 1,000 → possible interactions = 1M\nactual interactions = 50,000 → sparsity = 95%\n\n# Larger dataset \nusers = 10,000, items = 10,000 → possible interactions = 100M  \nactual interactions = 500,000 → sparsity = 99.5%\nEach new user adds an entire row of mostly empty interactions, and each new item adds an entire column of mostly empty interactions. Since users typically interact with only a tiny fraction of available items, the interaction matrix becomes increasingly sparse as the catalog grows.\nIn recommendation systems, interactions follow a long-tailed distribution—many users and items have only a few interactions. So while randomly sampling may work just fine for many ML use cases, we need to apply it a bit more carefully here. Ultimately we want to have a sample dataset where each user/item has at least X interactions.\nThe tricky part is that a basic random sampling of users and items would create sparsity cascade—a domino effect that breaks your dataset.\nHere’s what happens: You start with users and items that look fine on their own. User A has 10 interactions, Item X has 15 interactions. When you remove User B, you also lose all of User B’s interactions with Item X. Suddenly Item X only has 8 interactions. Oops, now it’s too sparse, so you remove it too. But removing Item X means User A loses some interactions and might become too sparse as well.\nIt’s like pulling threads from a sweater—everything starts unraveling.\nTo solve this, we take an iterative approach. We gradually drop random users from the dataset while watching our conditions and sampling targets. The trade-off is that while it’s hard to get an exact predefined number of users and items, we can control the minimum acceptable thresholds:\n# From cfg/common.yaml\nsample:\n  sample_users: 10000\n1  min_val_records: 5000\n  min_user_interactions: 5\n  min_item_interactions: 10\n\n1\n\nWe need to ensure sufficient validation data to evaluate our models.\n\n\nfrom src.sample import InteractionDataSampler\n\ndata_sampler = InteractionDataSampler(\n    user_col=cfg.data.user_col,\n    item_col=cfg.data.item_col,\n    sample_users=cfg.sample.sample_users,\n    min_val_records=cfg.sample.min_val_records,\n    random_seed=cfg.run.random_seed,\n    min_item_interactions=cfg.sample.min_item_interactions,\n    min_user_interactions=cfg.sample.min_user_interactions,\n    perc_users_removed_each_round=0.1,\n    debug=False,\n)\n...\n\nRandomly removing 2960 users - Round 18 started\nAfter randomly removing users - round 18: num_users=29,605\nNumber of users 29,605 are still greater than expected, keep removing...\n\nRandomly removing 2413 users - Round 19 started\nAfter randomly removing users - round 19: num_users=24,137\nNumber of users 24,137 are still greater than expected, keep removing...\nNumber of val_df records 4,282 are falling below expected threshold, stop and use `sample_df` as final output...\nlen(sample_users)=19,734 len(sample_items)=7,388\n\n\n\n\n\n\nInteractionDataSampler implementation\n\n\n\n\n\n\nIn the end, we won’t have exactly 10,000 users, but the numbers will be close. The distribution of interactions is shown below:"
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html#train-test-split",
    "href": "projects/implement-recsys/c2/index.html#train-test-split",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "Train-Test Split",
    "text": "Train-Test Split\nAfter sampling our data, we need to split it into a train and validation dataset to evaluate our models. The validation dataset plays a critical role in providing an estimate of how well the model performs on unseen data.\nThere are two main types of train-test-split in RecSys:\n\n\n\nFrom what I’ve seen, last-one-out is used more in academic settings, while absolute timestamp is more common in industry. This makes sense from the perspective that any model deployed in production gets tested against future data."
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html#feature-engineering",
    "href": "projects/implement-recsys/c2/index.html#feature-engineering",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "Feature Engineering",
    "text": "Feature Engineering\n\nID Mapping: From Strings to Indices\nAs discussed in Chapter 1, we’re modeling this problem with neural networks. Deep learning models work with numerical indices, not string IDs. So we use our IDMapper to provide deterministic mapping from user and item IDs to indices:\nfrom src.id_mapper import IDMapper\n\nuser_ids = train_df[cfg.data.user_col].values\nitem_ids = train_df[cfg.data.item_col].values\nunique_user_ids = list(set(user_ids))\nunique_item_ids = list(set(item_ids))\nidm = IDMapper()\nidm.fit(unique_user_ids, unique_item_ids)\n\n# Save for later use in model serving\nidm.save(\"data/idm.json\")\n\n# Below is the example output of the indice mapping for user IDs:\ndisplay(idm.user_to_index)\n{\n  \"AE224PFXAEAT66IXX43GRJSWHXCA\": 0,\n  \"AE225Y3KDZ44DHLUKLE4RJ63HC5Q\": 1,\n  \"AE226YVDC3MAGJZMZ4IBGE7RFJSQ\": 2,\n  \"AE22EJZ4354VB7MN4IE2CDGHA2DQ\": 3,\n  \"AE22O3TURLPFCJKL7YCX5CPF22OA\": 4\n}\n\n\nSequence Generation\nAt this point, you might wonder about the sequences I mentioned earlier. How does user-item rating data relate to sequences?\nTraditional collaborative filtering approaches like Matrix Factorization only use the user-item rating matrix. But one important signal gets left out: the timestamps.\nThe key insight is simple: when a user interacts with items over time, those interactions tell a story. We group each user’s interactions chronologically to create sequences of items, with the assumption that items a user engages with have meaningful relationships to each other.\nLet’s trace through an example to understand how sequence generation works:\n# User interactions over time:\n# Time 1: User buys \"Python Programming\" (item_indice: 42)\n# Time 2: User buys \"Machine Learning\" (item_indice: 73) \n# Time 3: User buys \"Deep Learning\" (item_indice: 91)\n\n# Generated sequences:\n# Row 1: item_sequence = [-1, -1, ..., -1]           # No previous items\n# Row 2: item_sequence = [-1, -1, ..., 42]          # Previous: Python book\n# Row 3: item_sequence = [-1, -1, ..., 42, 73]      # Previous: Python, ML books\n# Sample DataFrame\ndata = {\n    \"user_indices\": [0, 0, 1, 1, 1],\n    \"item_indices\": [0, 1, 2, 3, 4],\n    \"timestamp\": [0, 1, 2, 3, 4],\n    \"ratings\": [1, 4, 5, 3, 2],\n}\n\ndf = pd.DataFrame(data)\n\n# Generate the item sequences\ndf_with_sequences = generate_item_sequences(\n    df,\n    user_col=\"user_indices\",\n    item_col=\"item_indices\",\n    timestamp_col=\"timestamp\",\n    sequence_length=3,\n    padding=True,\n    padding_value=-1,\n)\n\ndisplay(df_with_sequences)\n\nAs you can see, the above item_sequence column contains the sequence of items in chronological order which holds the context for the model to understand user preferences and make sequential predictions.\nIn this project, we use the user’s last 10 items as the sequence length, but this is configurable. The choice depends on experimentation, but generally there’s a trade-off: longer sequences provide more context but use more memory, while shorter sequences focus on recent items and process faster.\nDo take note that we need to pad sequences to the same length so we can batch process them in our PyTorch model.\n# From cfg/common.yaml\ntrain:\n  sequence:\n    sequence_length: 10  # Keep last 10 items as context"
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html#recap",
    "href": "projects/implement-recsys/c2/index.html#recap",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "Recap",
    "text": "Recap\nIn this chapter, we covered:\n\nData Sampling and Filtering: We discussed problems with basic random sampling of dyadic data and introduced our iterative sampling approach\nID Mapping: We converted string IDs to numerical indices to work with PyTorch model\nSequence Generation: We created item sequence features based on user’s chronological interactions\n\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/000-prep-data.ipynb and notebooks/001-features.ipynb files in the project repository."
  },
  {
    "objectID": "projects/implement-recsys/c2/index.html#whats-next",
    "href": "projects/implement-recsys/c2/index.html#whats-next",
    "title": "Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering",
    "section": "What’s Next",
    "text": "What’s Next\nIn Chapter 3, we’ll tackle the critical challenge of negative sampling. If our model only sees positive interactions (ratings), it can’t learn meaningful patterns for generalization. We need to generate negative examples so the model can distill the patterns by learning to distinguish between positive and negative interactions.\nContinue to the next chapter.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering. dvquys.com. https://dvquys.com/projects/implement-recsys/c2/."
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html",
    "href": "projects/implement-recsys/c3/index.html",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "",
    "text": "This is the third chapter of the tutorial series: Implement a RecSys."
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html#introduction",
    "href": "projects/implement-recsys/c3/index.html#introduction",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "Introduction",
    "text": "Introduction\nIn Chapter 2, we dug into our Amazon dataset and built a solid feature preprocessing pipeline. But we’re not ready to train any models yet. We’re missing something crucial: the labels that will teach our model the difference between what users want and what they don’t.\nWe already know which items users bought. So here’s a natural idea: let’s turn this into a sequence prediction problem. Show the model a user’s past actions, then ask it to predict what comes next.\nIf this idea of predicting next thing based on a sequence of things sounds familiar, then it’s expected. This is exactly what researchers in natural language processing figured out years ago. Take Word2Vec. It’s a simple but brilliant model that learns word relationships by studying which words hang out together. Word2Vec breaks a sentence into input-output pairs where the surrounding words are the input and the hidden target word is what you’re trying to predict.\n\n\n\nSource: A simple Word2Vec tutorial\n\n\nAt each step, we pick a target word along with its neighboring context to form a positive training example. How about the negatives? That’s where negative sampling comes in. Rather than letting the model see only context words that belong together, we throw in some randomly selected words from outside the context. This mix challenges the model, teaching it to learn the patterns of words that appear in similar contexts.\nNow let’s apply this to our book dataset. When a user clicks, views, or buys something, that’s a clear positive signal. But what about the millions of items they never touch? Are these items bad, or did the user just never discover them? Negative sampling helps us figure this out. It gives the model examples of what a user probably won’t pick.\nI personally find this analogy helpful: Training a recommendation model without negative samples is like teaching someone to recognize cats by only showing them cat pictures. They might think everything is a cat!\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is in notebooks/002-negative-sample.ipynb and src/negative_sampling.py in the project repository."
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html#negative-sampling-strategies",
    "href": "projects/implement-recsys/c3/index.html#negative-sampling-strategies",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "Negative Sampling Strategies",
    "text": "Negative Sampling Strategies\n\nRandom Sampling\nLet’s start with the obvious approach: just pick random items the user hasn’t touched.\nThis is faily straightforward to code up. You grab all the items a user hasn’t interacted with, throw them in a hat, and pull out however many negatives you need. It’s fast, it’s unbiased, and it works.\nBut there’s a problem. Some of those “random” negatives might actually be items the user would love if they found them. There’s also another issue: the model might get biased toward popular items, since they show up in lots of positive pairs.\n\n\nPopularity-Based Sampling\nTo deal with the above popularity biase, instead of picking negatives randomly, we sample them based on how popular they are in the dataset. This makes popular items get chosen as negatives more often.\nWhy does this work better? A popular item has a higher chance of being liked by any user than a random item. So when we use popular items as negatives, we’re creating harder training examples. We’re forcing the model to learn why this specific user didn’t interact with this popular item, even though lots of other people did.\nThis has a nice side effect. It helps the model learn beyond simple popularity bias. Instead of just recommending whatever’s trending, it has to figure out what makes items relevant for specific users.\nThe downside? It’s more work to implement. You need to track popularity statistics. And there’s a catch: popular items aren’t always bad choices for a user. Sometimes they’re popular because they’re actually good. So when we force a negative for a user-item pair, it might confuse the model.\n\n\nHard Negative Mining\nThis is the fancy approach. You need a model that’s already somewhat trained, and you use it to find items it thinks a user would like—but shouldn’t. These become your negative samples.\nIt’s like having a sparring partner who knows your weaknesses. The model keeps getting challenged by examples that are specifically designed to trip it up. As the model gets better, the negatives get harder, creating a virtuous cycle of improvement.\nSounds great, right? But it’s not always worth the extra effort, especially at the start. You need to train iteratively, which takes more time and compute. And there’s always the risk that you’re just teaching the model to overfit to its own biases.\nFor this project, we’ll use popularity-based negative sampling. It strikes a good balance between effectiveness and simplicity."
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html#lets-implement",
    "href": "projects/implement-recsys/c3/index.html#lets-implement",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "Let’s implement",
    "text": "Let’s implement\nThe full implementation is here.\nFunction signature:\n\n\nsrc/negative_sampling.py\n\n\ndef generate_negative_samples(\n    df,\n    user_col=\"user_indice\",\n    item_col=\"item_indice\", \n    label_col=\"rating\",\n    neg_label=0,\n    seed=None,\n) -&gt; pd.DataFrame:\n    \"\"\"\n    Generate negative samples for a user-item interaction DataFrame.\n    \n    The key insight: sample negative items proportional to their \n    popularity to create more challenging training scenarios.\n\n    Args:\n        df (pd.DataFrame): DataFrame containing user-item interactions.\n        user_col (str): Column name representing users.\n        item_col (str): Column name representing items.\n        label_col (str): Column name for the interaction label (e.g., rating).\n        neg_label (int): Label to assign to negative samples (default is 0).\n        seed (int, optional): Seed for random number generator to ensure reproducibility.\n\n    Returns:\n        pd.DataFrame: DataFrame containing generated negative samples.\n    \"\"\"\n\n\nStep 1: Calculate Item Popularity\n# Calculate item popularity based on interaction frequency\nitem_popularity = df[item_col].value_counts()\n\n# Convert to sampling probabilities to be used in the next step\npopularity = item_popularity.values.astype(np.float64)\ntotal_popularity = popularity.sum()\nsampling_probs = popularity / total_popularity\nThis creates a probability distribution where more popular items have higher chances of being selected as negatives.\n\n\nStep 2: Identify Negative Candidates\n# Create user-item interaction mapping\nuser_item_dict = df.groupby(user_col)[item_col].apply(set).to_dict()\n\n# For each user, find items they haven't interacted with\nfor user, pos_items in user_item_dict.items():\n    negative_candidates = all_items_set - pos_items\nWe make sure we only sample from items the user hasn’t already interacted with.\n\n\nStep 3: Popularity-Weighted Sampling\n# Create a mapping from item to index to quickly access item-related data.\nitems = item_popularity.index.values\nitem_to_index = {item: idx for idx, item in enumerate(items)}\n\n# Sample negatives proportional to popularity\ncandidate_indices = [item_to_index[item] for item in negative_candidates_list]\ncandidate_probs = sampling_probs[candidate_indices]\ncandidate_probs /= candidate_probs.sum()  # Normalize\n\nsampled_items = np.random.choice(\n    negative_candidates_list, \n    size=num_neg, \n    replace=False, \n    p=candidate_probs\n)\nThis makes sure popular items are more likely to be selected as negatives, creating harder training examples.\nIn our implementation, we choose to have the same number of negative samples as positive samples. This helps us avoid dealing with imbalanced training data. But feel free to experiment with different ratios (you’ll need to update the implementation).\nnum_pos = len(pos_items)  # Number of positive interactions\nnum_neg = min(num_pos, num_neg_candidates)  # Match positive count\nLike other crucial parts of our pipeline, let’s test this with some mock data to make sure it works."
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html#adding-features-to-the-generated-negative-samples",
    "href": "projects/implement-recsys/c3/index.html#adding-features-to-the-generated-negative-samples",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "Adding Features to the generated negative samples",
    "text": "Adding Features to the generated negative samples\nAs you can see from the above output, we only have the item indice and the label. We also need to populate the new negative observations with the same features as the positive ones, i.e. the sequence of previously interacted items.\nSince these negative samples come from the same user, we can use the same features as the positive ones. We just need to use the timestamp of the corresponding positive interaction.\ndef add_features_to_neg_df(pos_df, neg_df, user_col, timestamp_col, feature_cols=[]):\n    \"\"\"\n    Add features from positive samples to negative samples DataFrame.\n    \n    Key insight: Negative samples should have realistic timestamps\n    that align with when the user was actually active.\n    \"\"\"\n    \n    # Create pseudo timestamps for negatives\n    # This timestamp pseudo column is used as join key to the positive samples, ensuring that each negative\n    # maps to one positive sample and get the positive's features.\n    neg_df = neg_df.assign(\n        timestamp_pseudo=lambda df: df.groupby(user_col).cumcount() + 1\n    )\n    \n    # Merge with corresponding positive interaction timestamps\n    neg_df = pd.merge(\n        neg_df,\n        pos_df.assign(\n            timestamp_pseudo=lambda df: df.groupby([user_col])[timestamp_col].rank(\n                method=\"first\"\n            )\n        )[[user_col, timestamp_col, \"timestamp_pseudo\", *feature_cols]],\n        how=\"left\",\n        on=[user_col, \"timestamp_pseudo\"],\n    ).drop(columns=[\"timestamp_pseudo\"])\n    \n    return neg_df"
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html#concat-and-re-split-train-test",
    "href": "projects/implement-recsys/c3/index.html#concat-and-re-split-train-test",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "Concat and re-split train-test",
    "text": "Concat and re-split train-test\nAfter adding features to the negative samples, we can combine them with the positive samples. Then we re-split the dataset based on the timestamp milestone we used in our original train-test split."
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html#recap",
    "href": "projects/implement-recsys/c3/index.html#recap",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "Recap",
    "text": "Recap\nIn this chapter, we tackled the tricky problem of implicit feedback in recommendation systems. Here’s what we covered:\n\nWhy we need negative samples: Without them, our model would be like someone trying to recognize cats by only seeing cat pictures. We need examples of what users don’t want to create balanced learning.\nThree approaches to negative sampling: We looked at random sampling (simple but not very challenging), popularity-based sampling (our chosen approach that creates harder training scenarios), and hard negative mining (powerful but complex).\nOur popularity-based implementation: We built a system that samples negative items based on their popularity. This forces our model to learn why a user didn’t interact with popular items that others liked.\nKeeping things balanced: We generate equal numbers of positive and negative samples for each user (1:1 ratio) to avoid bias in either direction.\nAdding realistic features: We make sure our negative samples have proper timestamps and features that align with when users were actually active. This maintains temporal consistency for sequence modeling.\n\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is in notebooks/002-negative-sample.ipynb and src/negative_sampling.py in the project repository."
  },
  {
    "objectID": "projects/implement-recsys/c3/index.html#whats-next",
    "href": "projects/implement-recsys/c3/index.html#whats-next",
    "title": "Implement a RecSys, Chapter 3: Negative Sampling",
    "section": "What’s Next?",
    "text": "What’s Next?\nWith our balanced dataset of positive and negative samples, we’re ready to tackle model evaluation. In Chapter 4, we’ll set up our evaluation framework and experiment tracking with MLflow while implementing a baseline model along the way as an illustration. This will give us the foundation for systematic model development and comparison.\nContinue to the next chapter.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Implement a RecSys, Chapter 3: Negative Sampling. dvquys.com. https://dvquys.com/projects/implement-recsys/c3/."
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html",
    "href": "projects/implement-recsys/c1/index.html",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "",
    "text": "This is the first chapter of the tutorial series: Implement a RecSys."
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#introduction",
    "href": "projects/implement-recsys/c1/index.html#introduction",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Introduction",
    "text": "Introduction\nImagine you’re browsing an e-commerce site and notice something remarkable: the recommendations update almost instantly as you click through products. You view a pair of headphones, and suddenly complementary items appear. You check out a laptop, and the “you might also like” section refreshes with relevant accessories. You think to yourself—“Wow, how do they do that?” Then curiosity kicks in: How do they capture your evolving intent so quickly? How do they serve personalized suggestions fast enough to feel real-time? How do they handle the complexity of understanding your browsing patterns on the fly?\nIf you’ve ever have those questions, this tutorial series is for you.\nOver the next several chapters, I’ll walk you through building an end-to-end recommendation system that reacts in real-time based on user behavior sequences. We’ll go from raw data to a complete recommender system that personalizes recommendations as users interact with your platform.\n\n\n\n\n\n\nEnough Talking, Show Me the Code!\n\n\n\nIf you’re familiar with RecSys and just want to see the code, here it is: https://github.com/dvquy13/recsys-seq-model.\n\n\nFor those who aren’t well aware of what a recommender system is, here is a quick recap. Recommender systems are specialized tools designed to suggest items—whether products, content, or services—to users based on what we know about their preferences and behaviors. At their core, they comprise a set of technologies, algorithms, and processes that analyze user interaction signals (clicks, views, purchases, ratings, etc.) to predict what individual users might find relevant or engaging.\n\n\n\nFrom the user’s perspective, these systems help uncover content or products they might never have discovered on their own and save time by surfacing the most relevant options up front.\nFrom a business standpoint, the primary goals of a recommender system are to create a sense of “we understand you” for each user and to drive revenue through personalized cross-selling opportunities. By tailoring recommendations to each user, companies can boost engagement and average order value.\nIn practice, recommender systems power some of the world’s largest digital platforms. For example, Amazon’s “Frequently Bought Together” suggestions guide shoppers toward complementary products, Facebook uses recommendation algorithms to prioritize posts and ads in users’ feeds, and Netflix’s home screen is largely driven by personalized movie and show recommendations.\n\n\n\nThe impact of these systems is profound: According to this report from McKinsey, roughly 75 percent of Netflix viewing hours come from recommended titles, 35 percent of Amazon’s purchases are influenced by its recommendations, and Netflix alone saves around $1 billion per year through improved user retention and engagement. These metrics underscore why recommender systems have become a critical component of modern digital businesses."
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#what-youll-build",
    "href": "projects/implement-recsys/c1/index.html#what-youll-build",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "What You’ll Build",
    "text": "What You’ll Build\nBy the end of this series, you’ll have constructed an end-to-end recommendation system while know how to:\n\nDesign and Train Session-based RecSys models using PyTorch to personalizes recommendations in real-time based on users’ recent interaction sequences\nTrack experiments with MLflow for reproducible ML workflows\nServe predictions through a FastAPI service in conjunction with a vector database and caching\nPackage the project using Docker and modern ML infrastructure\nLaunch aninteractive demo with a frontend1\n\n\n\n\n\nThe Demo"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#target-audience",
    "href": "projects/implement-recsys/c1/index.html#target-audience",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Target Audience",
    "text": "Target Audience\nThis tutorial series is designed for:\n\nData Scientists looking beyond training models and into ML services\nML Engineers building scalable recommendation systems\nBackend Developers interested in ML/RecSys architecture\nAnyone curious about a modern and real-time end-to-end RecSys project\n\nAll in all, it’s good to have some basic knowledge of Machine Learning and Python to follow along."
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#session-based-vs-traditional-recommendations",
    "href": "projects/implement-recsys/c1/index.html#session-based-vs-traditional-recommendations",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Session-Based vs Traditional Recommendations",
    "text": "Session-Based vs Traditional Recommendations\n\nTraditional Collaborative Filtering\nTraditional recommendation systems often rely on collaborative filtering, which uses historical user-item interaction matrices to find similar users or items. While effective, these approaches have limitations:\n\nStatic representations: User preferences are treated as fixed\nCold start problems: Difficulty with new users or items\nLimited temporal understanding: Doesn’t capture evolving user interests within a session\n\n\n\nSession-Based Recommendations\nSession-based recommendation systems address these limitations by:\n\nModeling sequences: Understanding the order and timing of user interactions\nCapturing short-term intent: Focusing on recent behaviors within a session\nHandling anonymity: Working even without persistent user identifiers\nReal-time adaptation: Continuously updating recommendations as users interact"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#why-sequence-modeling-matters",
    "href": "projects/implement-recsys/c1/index.html#why-sequence-modeling-matters",
    "title": "Implement a RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Why Sequence Modeling Matters",
    "text": "Why Sequence Modeling Matters\nUser behavior is inherently sequential. Consider an e-commerce browsing session:\n\nUser searches for “wireless headphones”\nViews a Sony model\nChecks reviews for Audio-Technica alternatives\nCompares prices across brands\n\nEach step provides context for the next recommendation. Traditional systems might miss this sequential pattern, while sequence models capture the evolving intent throughout the session.\n\n\n\n\nData signals"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#real-time-architecture-a-simplified-payload-approach",
    "href": "projects/implement-recsys/c1/index.html#real-time-architecture-a-simplified-payload-approach",
    "title": "Implement a RecSys Chapter 1 - Introduction and Project Overview",
    "section": "Real-Time Architecture: A Simplified Payload Approach",
    "text": "Real-Time Architecture: A Simplified Payload Approach\nIn production, real-time recommendation systems typically leverage streaming architectures with event pipelines (Kafka, Kinesis, etc.) that process user interactions. The streaming system is normally built in a centralized manner by a platform team with the aim to provide real-time data processing capabilities to multiple downstream usages. This approach also ensures scalability and reliability.\nHowever, for the purpose of this tutorial, we’ll use the simplified request-payload approach to focus on the ML aspects rather than streaming infrastructure complexity.\nBasically we would include the real-time events in the payload of the requests coming in to RecSys APIs. In real-world, implementation can be done by frontend capturing user interactions locally (clicks, views, etc.) and includes recent session history in each API request.\nWhile this approach looks like a hacky-workaround ways, I have seen teams using this in production for early-stage real-time ML RecSys. In the end, the idea in and of itself has some merits such as minimal signal delay, users not needing to refresh to get updated recommendations and easier to implement and debug.\nIn the below screenshot you can see that in the POST request payload sending to a recommendation endpoint, we include the recent user interacted item IDs in item_seq_raw in the payload.\n\n\n\n\nExample request payload"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#our-technology-stack",
    "href": "projects/implement-recsys/c1/index.html#our-technology-stack",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Our Technology Stack",
    "text": "Our Technology Stack\nBelow is a list of the technology frameworks we use in this project. There is no need to understand all of them in detail, so do not worry too much if you are not familiar. However, I do encourage you to at least learn the basics of each of them. Wherever possible I would also explain the rationale and what roles they play in the system that we build together.\n\n\n\nComponent\nTechnology\nPurpose\n\n\n\n\nML Framework\nPyTorch\nDeep learning model training\n\n\nAPI Server\nFastAPI\nHigh-performance API endpoints\n\n\nExperiment Tracking\nMLflow\nModel versioning and experiments\n\n\nVector Database\nQdrant\nSimilarity search and retrieval\n\n\nCaching\nRedis\nReal-time data storage\n\n\nPackage Management\nuv\nFast Python dependency management\n\n\nContainerization\nDocker\nConsistent deployment environments"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#project-structure-overview",
    "href": "projects/implement-recsys/c1/index.html#project-structure-overview",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Project Structure Overview",
    "text": "Project Structure Overview\nThe codebase can be found here. Below is a quick glance into its structure.\nrecsys-seq-model/\n├── notebooks/           # Progressive tutorial notebooks\n│   ├── 000-prep-data.ipynb\n│   ├── 001-features.ipynb\n│   ├── 002-negative-sample.ipynb\n│   ├── 010-baseline-popular.ipynb\n│   ├── 011-sequence-modeling.ipynb\n│   ├── 020-ann-index.ipynb\n│   └── 021-redis-prep.ipynb\n├── src/                 # Core implementation modules\n│   ├── cfg.py          # Configuration management\n│   ├── dataset.py      # Data loading utilities  \n│   ├── id_mapper.py    # ID mapping functionality\n│   ├── negative_sampling.py  # Sampling strategies\n│   ├── sequence/       # Sequence model implementations\n│   ├── eval/          # Evaluation frameworks\n│   └── vectorstore.py # Qdrant integration\n├── api/                # FastAPI service\n│   ├── app.py         # Main application\n│   ├── services.py    # Business logic\n│   └── models.py      # Request/response schemas\n├── mlflow/            # MLflow configuration\n├── data/              # Dataset storage\n└── compose.yml        # Docker orchestration\n\nProgressive Notebook Approach\nNotice the numbered notebook sequence (000, 001, 002, etc.). This design ensures you build knowledge progressively:\n\n000-series: Data preparation and exploration\n010-series: Model training and evaluation\n\n020-series: Production deployment preparation\n\nEach notebook represents a complete milestone, allowing you to pause and resume at any point.\n\n\nA note on the commonly used commands\nYou may found the below commands useful, as I have myself running them regularly when developing the projects. Treating them as shortcuts, I have put them in the Makefile:\n# Environment setup\nuv sync --all-groups     # Install/update dependencies\nmake requirements-txt    # Export requirements for Docker\n\n# Development session\n1make lab                 # Start Jupyter Lab\n2make ml-platform-up      # Start MLflow, Qdrant, Redis\nmake ml-platform-down    # Stop all services\nmake ml-platform-logs    # View service logs\n\n# API Operations (covered in later chapters)\nmake api-up             # Start the FastAPI service\nmake api-test           # Run API tests\n\n# UI Demo (optional)\nmake ui-up              # Start the frontend demo\n\n1\n\nThis is a shortcut to start Jupyter Lab, you will need to run this in every chapter.\n\n2\n\nThe tools that we will use to support our model development and serving are grouped into this ml-platform umbrella."
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#recap",
    "href": "projects/implement-recsys/c1/index.html#recap",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Recap",
    "text": "Recap\nTo get a hands on the system that we will build together, you can clone the repo and follow the instructions in the README to get the project running.\nAfter that you should have:\n\nA clear picture of what session-based recommendations are and why they’re useful\nYour development environment ready to go with all services running\n\nFamiliarity with the project structure so you can navigate the codebase\n\nThe foundation knowledge to tackle the upcoming chapters"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#whats-next",
    "href": "projects/implement-recsys/c1/index.html#whats-next",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "What’s Next",
    "text": "What’s Next\nIn Chapter 2, we’ll get our hands dirty while setting up the input data in a format that’s designed for sequence modeling.\nContinue to the next chapter.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Implement a RecSys, Chapter 1: Introduction and Project Overview. dvquys.com. https://dvquys.com/projects/implement-recsys/c1/."
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#footnotes",
    "href": "projects/implement-recsys/c1/index.html#footnotes",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThough not covered in this tutorial, there would be example UI code in the repo.↩︎"
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html",
    "href": "projects/implement-recsys/c4/index.html",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "",
    "text": "This is the fourth chapter of the tutorial series: Implement a RecSys."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#introduction",
    "href": "projects/implement-recsys/c4/index.html#introduction",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Introduction",
    "text": "Introduction\nIn Chapter 3, inspired by how Word2Vec cleverly samples out-of-context words to train its language model, we implemented our own popularity-based sampling strategy to generate negative samples for our training dataset. Now we’re ready to tackle one of the most critical aspects of any ML project: evaluation.\nWe will discuss building our evaluation framework, setting up MLflow for experiment tracking, and implementing a popularity-based baseline model to illustrate the end-to-end process. A solid measuring foundation provides the groundwork for systematic model development—you’ll use these tools throughout all your different attempts at improving the model performance.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/010-baseline-popular.ipynb file and the src/eval/ directory in the project repository."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#the-challenges-of-evaluation-in-recommendation-systems",
    "href": "projects/implement-recsys/c4/index.html#the-challenges-of-evaluation-in-recommendation-systems",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "The Challenges of Evaluation in Recommendation Systems",
    "text": "The Challenges of Evaluation in Recommendation Systems\nRecommendation systems are notoriously tricky to evaluate. Unlike classification problems where accuracy is straightforward, the most significant challenge originates from the fact that RecSys has its root from information retrieval—where we essentially try to rank items. The issue comes when your new model produces a new ranking, but we don’t really know how users would react to this alternative ranking unless we deploy it in production. This makes offline evaluation feel quite limited for gauging real-world performance.\nYou may ask: Why don’t just run online experiment for any idea we have? Because they are typically expensive and slow. Methods like A/B tests in general require real users, real traffic, and real time to see if your changes work. So to iterate quickly on your backlog of a hundred different ideas, we don’t really have any other choices rather than resorting to offline evaluation as our development tool. That assumes, of course, that getting scores on old data actually points you towards better real-world models.\nIf you ask me how I navigate through all these sorts of uncertainties, here’s my take: if your offline metrics show clear improvements, that’s a good sign to move forward. If they show no change but you have strong reasons to believe your improvements are effective, don’t let that stop you from running an online experiment. Sometimes the best ideas don’t show up in offline metrics until they meet real users. Just make sure you can roll back quickly if you see significant drops in the early days.\nBeyond this counterfactual challenge, recommendation systems must also struggle with implicit feedback where users rarely provide explicit ratings, ranking quality where the order of recommendations matters as much as the items themselves, personalization where a perfect recommendation for one user might be terrible for another, and temporal dynamics where user preferences evolve over time. In short, recommendations involve nuanced concepts of relevance, satisfaction, and utility that resist simple measurement.\nTo address these challenges, we need a comprehensive evaluation framework that can measure multiple aspects of recommendation quality. For the scope of this tutorial, we would be focusing on measuring both the ranking quality and the classification quality of the recommendations, while leaving the problem of counterfactual evaluation for a future post perhaps1.\nAll in all, we’ll focus on offline evaluation because it lets us iterate fast and learn the fundamentals. But important message worths repeating—the real test happens when your recommendations meet actual users."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#online-vs-offline-evaluation-the-ultimate-goal-vs-the-development-tool",
    "href": "projects/implement-recsys/c4/index.html#online-vs-offline-evaluation-the-ultimate-goal-vs-the-development-tool",
    "title": "Implement a RecSys Chapter 4 - Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Online vs Offline Evaluation: The Ultimate Goal vs The Development Tool",
    "text": "Online vs Offline Evaluation: The Ultimate Goal vs The Development Tool\nBefore diving into the technical details, let me remind you of the what ultimately matters to the business: delivering relevant recommendations measured via business metrics like click-through rates and conversion rates.\nThese metrics can only be evaluated at production environment with the help of online experiments. But they are typically expensive and slow. A/B testing and its alike require real users, real traffic, and real time to see if your changes work. So to iterate quickly on your backlog of a hundred different ideas, we often resort to offline evaluation as our development tool. The assumption is that improvements made over historical observational data can guide our decisions.\nThough more often than not, offline improvements don’t always translate to online wins. You might build a model that crushes your offline metrics, deploy it to production, and watch your click-through rates stay flat or even drop. The gap between offline and online performance is one of the most challenging aspects of recommendation systems.\nOf course there have already been research efforts to address this, and googling around would actually lead us to some interesting ideas2. IMHO though, the approaches are often too complicated so I normally refrain from fancy techniques in the early phases of the project. In principle we should nonetheless design our offline evaluation to match online results as closely as possible, while maintaining a mindset that offline evaluation is a guiding tool and a guardrail, not the definitive answer.\nI usually think like this: if your offline metrics show clear improvements, that’s a good sign to move forward. If they show no change but you have strong reasons to believe your improvements are effective, don’t let that stop you from running an online experiment. Sometimes the best ideas don’t show up in offline metrics until they meet real users. Just make sure you can roll back quickly if you see significant drops in the early days.\nFor this tutorial series, we’ll focus on offline evaluation because it lets us iterate fast and learn the fundamentals. But important message worths repeating—the real test happens when your recommendations meet actual users."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#evaluation-metrics-for-recommendation-systems",
    "href": "projects/implement-recsys/c4/index.html#evaluation-metrics-for-recommendation-systems",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Evaluation Metrics for Recommendation Systems",
    "text": "Evaluation Metrics for Recommendation Systems\nThere are plenty of great posts diving into the details of these metrics so I would just briefly mention them here. Our evaluation framework implements several key metrics:\n\nRanking Metrics\n\nPrecision@K: What fraction of top-K recommendations are relevant?\nRecall@K: What fraction of relevant items appear in top-K recommendations?\nNDCG@K: Normalized Discounted Cumulative Gain—rewards relevant items appearing higher in the ranking\n\n\n\nDiversity Metrics\n\nPersonalization: Measures how different recommendations are across users (higher is better)\n\n\n\nClassification Metrics\n\nROC-AUC: Area under the ROC curve for binary relevance prediction\nPrecision-Recall curves: Trade-offs between precision and recall at different thresholds\n\nWhy classification metrics? Isn’t this a ranking problem? Well, the answer is yes and no. Essentially the choice of modeling approach is up to us, but there is one valid approach in which we would formulate the problem as predicting whether a user would interact with an item or not. As the output of this model would normally be a score between 0 and 1, we can then use the ROC-AUC to evaluate how well a model is able to rank the relevant items higher that the irrelevant ones, which is a form of ranking quality in and of itself. The other main benefit for using ROC-AUC is that it’s also a built-in metric for almost all ML frameworks, which makes it easy to measure without the need to implement it from scratch (lazy person saying).\nIf you wish to learn more, I suggest checking out this post by Amit Chaudhary and the Evidently documentation on Ranking metrics."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#the-baseline-recommender-system",
    "href": "projects/implement-recsys/c4/index.html#the-baseline-recommender-system",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "The baseline recommender system",
    "text": "The baseline recommender system\nTo demonstrate how we evaluate a model, let’s first build a baseline one for easier illustration. This will serve as a sanity check for our evaluation framework and provide a performance benchmark for more complex models to beat.\n\n\n\n\n\n\nStart MLflow\n\n\n\nIf you have followed the README instructions (see Chapter 1), you should have already started MLflow. If not, you can start it by running the following command:\nmake ml-platform-up && make ml-platform-logs\n\n\nIn the world of RecSys, the most popular base line is “popular” recommender (pun intended). It’s simple, fast, easy to implement, easy to understand for users, and sometimes quite effective, especially compared to the effort required to put up.\nTo get the most popular items, we only need a few lines of Pandas code to group by item and count the number of interactions: \nThen, for each of the user in our validation set, we can simply assign the most popular items to them: \nThat’s it. We now have recommendations provided for our users. Now we can move to the actual evaluation part."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#how-we-set-up-evaluation-for-our-project",
    "href": "projects/implement-recsys/c4/index.html#how-we-set-up-evaluation-for-our-project",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "How We Set Up Evaluation for our Project",
    "text": "How We Set Up Evaluation for our Project\nWe need to align the recommendations with the ground truth labels. The src/eval/utils.py module provides two functions for this purpose:\n\n\nsrc/eval/utils.py\n\nfrom src.eval import (\n    create_label_df,           # Create ground truth labels\n    merge_recs_with_target,    # Merge recommendations with labels  \n)\n\n\ndef create_label_df(df, user_col, item_col, rating_col, timestamp_col):\n    \"\"\"\n    Creates a ranking of items for each user based on their ratings and interaction timestamps, providing the ground truth for evaluation.\n    \"\"\"\n    label_cols = [user_col, item_col, rating_col, \"rating_rank\"]\n    label_df = (\n        df.sort_values([timestamp_col], ascending=[False])\n        .assign(\n            rating_rank=lambda df: df.groupby(user_col)[rating_col].rank(\n                method=\"first\", ascending=False\n            )\n        )\n        .sort_values([\"rating_rank\"], ascending=[True])[label_cols]\n    )\n    return label_df\n\ndef merge_recs_with_target(recs_df, label_df, user_col, item_col, rating_col, k=10):\n    \"\"\"\n    Align your model's recommendations with the ground truth and handling cases where recommended items don't appear in the validation set.\n    \"\"\"\n    return (\n        recs_df.pipe(\n            lambda df: pd.merge(\n                df, label_df[[user_col, item_col, rating_col, \"rating_rank\"]],\n                on=[user_col, item_col], how=\"outer\"\n            )\n        )\n        .assign(\n            rating=lambda df: df[rating_col].fillna(0).astype(int),\n            # Fill the recall with ranking = top_k_retrieve + 1 so that the recall calculation is correct\n            rec_ranking=lambda df: df[\"rec_ranking\"].fillna(k + 1).astype(int),\n        )\n        .sort_values([user_col, \"rec_ranking\"])\n    )\n\n\nMetric Logging with Evidently\nThe src/eval/log_metrics.py module uses the Evidently library to compute and log comprehensive metrics:\n\n\nsrc/eval/log_metrics.py\n\ndef log_ranking_metrics(cfg: Config, eval_df):\n    \"\"\"\n    Compute and log ranking metrics using Evidently.\n    Automatically integrates with MLflow for experiment tracking.\n    \"\"\"\n    column_mapping = ColumnMapping(\n        recommendations_type=\"rank\",\n        target=cfg.data.rating_col,\n        prediction=\"rec_ranking\", \n        item_id=cfg.data.item_col,\n        user_id=cfg.data.user_col,\n    )\n\n    report = Report(\n        metrics=[\n            NDCGKMetric(k=cfg.eval.top_k_rerank),\n            RecallTopKMetric(k=cfg.eval.top_k_retrieve),\n            PrecisionTopKMetric(k=cfg.eval.top_k_rerank),\n            FBetaTopKMetric(k=cfg.eval.top_k_rerank),\n            PersonalizationMetric(k=cfg.eval.top_k_rerank),\n        ]\n    )\n    \n    report.run(reference_data=None, current_data=eval_df, column_mapping=column_mapping)\n    \n    # Automatically log to MLflow if configured\n    if cfg.run.log_to_mlflow:\n        mlflow.log_artifact(evidently_report_fp)\n        # Log individual metrics for easy comparison\n        for metric_result in report.as_dict()[\"metrics\"]:\n            # ... metric logging logic\n    \n    return report\n\nThere is also a log_classification_metrics function that follows the similar pattern, but for the task of evaluation classification accuracy.\nThe output is we have HTML report like this:\n\n\n\nDo you notice that those report files are available in a nice web-based UI? If you are not familiar with MLflow, the next section will explain."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#experiment-tracking-with-mlflow",
    "href": "projects/implement-recsys/c4/index.html#experiment-tracking-with-mlflow",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Experiment Tracking with MLflow",
    "text": "Experiment Tracking with MLflow\nMachine learning development is fundamentally an iterative process—the more ideas we systematically test, the better our chances of discovering meaningful improvements. This iterative nature means we’re constantly cycling through hypotheses: trying new features, adjusting hyperparameters, experimenting with different architectures, and refining our approach based on results.\nTo maximize this exploration while maintaining scientific rigor, we need more than just robust evaluation metrics; we need a convenient way to track every experiment, compare results across iterations, and easily revisit previous approaches. Comprehensive experiment logging creates a safety net that encourages bold experimentation—when you know you can reproduce any previous result or quickly understand what changed between runs, you’re more willing to try ambitious ideas that might not work. This psychological safety accelerates the entire development cycle.\nThere are often no restrictions on how you should track your experiments. Even manually keeping things in a spreadsheet works just fine. Based on my own experience, I feel like MLflow is the most convenient way though, since this tool is mature and well-integrated with other ML frameworks. It also offers other fundamental capabilities like model registry which becomes very handy when we talk about model serving and deployment.\nAs MLflow should be enabled in our every model training run, I put most of the MLflow integration implementation in our configuration code:\nfrom src.cfg import ConfigLoader\n\n# Load configuration and initialize MLflow\ncfg = ConfigLoader(\"../cfg/common.yaml\")\ncfg.run.run_name = \"001-baseline-popular\"\ncfg.run.experiment_name = \"Retrieve - Binary\"\ncfg.init()\nThe cfg.init() method handles all the MLflow setup:\nfrom lightning.pytorch.loggers import MLFlowLogger\n\nclass ConfigLoader:\n    # ...\n\n    def init(self):\n        \"\"\"Initialize MLflow experiment tracking automatically.\"\"\"\n        if self.run.log_to_mlflow:\n            logger.info(f\"Setting up MLflow experiment {self.run.experiment_name}...\")\n            mlflow.set_experiment(self.run.experiment_name)\n            mlflow.start_run(run_name=self.run.run_name)\n            \n1            self._mlf_logger = MLFlowLogger(\n                experiment_name=self.run.experiment_name,\n                run_id=mlflow.active_run().info.run_id,\n                tracking_uri=mlflow_uri,\n                log_model=True,\n            )\n        return self\n\n1\n\nNote that MLFlowLogger here is a PyTorch Lightning logger, which we would use later when defining our PyTorch Lightning model for logging our model training progress.\n\n\nIn the end of our run, we can call this method cfg.log_config_to_mlflow() to log all parameters to MLflow:\ndef log_config_to_mlflow(self):\n    \"\"\"Log all configuration parameters to MLflow with dot notation.\"\"\"\n    flat_config = flatten_dict(self.config.model_dump())\n    for key, value in flat_config.items():\n        mlflow.log_param(key, value)  # e.g., \"train.learning_rate\": 0.01\nThe result is we can access our experiment parameters like this:\n\n\n\nIf for some reasons we don’t want to log your run to MLflow e.g. when we starts to develop our notebook, we can easily control this behavior by setting the log_to_mlflow flag to false in our configuration file:\n# cfg/common.yaml\nrun:\n  log_to_mlflow: true\n  experiment_name: \"Retrieve - Binary\"\nAt this point, you’ve got a working popularity-based recommender, a full offline evaluation pipeline, and MLflow tracking wired into your runs. With those pieces in place, you can safely try out new ideas, compare experiments side by side, and roll back if something goes sideways."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#recap",
    "href": "projects/implement-recsys/c4/index.html#recap",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Recap",
    "text": "Recap\nIn this chapter, we established the critical evaluation infrastructure that will power your recommendation system development. Here’s what we covered:\n\nThe fundamental evaluation challenges: We explored why recommendation systems are uniquely difficult to evaluate, mostly from the angle of counterfactual problem (we only see what users actually encountered) which makes simple accuracy metrics inadequate.\nOnline vs offline evaluation strategy: We established the principle that while online metrics are the ultimate business goal, offline evaluation serves as our rapid iteration tool. The key insight: offline improvements don’t always translate to online wins, but they provide essential guidance for systematic development.\nComprehensive evaluation metrics: We implemented a multi-dimensional framework using Evidently that captures ranking quality (Precision@K, Recall@K, NDCG@K), diversity (Personalization), and classification performance (ROC-AUC, Precision-Recall curves). We also justified why classification metrics make sense for recommendation systems when framed as binary relevance prediction.\nPopularity-based baseline implementation: We built our first recommender system—a simple but effective popularity-based model that assigns the most frequently interacted items to all users. This baseline serves as our performance benchmark and validates that our evaluation pipeline works correctly.\nMLflow experiment tracking integration: We created a configuration-driven system that automatically handles experiment setup, parameter logging, and artifact storage. This infrastructure encourages bold experimentation by providing the safety net of full reproducibility.\n\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/010-baseline-popular.ipynb file and the src/eval/ directory in the project repository."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#whats-next",
    "href": "projects/implement-recsys/c4/index.html#whats-next",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "What’s Next",
    "text": "What’s Next\nIn Chapter 5, we’ll build on this foundation to implement session-based recommendation models that can capture temporal patterns in user behavior. The evaluation framework you’ve built here will be essential for measuring whether these more complex models actually improve upon our simple baseline. And if the our evaluation setup does a good job, the results would be hard to miss:\n\n\n\nAs you can see, MLflow helps comparing model iterations easily 😉.\nContinue to the next chapter.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation. dvquys.com. https://dvquys.com/projects/implement-recsys/c4/."
  },
  {
    "objectID": "projects/implement-recsys/c4/index.html#footnotes",
    "href": "projects/implement-recsys/c4/index.html#footnotes",
    "title": "Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nYou may take a look at this writing Counterfactual Evaluation for Recommendation Systems to learn more.↩︎"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#why-session-based-recommendations-matters",
    "href": "projects/implement-recsys/c1/index.html#why-session-based-recommendations-matters",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "Why Session-based Recommendations Matters",
    "text": "Why Session-based Recommendations Matters\nUser behavior is inherently sequential. Consider an e-commerce browsing session:\n\nUser searches for “wireless headphones”\nViews a Sony model\nChecks reviews for Audio-Technica alternatives\nCompares prices across brands\n\nEach step provides context for the next recommendation. Traditional systems might miss this sequential pattern, while sequence models capture the evolving intent throughout the session.\n\n\n\n\nData signals"
  },
  {
    "objectID": "projects/implement-recsys/c1/index.html#how-to-react-in-real-time-a-simplified-payload-approach",
    "href": "projects/implement-recsys/c1/index.html#how-to-react-in-real-time-a-simplified-payload-approach",
    "title": "Implement a RecSys, Chapter 1: Introduction and Project Overview",
    "section": "How to react in real-time: A Simplified Payload Approach",
    "text": "How to react in real-time: A Simplified Payload Approach\nIn production, real-time recommendation systems typically leverage streaming architectures with event pipelines (Kafka, Kinesis, etc.) that process user interactions. The streaming system is normally built in a centralized manner by a platform team with the aim to provide real-time data processing capabilities to multiple downstream usages. This approach also ensures scalability and reliability.\nHowever, for the purpose of this tutorial, we’ll use the simplified request-payload approach to focus on the ML aspects rather than streaming infrastructure complexity.\nBasically we would include the real-time events in the payload of the requests coming in to RecSys APIs. In real-world, implementation can be done by frontend capturing user interactions locally (clicks, views, etc.) and includes recent session history in each API request.\nWhile this approach looks like a hacky-workaround ways, I have seen teams using this in production for early-stage real-time ML RecSys. In the end, the idea in and of itself has some merits such as minimal signal delay, users not needing to refresh to get updated recommendations and easier to implement and debug.\nIn the below screenshot you can see that in the POST request payload sending to a recommendation endpoint, we include the recent user interacted item IDs in item_seq_raw in the payload.\n\n\n\n\nExample request payload"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html",
    "href": "projects/implement-recsys/c5/index.html",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "",
    "text": "This is the fifth chapter of the tutorial series: Implement a RecSys."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#introduction",
    "href": "projects/implement-recsys/c5/index.html#introduction",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Introduction",
    "text": "Introduction\nIn Chapter 4, we established our evaluation framework, implemented MLflow experiment tracking, and built a popularity-based baseline model. Since our baseline is simple, it treats all users the same way—everyone gets the same popular items regardless of their personal browsing history or preferences.\nThis chapter marks the transition from simple heuristics to a more sophisticated machine learning aimed towards personalization. I will discuss the rationales and my thinkings about recommendation system and model design encompassing our sequence-based recommendation models that understand the temporal patterns in user behavior. Instead of just knowing that a user liked certain books, our model will learn to recognize that someone who browses “Python Programming” followed by “Machine Learning” might be interested in “Deep Learning with PyTorch” next.\nThis is going to be a long post. So grab your coffee, and let’s dive in.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/011-sequence-modeling.ipynb file and the src/sequence/ directory in the project repository.\n\n\n\n\n\n\n\n\nJargon\n\n\n\nThroughout the series I would be using sequence modeling and session-based recommendation interchangeably to refer to the same technique of modeling user’s behavior based on their sequential interactions."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#why-sequence-modeling-matters-in-recommendations",
    "href": "projects/implement-recsys/c5/index.html#why-sequence-modeling-matters-in-recommendations",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Why Sequence Modeling Matters in Recommendations",
    "text": "Why Sequence Modeling Matters in Recommendations\nTraditional collaborative filtering approaches treat user preferences as static snapshots. They might know that User A liked Items 1, 3, and 7, but they miss the story hidden in the order and timing of these interactions.\nConsider these two users with identical item preferences but different behavioral patterns:\nUser A: Book1 → Book2 → Book3 → Book4 → Book5\nUser B: Book5 → Book1 → Book4 → Book2 → Book3\nBoth users interacted with the same five books, but their sequences tell very different stories. User A might be following a structured learning path (beginner to advanced), while User B might be jumping between topics based on immediate curiosity. Traditional collaborative filtering would treat these users identically, but sequence models can capture these nuanced patterns.\nBut there’s something even more compelling about this modeling approach. It gives you two very strong arguments to argue with: real-time adaptation and cold start handling.\nThink about what happens in a static recommendation systems when a new user signs up. They get the same boring popular items everyone else sees. “Here are the top 10 books everyone’s reading!” It’s like walking into a bookstore and having the clerk hand you a list without asking what you’re interested in. The user has to suffer through generic recommendations until the system has enough data about them. This is the cold start problem, which is, trust me, a real typical ask your Product Manager would come up during your recommendation model pitch.\nOur sequence model flips this on its head. The moment a new user clicks on their first book, the model springs into action. They browse “Python Programming,” then click on “Machine Learning Basics”—the model immediately understands they’re on a learning journey. No waiting. No generic recommendations. The system starts personalizing from interaction number one.\nThis happens because our model doesn’t need to know who you are. It mostly needs to know what you’re doing. Traditional collaborative filtering methods like Matrix Factorization, while also leaning on user interaction data, normally provides user embedding that captures stable preferences over time. The sequence representation captures what’s happening right now. This is largely debateable, but in some settings “right now” carries more weight than “over time” for making the next recommendation1.\nAnd the model keeps learning as users interact. When someone adds a third book to their sequence, the recommendations get sharper. A fourth book makes them sharper still. It’s like having a shop assistant who gets better at helping you the longer you browse. And all of this happens without retraining the model or updating any databases.\nThis real-time adaptation solves one of the biggest problems in recommendation systems: how do you stay relevant when user interests change quickly? Traditional collaborative filtering models need to be retrained to pick up new patterns. Our sequence model adapts immediately. If thriller readers suddenly start buying romance novels (maybe it’s Valentine’s Day), the model notices the shift in the very next recommendation request.\nNow that we understand why sequence modeling is crucial, let’s explore how to actually design it."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#sequence-modeling-approaches",
    "href": "projects/implement-recsys/c5/index.html#sequence-modeling-approaches",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Sequence Modeling Approaches",
    "text": "Sequence Modeling Approaches\nThe central challenge in sequence modeling boils down to one question: how do you take a bunch of user interactions and turn them into something useful for predictions? You have a sequence like “Book A → Book B → Book C” and somehow need to compress all that information into a representation that captures what the user is really interested in.\nI like to think of this as a “pooling” problem. You’re pooling information from multiple items into a single representation. It’s like trying to summarize a conversation—you want to keep the important bits and throw away the noise.\nThe simplest pooling method is averaging. But wait, you might think, average what exactly? We’re talking about sequences of item IDs that users clicked on. You can’t just average “book_123” and “book_456” like they’re numbers, right?\nThis is where embeddings become your best friend. Here’s the key insight: every item in your catalog gets converted into a vector of numbers before any learning happens. Instead of working with raw item IDs, your model works with these dense numerical representations. It’s the same trick that made Word2Vec so powerful—remember from Chapter 3 how it could tell you that “king” minus “man” plus “woman” equals “queen”2? That magic happens because words become vectors, and vectors can be manipulated mathematically.\nSo when we talk about averaging a sequence, we’re actually averaging the embedding vectors of the items in that sequence. Book A becomes a 128-dimensional vector, Book B becomes another 128-dimensional vector, and averaging them gives you a single 128-dimensional vector that somehow captures the essence of “someone who reads both Book A and Book B.”\nThe beautiful thing about embeddings, just like in ML in general, is that they can start random but learn to be meaningful. During training, the model adjusts these vectors so that similar items end up close together in the embedding space. Books about Python programming cluster together, romance novels form their own neighborhood, and so on.\nNow, averaging is wonderfully simple, and sometimes simplicity wins. I’ve seen myself trying other pooling methods only to discover that good old averaging works just as well. But that doesn’t mean you shouldn’t experiment. Some sequences have patterns that averaging destroys—like the difference between reading “Beginner Python → Advanced Python” versus “Advanced Python → Beginner Python”.\nThis is where more sophisticated pooling methods come in. The field of sequence modeling offers several architectural choices, each with its own strengths and trade-offs. The simplest approach uses Recurrent Neural Networks (RNNs), which process sequences step by step, maintaining a hidden state that captures information from previous steps. Think of an RNN as reading a book one page at a time, trying to remember everything important from earlier pages. While this sounds intuitive, vanilla RNNs have a memory problem—they forget important details from way back in the sequence, what researchers call the vanishing gradient problem.\nTo fix this memory issue, researchers developed Long Short-Term Memory (LSTM) and Gated Recurrent Unit (GRU) networks. These use clever gating mechanisms to decide what to remember and what to forget. GRUs, in particular, have become the go-to choice for recommendation systems. They’re simpler than LSTMs but perform just as well—like getting 90% of the benefit with 60% of the complexity.\nMore recently, Transformer models have taken the field by storm. Instead of processing sequences step by step, they use self-attention mechanisms to look at all parts of the sequence simultaneously. It’s like being able to read an entire book at once and instantly connect themes from chapter 1 to chapter 20. Transformers are incredibly powerful for capturing long-range dependencies, but there’s a catch—they can be computationally expensive, especially when you have thousands or millions of items in your catalog.\nNow that we’ve explored different sequence modeling approaches—from simple averaging to sophisticated Transformers—let’s not forget that all architecture decisions should consider the following question: how do we deploy these models in production systems that need to handle millions of items in real-time?\nThis is where the retrieval vs ranking paradigm becomes essential."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#model-architecture-deep-dive",
    "href": "projects/implement-recsys/c5/index.html#model-architecture-deep-dive",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Model Architecture Deep Dive",
    "text": "Model Architecture Deep Dive\nLet’s examine our model implementation. You can see that its core is quite simple and straightforward. The candidate item is converted into embedding via an Embedding lookup operation. The query tower consists of a fully connected layer to add some learning capability on top of the input embedding, followed by normalization techniques to help with overfitting. Do note that at first we usually keep the model away from those techniques to make it easier to debug. Only after being certain the core architecture is working through experiments we will add them in if they help with the model performance on validation data.\n\n\nsrc/sequence/model.py\n\nclass SoleSequenceRetriever(BaseSequenceRetriever):\n    def __init__(\n        self,\n        num_items: int,\n        embedding_dim: int,\n        pooling_method: str = \"mean\",\n        dropout: float = 0.2,\n        mask_pooling: bool = True,\n    ):\n        self.num_items = num_items\n        self.embedding_dim = embedding_dim\n        self.pooling_method = pooling_method.lower()\n        self.mask_pooling = mask_pooling\n\n        if item_embedding is None:\n            self.item_embedding = nn.Embedding(\n                num_items + 1,  # extra index for unknown/padding\n                embedding_dim,\n                padding_idx=num_items,\n            )\n        else:\n1            self.item_embedding = item_embedding\n\n        if self.pooling_method == \"gru\":\n            self.gru = nn.GRU(embedding_dim, embedding_dim, batch_first=True)\n        elif self.pooling_method == \"mean\":\n            self.gru = None\n        else:\n            raise ValueError(\"Invalid pooling_method. Choose 'gru' or 'mean'.\")\n\n        self.query_fc = nn.Sequential(\n            nn.Linear(embedding_dim, embedding_dim),\n            nn.BatchNorm1d(embedding_dim),\n            nn.Dropout(dropout),\n        )\n\n\n1\n\nIn case we are using a pre-trained item embedding, we can pass it in as an argument to the model.\n\n\nNote that the SoleSequenceRetriever is a variant of the TwoTowerSequenceRetriever, where I remove the user_id embedding from the query tower for the model to rely solely on the sequence of interactions, which can make serving new users much easier.\nOur base class supports both mean pooling and GRU-based pooling for sequence aggregation, making this configurable at training time. This flexibility allows us to experiment with different approaches to combining sequence information.\n\nModel Training\nThe forward pass computes cosine similarity between the query embedding (pooled sequence representation) and candidate embedding, scaled to [0,1] to match our binary labels. This choice of cosine similarity isn’t arbitrary—it aligns with how we’ll serve the model using nearest neighbor search in production, i.e. we perform the exact same similarity computation, just against pre-indexed candidate embeddings rather than individual examples.\n\n\nsrc/sequence/model.py\n\nclass SoleSequenceRetriever(BaseSequenceRetriever):\n    # ...\n\n    def get_query_embeddings(self, inputs: Dict[str, torch.Tensor]) -&gt; torch.Tensor:\n1        item_seq = inputs.get(\"item_seq\")\n        if item_seq is None:\n            raise ValueError(\"Missing required input key: 'item_seq'\")\n        item_seq = self.replace_neg_one_with_padding(item_seq)\n        mask = item_seq != self.item_embedding.padding_idx\n        seq_embeds = self.item_embedding(item_seq)\n        # Pool the sequence; the method will decide whether to use the mask based on self.mask_pooling\n        seq_rep = self.pool_sequence(seq_embeds, mask)\n        query_embedding = self.query_fc(seq_rep)\n        return F.normalize(query_embedding, p=2, dim=1)\n\n    def forward(self, inputs):\n        query_embedding = self.get_query_embeddings(inputs)      \n        candidate_embedding = self.get_candidate_embeddings(inputs)  \n        \n        query_embedding = F.normalize(query_embedding, p=2, dim=1)\n        candidate_embedding = F.normalize(candidate_embedding, p=2, dim=1)\n        cos_sim = torch.sum(query_embedding * candidate_embedding, dim=1)\n        \n        return (cos_sim + 1) / 2  # Scale to [0,1] since cosine similarity is in [-1, 1]\n\n\n1\n\nNote how we only need the item_seq from the inputs dict. This handles the cold start problem—new users immediately get meaningful recommendations based solely on their current session, without needing historical preference data.\n\n\n\nMask Pooling\nOne challenge we need to address: variable sequence lengths. In practice, users have different numbers of interactions—some might have browsed 3 books, others 15. To batch these sequences efficiently for training, we need to pad shorter sequences to a fixed length. We do this by filling empty positions with a special padding token (typically -1).\nThis is where masked pooling becomes essential. Without masking, our pooling operations would include these padding tokens in their calculations, diluting the actual sequence representation. For mean pooling, averaging real embeddings with padding embeddings would give us a less meaningful representation. For GRU pooling, the model might learn spurious patterns from the padding tokens.\nBy implementing masked pooling, we tell the model to ignore these -1 padding tokens during sequence aggregation. The mask ensures that only genuine user interactions contribute to the final sequence representation, preserving the integrity of the learned patterns.\n\n\nsrc/sequence/model.py\n\nclass SoleSequenceRetriever(BaseSequenceRetriever):\n    # ...\n\n    def pool_sequence(self, seq_embeds: torch.Tensor, mask: torch.Tensor = None) -&gt; torch.Tensor:\n        if self.mask_pooling and mask is not None:\n            if self.pooling_method == \"gru\":\n                lengths = mask.sum(dim=1).clamp(min=1)\n                packed_seq = nn.utils.rnn.pack_padded_sequence(\n                    seq_embeds, lengths.cpu(), batch_first=True, enforce_sorted=False\n                )\n                _, hidden_state = self.gru(packed_seq)\n                return hidden_state.squeeze(0)\n            elif self.pooling_method == \"mean\":\n                mask_float = mask.unsqueeze(-1).float()\n                sum_embeds = (seq_embeds * mask_float).sum(dim=1)\n                count = mask_float.sum(dim=1).clamp(min=1)\n                return sum_embeds / count\n\nAs with other ideas, feel free to experiment with using masked pooling or not. It may seem sound but not always lead to noticeable improvements.\n\n\nTraining Loop\nThe training function uses binary cross-entropy loss against our positive/negative samples. We use PyTorch Lightning to leverage its built-in training loop, logging capabilities and integration with MLflow instead of implementing ourselves3.\n\n\nsrc/sequence/trainer.py\n\nclass LitSequenceRetriever(L.LightningModule):\n    # ...\n\n    def training_step(self, batch, batch_idx):\n        # Get model's predictions\n        predictions = self.model({\n            \"user_ids\": batch[\"user\"],\n            \"item_seq\": batch[\"item_sequence\"], \n            \"candidate_items\": batch[\"item\"]\n        })\n        \n        # Compare to actual user behavior\n        labels = batch[\"rating\"].float()\n        loss = nn.BCELoss()(predictions, labels)\n        \n        # This loss drives the learning process\n        return loss\n\n\n\nPreparing PyTorch Datasets\nPyTorch models work best with PyTorch datasets. Our UserItemRatingDFDataset class handles the conversion from pandas DataFrames to PyTorch tensors:\n\n\nsrc/dataset.py\n\nclass UserItemRatingDFDataset(Dataset):\n    def __init__(self, df, user_col: str, item_col: str, rating_col: str, timestamp_col: str):\n        self.df = df.assign(\n            **{rating_col: (df[rating_col] / MAX_RATING).astype(np.float32)}  # Normalize rating to [0,1]\n        )\n    \n    def __getitem__(self, idx):\n        return dict(\n            user=torch.as_tensor(self.df[self.user_col].iloc[idx]),\n            item=torch.as_tensor(self.df[self.item_col].iloc[idx]),\n            rating=torch.as_tensor(self.df[self.rating_col].iloc[idx]),\n            item_sequence=torch.tensor(self.df[\"item_sequence\"].iloc[idx], dtype=torch.long),\n        )\n\nThis dataset is then wrapped into a PyTorch DataLoader for batching and shuffling.\ntrain_loader = DataLoader(\n    train_dataset,\n    batch_size=batch_size,\n    shuffle=True,\n    num_workers=2,\n)"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#training-objectives-and-loss-functions",
    "href": "projects/implement-recsys/c5/index.html#training-objectives-and-loss-functions",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Training Objectives and Loss Functions",
    "text": "Training Objectives and Loss Functions\nOur model uses cosine similarity between query and candidate embeddings, scaled to [0, 1] as the output of its forward pass. This by design treats recommendation as a similarity learning problem—the model learns to map similar user-sequence contexts and relevant items to nearby points in the embedding space. It also matches how we use the model at serving (similarity lookup a candidate vector index).\n\n\nsrc/sequence/model.py\n\nfrom torch import nn\nimport torch.nn.functional as F\n\nclass SoleSequenceRetriever(BaseSequenceRetriever):\n    # ...\n\n    def forward(self, inputs: Dict[str, torch.Tensor]) -&gt; torch.Tensor:\n        \"\"\"Pseudo code for the forward pass\n        \"\"\"\n        query_embedding = self.get_query_embeddings(inputs)\n        candidate_embedding = self.get_candidate_embeddings(inputs)\n        \n        # Normalize embeddings\n        query_embedding = F.normalize(query_embedding, p=2, dim=1)\n        candidate_embedding = F.normalize(candidate_embedding, p=2, dim=1)\n        cos_sim = torch.sum(query_embedding * candidate_embedding, dim=1)\n        \n        # Scale cosine similarity from [-1, 1] to [0, 1]\n        return (cos_sim + 1) / 2\n\nThis forward pass output is then compared to the label to compute the loss. The gradient computation and backpropagation are handled by PyTorch Lightning and PyTorch automatically.\n\n\nsrc/sequence/trainer.py\n\nclass LitSequenceRetriever(L.LightningModule):\n    # ...\n\n    def training_step(self, batch, batch_idx):\n        input_user_ids = batch[\"user\"]\n        input_item_ids = batch[\"item\"]\n        input_item_sequences = batch[\"item_sequence\"]\n\n        labels = batch[\"rating\"].float()\n        predictions = self.model(\n            {\n                \"user_ids\": input_user_ids,\n                \"item_seq\": input_item_sequences,\n                \"candidate_items\": input_item_ids,\n            }\n        ).view(labels.shape)\n\n        loss_fn = nn.BCELoss()\n        loss = loss_fn(predictions, labels)\n\n        self.log(\n            \"train_loss\",\n            loss,\n            on_epoch=True,\n            prog_bar=True,\n            logger=True,\n            sync_dist=True,\n        )\n        return loss"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#preparing-pytorch-datasets",
    "href": "projects/implement-recsys/c5/index.html#preparing-pytorch-datasets",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Preparing PyTorch Datasets",
    "text": "Preparing PyTorch Datasets\nPyTorch models work best with PyTorch datasets. Our UserItemRatingDFDataset class handles the conversion from pandas DataFrames to PyTorch tensors:\n\n\nsrc/dataset.py\n\nclass UserItemRatingDFDataset(Dataset):\n    def __init__(self, df, user_col: str, item_col: str, rating_col: str, timestamp_col: str):\n        self.df = df.assign(\n            **{rating_col: (df[rating_col] / MAX_RATING).astype(np.float32)}  # Normalize rating to [0,1]\n        )\n    \n    def __getitem__(self, idx):\n        return dict(\n            user=torch.as_tensor(self.df[self.user_col].iloc[idx]),\n            item=torch.as_tensor(self.df[self.item_col].iloc[idx]),\n            rating=torch.as_tensor(self.df[self.rating_col].iloc[idx]),\n            item_sequence=torch.tensor(self.df[\"item_sequence\"].iloc[idx], dtype=torch.long),\n        )\n\nThis dataset is then wrapped into a PyTorch DataLoader for batching and shuffling.\ntrain_loader = DataLoader(\n    train_dataset,\n    batch_size=batch_size,\n    shuffle=True,\n    num_workers=2,\n)\n\nKey Training Features\nAutomatic Metric Logging: ROC-AUC and PR-AUC are computed and logged automatically.\nLearning Rate Scheduling: We use ReduceLROnPlateau to adapt the learning rate based on validation loss:\ndef configure_optimizers(self):\n    optimizer = torch.optim.Adam(self.model.parameters(), lr=self.learning_rate, weight_decay=self.l2_reg)\n    scheduler = {\n        \"scheduler\": torch.optim.lr_scheduler.ReduceLROnPlateau(\n            optimizer, mode=\"min\", factor=0.3, patience=2\n        ),\n        \"monitor\": \"val_loss\",\n    }\n    return {\"optimizer\": optimizer, \"lr_scheduler\": scheduler}\nEarly Stopping: Training stops automatically when validation performance plateaus."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#the-challenge-of-deep-learning-model-debugging",
    "href": "projects/implement-recsys/c5/index.html#the-challenge-of-deep-learning-model-debugging",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "The Challenge of Deep Learning Model Debugging",
    "text": "The Challenge of Deep Learning Model Debugging\nDeep learning models are notoriously difficult to debug. Unlike traditional algorithms where you can trace through logic step by step, neural networks are complex compositions of matrix operations that can fail in subtle ways.\n\nOur Testing Strategy\nBefore training on real data, we implement rigorous testing with mock data:\n# Mock data for testing\ndef create_mock_data():\n    num_users, num_items = 100, 50\n    batch_size = 16\n    \n    mock_inputs = {\n        \"user_ids\": torch.randint(0, num_users, (batch_size,)),\n        \"item_seq\": torch.randint(-1, num_items, (batch_size, 10)),  # Include padding (-1)\n        \"candidate_items\": torch.randint(0, num_items, (batch_size,))\n    }\n    return mock_inputs\n\n# Test model forward pass\nmodel = TwoTowerSequenceRetriever(num_users=100, num_items=50, embedding_dim=32)\nmock_inputs = create_mock_data()\noutput = model(mock_inputs)\nassert output.shape == (16,), f\"Expected shape (16,), got {output.shape}\"\n\n\nOverfitting Tests\nA healthy model should be able to perfectly overfit a small training set. If it can’t, there’s likely a bug in the implementation:\n\n\n\n\nPlaceholder: Screenshot of overfitting test results showing training loss decreasing to near zero"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#training-loop-implementation-with-pytorch-lightning",
    "href": "projects/implement-recsys/c5/index.html#training-loop-implementation-with-pytorch-lightning",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Training Loop Implementation with PyTorch Lightning",
    "text": "Training Loop Implementation with PyTorch Lightning\nWe use PyTorch Lightning to streamline our training pipeline. Our LitSequenceRetriever class handles the training logic:\nclass LitSequenceRetriever(L.LightningModule):\n    def __init__(self, model: BaseSequenceRetriever, learning_rate: float = 0.001, ...):\n        super().__init__()\n        self.model = model\n        self.learning_rate = learning_rate\n        # Initialize metrics\n        self.val_roc_auc_metric = AUROC(task=\"binary\")\n        self.val_pr_auc_metric = AveragePrecision(task=\"binary\")\n    \n    def training_step(self, batch, batch_idx):\n        predictions = self.model({\n            \"user_ids\": batch[\"user\"],\n            \"item_seq\": batch[\"item_sequence\"],\n            \"candidate_items\": batch[\"item\"]\n        })\n        \n        loss_fn = self._get_loss_fn()\n        loss = loss_fn(predictions, batch[\"rating\"].float())\n        self.log(\"train_loss\", loss, on_epoch=True, prog_bar=True)\n        return loss\n\nKey Training Features\nAutomatic Metric Logging: ROC-AUC and PR-AUC are computed and logged automatically.\nLearning Rate Scheduling: We use ReduceLROnPlateau to adapt the learning rate based on validation loss:\ndef configure_optimizers(self):\n    optimizer = torch.optim.Adam(self.model.parameters(), lr=self.learning_rate, weight_decay=self.l2_reg)\n    scheduler = {\n        \"scheduler\": torch.optim.lr_scheduler.ReduceLROnPlateau(\n            optimizer, mode=\"min\", factor=0.3, patience=2\n        ),\n        \"monitor\": \"val_loss\",\n    }\n    return {\"optimizer\": optimizer, \"lr_scheduler\": scheduler}\nEarly Stopping: Training stops automatically when validation performance plateaus."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#batch-processing-for-sequences",
    "href": "projects/implement-recsys/c5/index.html#batch-processing-for-sequences",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Batch Processing for Sequences",
    "text": "Batch Processing for Sequences\nSequence models require careful attention to batching. Our implementation handles variable-length sequences through padding and masking:\n\n\n\n\nPlaceholder: Diagram showing how variable-length sequences are padded and masked for batch processing\n\n\n\n# From the notebook execution\nbatch_size = cfg.train.batch_size  # 128\nsequence_length = cfg.train.sequence.sequence_length  # 10\n\ntrain_dataset = UserItemRatingDFDataset(\n    train_neg_df,\n    user_col=\"user_indice\", \n    item_col=\"item_indice\",\n    rating_col=cfg.data.rating_col,\n    timestamp_col=cfg.data.timestamp_col,\n)\n\ntrain_loader = DataLoader(\n    train_dataset,\n    batch_size=batch_size,\n    shuffle=True,\n    num_workers=2,\n)"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#integration-with-mlflow-for-experiment-tracking",
    "href": "projects/implement-recsys/c5/index.html#integration-with-mlflow-for-experiment-tracking",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Integration with MLflow for Experiment Tracking",
    "text": "Integration with MLflow for Experiment Tracking\nEvery training run is automatically logged to MLflow through our configuration system:\ncfg = ConfigLoader(\"../cfg/common.yaml\")\ncfg.run.run_name = \"002-sequence-retriever-gru\"\ncfg.run.experiment_name = \"Retrieve - Binary\"\ncfg.init()  # Automatically sets up MLflow logging\nThe Lightning module helps us automatically log:\n\nTraining metrics: Loss, learning rate, weight norms\nValidation metrics: ROC-AUC, PR-AUC, ranking metrics\nModel artifacts: Best model checkpoints\nConfiguration: All hyperparameters and settings\n\nWhile the model is training, we can observe how it converges and how it performs on the validation set:"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#model-evaluation-and-comparison",
    "href": "projects/implement-recsys/c5/index.html#model-evaluation-and-comparison",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Model Evaluation and Comparison",
    "text": "Model Evaluation and Comparison\nAfter training, our system automatically evaluates both classification and ranking performance:\ndef on_fit_end(self):\n    # Load best model checkpoint\n    if self.checkpoint_callback:\n        self.model = LitSequenceRetriever.load_from_checkpoint(\n            self.checkpoint_callback.best_model_path, model=self.model\n        ).model\n    \n    # Evaluate on validation set\n    self._log_classification_metrics()\n    if self.evaluate_ranking:\n        self._log_ranking_metrics()\n\nRanking Evaluation\nFor ranking evaluation, we generate recommendations for each user and compare against ground truth:\n\n\n\n\nPlaceholder: Screenshot of ranking evaluation results showing NDCG@K, Recall@K, Precision@K metrics\n\n\n\nThe evaluation framework uses our existing utilities from Chapter 4:\n# Generate recommendations\nrecommendations = self.model.recommend(rec_inputs, k=top_k_retrieve, batch_size=4)\nrecommendations_df = pd.DataFrame(recommendations).pipe(create_rec_df, idm, user_col, item_col)\n\n# Create ground truth labels\nlabel_df = create_label_df(val_df, user_col, item_col, rating_col, timestamp_col)\n\n# Merge and evaluate\neval_df = merge_recs_with_target(recommendations_df, label_df, k=top_k_retrieve, user_col, item_col, rating_col)"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#model-registry-and-versioning",
    "href": "projects/implement-recsys/c5/index.html#model-registry-and-versioning",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Model Registry and Versioning",
    "text": "Model Registry and Versioning\nAs mentioned earlier, MLflow does not only help us track the training process but also provides a model registry for version management. After training, we can easily log the output artifacts to MLflow, while including a quality gate to ensure that only models that exceed minimum performance thresholds get registered:\n# Automatic model registration after successful training\nif val_roc_auc &gt; cfg.eval.min_roc_auc:\n    # Register model as new version\n    mlflow.pytorch.log_model(\n        model, \n        cfg.train.retriever.mlf_model_name,\n        registered_model_name=cfg.train.retriever.mlf_model_name\n    )\n    \n    # Tag as champion if performance exceeds threshold\n    if val_roc_auc &gt; champion_threshold:\n        client.set_registered_model_alias(\n            cfg.train.retriever.mlf_model_name, \n            \"champion\", \n            latest_version\n        )"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#results-and-performance-analysis",
    "href": "projects/implement-recsys/c5/index.html#results-and-performance-analysis",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Results and Performance Analysis",
    "text": "Results and Performance Analysis\nLet’s examine the performance of our sequence model compared to the popularity baseline:\n\n\n\n\nPlaceholder: Comparison chart showing sequence model vs baseline performance across different metrics\n\n\n\nTypical improvements we observe:\n\nROC-AUC: 0.73-0.78 (vs 0.65 for popularity baseline)\nNDCG@10: 0.15-0.25 (vs 0.05 for baseline)\n\nPersonalization: 0.85-0.95 (vs 0.0 for baseline)\n\nThe sequence model shows significant improvements in both classification accuracy and ranking quality, while also providing truly personalized recommendations.\n\nTraining Dynamics\n\n\n\n\nPlaceholder: Training curves showing loss, ROC-AUC, and learning rate over epochs\n\n\n\nTypical training patterns:\n\nConvergence: Usually within 10-20 epochs with early stopping\nLearning rate adaptation: Automatic reduction when validation loss plateaus\nStability: Consistent performance across multiple training runs"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#sequence-length-and-architecture-ablations",
    "href": "projects/implement-recsys/c5/index.html#sequence-length-and-architecture-ablations",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Sequence Length and Architecture Ablations",
    "text": "Sequence Length and Architecture Ablations\nOur framework makes it easy to experiment with different configurations:\n# Configuration options in cfg/common.yaml\ntrain:\n  sequence:\n    sequence_length: 10  # Experiment with 5, 10, 20\n  embedding_dim: 128     # Try 64, 128, 256\n  dropout: 0.0          # Test 0.0, 0.1, 0.2\n  l2_reg: 1e-05         # Regularization strength\n\nSequence Length Impact\n\nShort sequences (5): Faster training, less context\nMedium sequences (10): Good balance of context and efficiency\n\nLong sequences (20): More context but diminishing returns\n\n\n\nPooling Method Comparison\nOur factory pattern makes it easy to compare different approaches:\n# Mean pooling - simple and fast\nmodel = SequenceRetrieverFactory.create_retriever(\n    \"TwoTowerSequenceRetriever\",\n    pooling_method=\"mean\",\n    **other_params\n)\n\n# GRU pooling - captures sequential patterns\nmodel = SequenceRetrieverFactory.create_retriever(\n    \"TwoTowerSequenceRetriever\", \n    pooling_method=\"gru\",\n    **other_params\n)"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#understanding-model-embeddings",
    "href": "projects/implement-recsys/c5/index.html#understanding-model-embeddings",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Understanding Model Embeddings",
    "text": "Understanding Model Embeddings\nAfter training, we can examine what the model has learned by analyzing the embedding space:\n\n\n\n\nPlaceholder: t-SNE or UMAP visualization of item embeddings showing clusters of related books\n\n\n\nCommon patterns we observe:\n\nGenre clustering: Similar books cluster together\nAuthor proximity: Books by the same author are often nearby\nSeries grouping: Books in a series form tight clusters"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#deployment-considerations",
    "href": "projects/implement-recsys/c5/index.html#deployment-considerations",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Deployment Considerations",
    "text": "Deployment Considerations\nOur two-tower architecture is designed for efficient production deployment:\n\nCandidate Embeddings\n# Extract all item embeddings for vector database storage\nall_item_ids = torch.arange(num_items)\ncandidate_inputs = {\"candidate_items\": all_item_ids}\ncandidate_embeddings = model.get_candidate_embeddings(candidate_inputs)\n\n\nReal-time Query Processing\n```"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#recap",
    "href": "projects/implement-recsys/c5/index.html#recap",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Recap",
    "text": "Recap\nIn this chapter, we achieved a major milestone in our recommendation system journey—transitioning from simple heuristic-based approaches to personalized machine learning models that capture temporal patterns in user behavior. Here’s what we accomplished:\nFrom Theory to Practice:\n\nWhy sequence modeling matters: We established that traditional collaborative filtering misses the crucial story hidden in the order and timing of user interactions. By modeling sequences, we can distinguish between users who follow structured learning paths versus those who jump between topics randomly.\nReal-time adaptation and cold start solutions: We demonstrated how sequence-based models solve two critical RecSys challenges. New users get personalized recommendations from their very first interaction, and the model adapts immediately to changing user interests without requiring retraining.\n\nArchitectural Decisions:\n\nTwo-tower retrieval architecture: We chose a retrieval-focused approach over end-to-end ranking, enabling fast candidate selection from millions of items while maintaining millisecond-level response times.\nSession-only modeling: By building a “SoleSequenceRetriever” that relies entirely on interaction sequences without user embeddings, we prioritized adaptability and simplified serving infrastructure while solving cold start problems elegantly.\n\nTechnical Implementation:\n\nMasked pooling for variable sequences: We addressed the practical challenge of variable-length user sessions by implementing masked pooling that ignores padding tokens during sequence aggregation.\nCosine similarity alignment: Our training objective uses the same cosine similarity computation as production serving, ensuring consistency between offline training and online inference.\nPyTorch Lightning integration: We leveraged Lightning’s capabilities for training loops, distributed training, and automatic MLflow integration, avoiding the complexity of custom implementations.\n\nValidation and Results:\n\nSubstantial performance improvements: Our sequence-based retriever achieved 197% improvement in Recall@100 and 280% improvement in Recall@10 compared to the popularity baseline, demonstrating that temporal patterns contain meaningful signals for recommendations.\nMLflow model registry: We established automated model versioning with quality gates, ensuring only models exceeding minimum performance thresholds get registered for potential deployment.\n\nThis sequence-based retriever represents a complete, deployable recommendation system that can serve personalized suggestions in real-time. More importantly, it provides a solid foundation for future enhancements—whether adding a downstream ranking layer or incorporating additional features like item content or user demographics.\n\n\n\n\n\n\nCode\n\n\n\nAll code for this chapter is available in the notebooks/011-sequence-modeling.ipynb file and the src/sequence/ directory in the project repository."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#whats-next",
    "href": "projects/implement-recsys/c5/index.html#whats-next",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "What’s Next?",
    "text": "What’s Next?\nWith our sequence-based retrieval model performing strongly, we have several exciting directions for future development:\nShort-term enhancements could include experimenting with Transformer-based pooling for better long-range dependency modeling, incorporating item content features to improve cold-start item recommendations, or implementing more sophisticated negative sampling strategies like hard negative mining.\nMedium-term evolution might involve building the ranking layer on top of our retrieval system, implementing online learning capabilities for real-time model adaptation, or adding multi-armed bandit strategies for exploration-exploitation balance.\nProduction deployment considerations include setting up the vector database infrastructure for candidate indexing, implementing real-time serving APIs, and establishing A/B testing frameworks for online evaluation.\nIn Chapter 6, we will continue our journey to build an end-to-end recommendation system by preparing the offline computation and online serving infrastructure, e.g. MLflow, Redis, Qdrant. The focus would shift a bit towards platform/infrastructure, but we only touch upon how we set them up locally so hopefully it should not be too much of a stretch.\nContinue to the next chapter.\n\n If you find this tutorial helpful, please cite this writeup as:\n\nQuy, Dinh. (May 2025). Implement a RecSys, Chapter 5: Session-based Recommendation Model. dvquys.com. https://dvquys.com/projects/implement-recsys/c5/."
  },
  {
    "objectID": "projects/implement-recsys/series-index.html",
    "href": "projects/implement-recsys/series-index.html",
    "title": "DvQ",
    "section": "",
    "text": "List of chapters\n\n\n\n\n\n\nChapter 1: Introduction and Project Overview\n\nChapter 2: Understanding the Data and Feature Engineering\n\nChapter 3: Negative Sampling\n\nChapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation\n\nChapter 5: Session-based Recommendation Model"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#footnotes",
    "href": "projects/implement-recsys/c5/index.html#footnotes",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nThe beauty of neural network-based approaches is that they offer flexibility to design an architecture that combines and best captures from multiple sources of signals.↩︎\nIf you don’t recall anything about king and queen… Well, yeah, cause I didn’t say anything about that (LOL). But I would assume if you read any random article about Word2Vec, you would run into this famous analogy.↩︎\nOn the other hand, it’s not entirely wrong if you think I’m just a lazy guy who doesn’t want to deal with the missing of user embedding for new users.↩︎\nI still remember how frustrating it was trying to implement DDP (Distributed Data Parallel) training loop with pure PyTorch. After figuring out that Lightning does not only handle that elegently but also has a lot of other features that I would have to implement myself, I never looked back.↩︎"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#retrieval-vs-ranking",
    "href": "projects/implement-recsys/c5/index.html#retrieval-vs-ranking",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Retrieval vs Ranking",
    "text": "Retrieval vs Ranking\nWhile the main task is still to rank the most relevant and likely-to-be-interacted items on top, in reality it’s not uncommon that we need to deal with ranking for millions of items. Training a scoring model that takes into account each instance of &lt;user, context, item&gt; and uses it from the start is not feasible because of latency constraints. Calling that model to give fine-grained scores to all millions of items would take forever, and neither our users have that kind of patience nor do we as engineers find that idea sane.\n\nThe Two-Phase Architecture\nTo deal with this problem, we break the whole ranking process into two phases: first we quickly retrieve a shortlist of candidates from millions of items, then we use a fine-grained ranker to give the final ranking on the shortlist.\nThe difference in naming between these two phases already reveals their distinct characteristics. The retrieval phase needs to quickly scan millions of items to find about 1,000 potential candidates in milliseconds. This speed requirement means it cannot use complex input features and often needs to leverage indexing structures like vector databases for fast similarity search. The focus here is on recall—ensuring that relevant items make it into the candidate set, even if the initial scoring isn’t perfect.\nThe ranking phase operates under very different constraints. With bandwidth and a much more limited scope of hundreds to thousands of items, it can afford to adopt many more signals and complex features into its model. This phase delivers much better fine-grained scores for final ordering, focusing on precision—getting the order exactly right among the candidates that have already been deemed potentially relevant.\n\n\n\n\nYan, Ziyou. (Jun 2021). System Design for Recommendations and Search.\n\n\n\n\n\nRetrieval as a Standalone System\nOne important thing to note: most of the time the retrieval phase gives back candidates with their own scores, which indicates to some extent how well the candidates match the query. Since they are scores, we can already use them to rank the candidates and provide recommendations to users.\nThis allows us to approach building recommendation systems in an incremental manner. In most of my RecSys projects, I start with building and deploying the retrieval model as the first version. The idea is to get both early impact and actual feedback from users interacting with our recommendations. This user feedback becomes a much better source of labeling signals to train our later ranking model on.\nThis approach offers several advantages. First, you get a working system deployed quickly, enabling faster time to impact rather than waiting months to build a complex multi-stage system. More importantly, you start collecting actual interaction data from users engaging with your recommendations, rather than relying solely on historical patterns. This real user feedback becomes invaluable—it’s a much richer source of labeling signals for training your later ranking model than any offline evaluation could provide.\nFinally, it allows you to build the serving and monitoring infrastructure in phases, learning how to handle recommendation traffic, monitor model performance, and debug issues at a manageable scale before introducing the additional complexity of a ranking layer.\n\n\nOur Two-Tower Retriever\nIn that spirit, the implementation of our sequential recommendation model in this series is a retrieval-based one. It follows a typical Two Tower architecture, where the query tower embeds information about the user and context—in our case, the user’s sequence of interactions—while the candidate tower represents the candidate items.\nThis separation is crucial for efficient serving. The candidate tower can precompute embeddings for all items and store them in a vector index. The query tower only needs to run at request time to generate the user’s current context embedding.\n\n\n\nTraining Setup\nThe labels for training come from our preparation in previous chapters. We create positive instances from &lt;user, context, item&gt; tuples which have actual interaction records in the past, while negative examples are sampled from the unseen item space for each user-context pair. This creates a binary classification problem where the model learns to distinguish between items a user would interact with versus items they would ignore.\n\n\nServing Architecture\nFor serving, our retrieval system works in two phases. First, in an offline process, we index all candidate item embeddings in a nearest neighbor vector search system. Then, during online serving, we send the &lt;user, context&gt; as input to the query tower to get a query embedding vector, use similarity lookup to search for the nearest candidate neighbors in the index, and return the corresponding items with their similarity scores.\nThis architecture enables sub-100ms response times even when searching through millions of items, making it practical for recommendation serving.\nAgain, the beauty of this approach is that it’s both a complete recommendation system on its own and a foundation for more sophisticated ranking models. You can deploy it immediately to start serving personalized recommendations, then later add a ranking layer on top without changing the underlying retrieval infrastructure."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#how-the-model-learns-from-data",
    "href": "projects/implement-recsys/c5/index.html#how-the-model-learns-from-data",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "How The Model Learns From Data",
    "text": "How The Model Learns From Data\nAt this point, every user sequence gets converted into a point in space (the query embedding), and every book also becomes a point in space (the candidate embedding). The model’s job is to learn how to position these points so that sequences and books that go well together end up close to each other.\nWe measure “closeness” using cosine similarity—essentially the angle between two vectors in this embedding space. When the model processes a training example, it computes how similar the user’s sequence embedding is to the candidate book’s embedding, then scales this similarity to a number between 0 and 1. This becomes the model’s prediction of how likely the user is to interact with that book.\n\n\nsrc/sequence/model.py\n\n# Simplified forward pass\ndef forward(self, inputs):\n    query_embedding = self.get_query_embeddings(inputs)      # User sequence → vector\n    candidate_embedding = self.get_candidate_embeddings(inputs)  # Book → vector\n    \n    # Normalize and compute similarity\n    query_embedding = F.normalize(query_embedding, p=2, dim=1)\n    candidate_embedding = F.normalize(candidate_embedding, p=2, dim=1)\n    cos_sim = torch.sum(query_embedding * candidate_embedding, dim=1)\n    \n    return (cos_sim + 1) / 2  # Scale to [0,1]\n\nBut here’s where the learning happens. When the model makes a prediction, we compare it against reality—did the user actually interact with this book or not? If the model predicted high similarity for a book the user ignored, that’s a mistake. If it predicted low similarity for a book the user loved, that’s also a mistake. The bigger the mistake, the stronger the learning signal.\nThe training process uses these mistakes to nudge the embeddings in better directions. If a sequence like “Python Programming → Machine Learning” should be close to “Deep Learning with PyTorch” but currently isn’t, the optimization algorithm will gradually move these points closer together in the embedding space. Over thousands of training examples, the model learns to create a geography where related concepts cluster together.\n\n\nsrc/sequence/trainer.py\n\ndef training_step(self, batch, batch_idx):\n    # Get model's predictions\n    predictions = self.model({\n        \"user_ids\": batch[\"user\"],\n        \"item_seq\": batch[\"item_sequence\"], \n        \"candidate_items\": batch[\"item\"]\n    })\n    \n    # Compare to actual user behavior\n    labels = batch[\"rating\"].float()\n    loss = nn.BCELoss()(predictions, labels)\n    \n    # This loss drives the learning process\n    return loss\n\nThe beautiful thing about this approach is that it aligns perfectly with how we’ll use the model in production. At serving time, we’ll do exactly the same similarity lookup—just against millions of pre-computed book embeddings stored in a vector database."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#model-implementation",
    "href": "projects/implement-recsys/c5/index.html#model-implementation",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Model Implementation",
    "text": "Model Implementation\nNow let’s translate the two-tower architecture into concrete code. But first, let me explain a key design decision that shapes our implementation.\n\nThe Case for Session-Only Models\nTraditional two-tower retrievers include both user embeddings and sequence representations in the query tower. But I’ve chosen to build what I call a “SoleSequenceRetriever”—a model that relies entirely on the sequence of interactions, without any user-specific embeddings.\nThis isn’t just a technical choice; it’s a strategic one3 that fundamentally changes how the model behaves. By removing user embeddings, we’re making a bet that the sequence itself contains enough signal to make good recommendations. A user browsing “Python Programming → Machine Learning → Data Analysis” tells us more about their immediate intent than knowing they’re “User #47832” with some historical preference profile.\nThis approach solves several practical problems. New users get meaningful recommendations from their very first interaction—no cold start period where they see generic popular items. The model becomes more adaptive to changing interests since it’s not anchored to historical user preferences. And operationally, serving becomes simpler since we don’t need to manage user embedding lookups or worry about user ID mapping issues.\nThe trade-off, of course, is that we lose the ability to capture stable, long-term user preferences that might not be evident in a short session. But for the purpose of this project and the fact that we can always extend the model later, this trade-off is worth it.\n\n\nCore Architecture\nWith that context, let’s look at our implementation. The core is simple and straightforward.\n\n\nsrc/sequence/model.py\n\nclass SoleSequenceRetriever(BaseSequenceRetriever):\n    def __init__(\n        self,\n        num_items: int,\n        embedding_dim: int,\n        pooling_method: str = \"mean\",\n        dropout: float = 0.2,\n        mask_pooling: bool = True,\n    ):\n        self.num_items = num_items\n        self.embedding_dim = embedding_dim\n        self.pooling_method = pooling_method.lower()\n        self.mask_pooling = mask_pooling\n\n        if item_embedding is None:\n            self.item_embedding = nn.Embedding(\n                num_items + 1,  # extra index for unknown/padding\n                embedding_dim,\n                padding_idx=num_items,\n            )\n        else:\n1            self.item_embedding = item_embedding\n\n        if self.pooling_method == \"gru\":\n            self.gru = nn.GRU(embedding_dim, embedding_dim, batch_first=True)\n        elif self.pooling_method == \"mean\":\n            self.gru = None\n        else:\n            raise ValueError(\"Invalid pooling_method. Choose 'gru' or 'mean'.\")\n\n        self.query_fc = nn.Sequential(\n            nn.Linear(embedding_dim, embedding_dim),\n            nn.BatchNorm1d(embedding_dim),\n            nn.Dropout(dropout),\n        )\n\n\n1\n\nWe support pre-trained item embeddings, which can be useful if you have embeddings from other models or external sources.\n\n\nThe architecture reflects our key principles. The item embedding layer converts raw item IDs into dense vectors that can capture semantic relationships. The configurable pooling method (mean or GRU) aggregates the sequence into a single representation. The query fully connected layer adds learning capacity while batch normalization and dropout help with generalization.\nNotice what’s not here: any mention of user IDs. The model’s query tower depends entirely on the sequence of items, making it truly session-based.\nOur base class supports both mean pooling and GRU-based pooling for sequence aggregation, making this configurable at training time. This flexibility allows us to experiment with different approaches to combining sequence information without changing the core architecture."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#model-training",
    "href": "projects/implement-recsys/c5/index.html#model-training",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Model Training",
    "text": "Model Training\nThe forward pass computes cosine similarity between the query embedding (pooled sequence representation) and candidate embedding, scaled to [0,1] to match our binary labels. This choice of cosine similarity isn’t arbitrary—it aligns with how we’ll serve the model using nearest neighbor search in production, i.e. we perform the exact same similarity computation, just against pre-indexed candidate embeddings rather than individual examples.\n\n\nsrc/sequence/model.py\n\nclass SoleSequenceRetriever(BaseSequenceRetriever):\n    # ...\n\n    def get_query_embeddings(self, inputs: Dict[str, torch.Tensor]) -&gt; torch.Tensor:\n1        item_seq = inputs.get(\"item_seq\")\n        if item_seq is None:\n            raise ValueError(\"Missing required input key: 'item_seq'\")\n        item_seq = self.replace_neg_one_with_padding(item_seq)\n        mask = item_seq != self.item_embedding.padding_idx\n        seq_embeds = self.item_embedding(item_seq)\n        # Pool the sequence; the method will decide whether to use the mask based on self.mask_pooling\n        seq_rep = self.pool_sequence(seq_embeds, mask)\n        query_embedding = self.query_fc(seq_rep)\n        return F.normalize(query_embedding, p=2, dim=1)\n\n    def forward(self, inputs):\n        query_embedding = self.get_query_embeddings(inputs)      \n        candidate_embedding = self.get_candidate_embeddings(inputs)  \n        \n        query_embedding = F.normalize(query_embedding, p=2, dim=1)\n        candidate_embedding = F.normalize(candidate_embedding, p=2, dim=1)\n        cos_sim = torch.sum(query_embedding * candidate_embedding, dim=1)\n        \n        return (cos_sim + 1) / 2  # Scale to [0,1] since cosine similarity is in [-1, 1]\n\n\n1\n\nNote how we only need the item_seq from the inputs dict. This handles the cold start problem—new users immediately get meaningful recommendations based solely on their current session, without needing historical preference data.\n\n\n\nMask Pooling\nOne challenge we need to address: variable sequence lengths. In practice, users have different numbers of interactions—some might have browsed 3 books, others 15. To batch these sequences efficiently for training, we need to pad shorter sequences to a fixed length. We do this by filling empty positions with a special padding token (typically -1).\nThis is where masked pooling becomes essential. Without masking, our pooling operations would include these padding tokens in their calculations, diluting the actual sequence representation. For mean pooling, averaging real embeddings with padding embeddings would give us a less meaningful representation. For GRU pooling, the model might learn spurious patterns from the padding tokens.\nBy implementing masked pooling, we tell the model to ignore these -1 padding tokens during sequence aggregation. The mask ensures that only genuine user interactions contribute to the final sequence representation, preserving the integrity of the learned patterns.\n\n\nsrc/sequence/model.py\n\nclass SoleSequenceRetriever(BaseSequenceRetriever):\n    # ...\n\n    def pool_sequence(self, seq_embeds: torch.Tensor, mask: torch.Tensor = None) -&gt; torch.Tensor:\n        if self.mask_pooling and mask is not None:\n            if self.pooling_method == \"gru\":\n                lengths = mask.sum(dim=1).clamp(min=1)\n                packed_seq = nn.utils.rnn.pack_padded_sequence(\n                    seq_embeds, lengths.cpu(), batch_first=True, enforce_sorted=False\n                )\n                _, hidden_state = self.gru(packed_seq)\n                return hidden_state.squeeze(0)\n            elif self.pooling_method == \"mean\":\n                mask_float = mask.unsqueeze(-1).float()\n                sum_embeds = (seq_embeds * mask_float).sum(dim=1)\n                count = mask_float.sum(dim=1).clamp(min=1)\n                return sum_embeds / count\n\nAs with other ideas, feel free to experiment with using masked pooling or not. It may seem sound but not always lead to noticeable improvements.\n\n\nTraining Loop\nThe training function uses binary cross-entropy loss against our positive/negative samples. We use PyTorch Lightning to leverage its built-in training loop, logging capabilities and integration with MLflow instead of implementing ourselves4.\n\n\nsrc/sequence/trainer.py\n\nclass LitSequenceRetriever(L.LightningModule):\n    # ...\n\n    def training_step(self, batch, batch_idx):\n        # Get model's predictions\n        predictions = self.model({\n            \"user_ids\": batch[\"user\"],\n            \"item_seq\": batch[\"item_sequence\"], \n            \"candidate_items\": batch[\"item\"]\n        })\n        \n        # Compare to actual user behavior\n        labels = batch[\"rating\"].float()\n        loss = nn.BCELoss()(predictions, labels)\n        \n        # This loss drives the learning process\n        return loss\n\n\n\nPreparing PyTorch Datasets\nPyTorch models work best with PyTorch datasets. Our UserItemRatingDFDataset class handles the conversion from pandas DataFrames to PyTorch tensors:\n\n\nsrc/dataset.py\n\nclass UserItemRatingDFDataset(Dataset):\n    def __init__(self, df, user_col: str, item_col: str, rating_col: str, timestamp_col: str):\n        self.df = df.assign(\n            **{rating_col: (df[rating_col] / MAX_RATING).astype(np.float32)}  # Normalize rating to [0,1]\n        )\n    \n    def __getitem__(self, idx):\n        return dict(\n            user=torch.as_tensor(self.df[self.user_col].iloc[idx]),\n            item=torch.as_tensor(self.df[self.item_col].iloc[idx]),\n            rating=torch.as_tensor(self.df[self.rating_col].iloc[idx]),\n            item_sequence=torch.tensor(self.df[\"item_sequence\"].iloc[idx], dtype=torch.long),\n        )\n\nThis dataset is then wrapped into a PyTorch DataLoader for batching and shuffling.\ntrain_loader = DataLoader(\n    train_dataset,\n    batch_size=batch_size,\n    shuffle=True,\n    num_workers=2,\n)"
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#results-analysis-why-these-numbers-matter",
    "href": "projects/implement-recsys/c5/index.html#results-analysis-why-these-numbers-matter",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Results Analysis: Why These Numbers Matter",
    "text": "Results Analysis: Why These Numbers Matter\nThe performance gains shown above represent more than just statistical improvements—they translate to meaningful changes in user experience. Let’s break down what these results tell us and why they matter for a retrieval system.\n\nRecall: The Heart of Retrieval Performance\nSince we’re building a retrieval system, recall is our most critical metric. Recall measures what fraction of relevant items we successfully include in our candidate set. In the two-stage retrieval-ranking framework, if our retrieval system misses a relevant item, no amount of sophisticated ranking can fix that—the item is gone forever from the user’s recommendations.\nOur sequence-based model achieves substantial improvements in recall across all evaluation points:\n\nRecall@10: 0.145 vs 0.051 for the popularity baseline (184% improvement)\nRecall@20: 0.211 vs 0.089 (137% improvement)\n\nRecall@50: 0.318 vs 0.176 (80% improvement)\n\nThese improvements mean we’re capturing nearly three times as many relevant items in our top-10 candidates compared to the popularity baseline. In practical terms, this translates to users seeing relevant recommendations much more frequently.\n\n\nThe Precision-Recall Trade-off\nWhile our recall improvements are dramatic, precision shows more modest gains. This is expected and actually desirable for a retrieval system. We want to cast a wider net to ensure we don’t miss relevant items, even if that means including some less relevant candidates. The ranking stage (which we’ll build in future chapters) will handle the precision refinement.\nThe precision numbers show we’re not just randomly expanding our candidate set:\n\nPrecision@10: 0.145 vs 0.051 (still a 184% improvement)\nPrecision@20: 0.106 vs 0.045 (135% improvement)\n\nThe fact that precision improves alongside recall indicates our model is genuinely learning to identify relevant items, not just retrieving more items randomly.\n\n\nNDCG: Ranking Quality Matters Too\nThe NDCG (Normalized Discounted Cumulative Gain) improvements are particularly encouraging for a retrieval system:\n\nNDCG@10: 0.201 vs 0.085 (136% improvement)\nNDCG@20: 0.230 vs 0.106 (117% improvement)\n\nNDCG measures whether we’re putting the most relevant items at the top of our candidate list. These improvements suggest our retrieval system isn’t just finding relevant items—it’s finding them and scoring them appropriately, which will make the downstream ranking stage’s job easier.\n\n\nROC-AUC: Binary Classification Performance\nThe ROC-AUC improvement from 0.66 to 0.78 shows our model is substantially better at the underlying binary classification task of predicting whether a user will interact with an item. This 18% improvement in classification accuracy is the foundation that enables all the other metric improvements.\n\n\nWhat This Means for Users\nThese metric improvements translate to concrete user experience benefits:\nFaster Discovery: With 3x better recall@10, users are much more likely to find relevant items in their first few recommendations, reducing the time spent browsing.\nBetter Cold Start: New users, who would get generic popular items from the baseline, now get personalized recommendations from their very first interaction based on their browsing sequence.\nAdaptive Recommendations: The model adapts in real-time as users browse, something the static popularity baseline simply cannot do.\n\n\nRetrieval System Validation\nMost importantly, these results validate our core hypothesis: that sequence information contains strong signals for recommendation. The dramatic improvements across all metrics suggest that modeling user behavior as sequences rather than static preferences is not just theoretically appealing—it works in practice.\nThe performance gains are particularly impressive given the simplicity of our approach. We’re using basic pooling methods (mean or GRU) on relatively short sequences, yet achieving substantial improvements. This suggests there’s significant room for further optimization as we experiment with more sophisticated architectures or longer sequences."
  },
  {
    "objectID": "projects/implement-recsys/c5/index.html#model-comparison",
    "href": "projects/implement-recsys/c5/index.html#model-comparison",
    "title": "Implement a RecSys, Chapter 5: Session-based Recommendation Model",
    "section": "Model Comparison",
    "text": "Model Comparison\nAfter training, we can compare the performance of our model with the popularity baseline:\n\n\n\nThe results validate our sequence-based approach with substantial improvements across all metrics. Let’s break down what these numbers tell us about our retrieval system’s effectiveness.\n\nRecall: The Heart of Retrieval Performance\nSince we’re building a retrieval system, recall is chosen to be our north-star metric. Recall measures what fraction of relevant items we successfully include in our candidate set. In the two-stage retrieval-ranking framework, if our retrieval system misses a relevant item, no amount of sophisticated ranking can fix that—the item is gone forever from the user’s recommendations.\nOur sequence-based model achieves substantial improvements in recall across evaluation points:\n\nRecall@100: 0.186 vs 0.062 (197% improvement)\nRecall@10: 0.038 vs 0.01 for the popularity baseline (280% improvement)\n\nThese numbers tell two important stories. The recall@100 improvement shows we’re nearly doubling our ability to capture relevant items in a typical retrieval candidate set. This is crucial for the downstream ranking stage—we’re giving it much better raw material to work with.\nThe recall@10 improvement is equally significant but for a different reason. When we deploy this retrieval system as a standalone recommender (without a ranking stage), users see these top-10 results directly. A 280% improvement means users are nearly three times more likely to find something relevant in their immediate recommendations.\n\n\nRanking Quality Validation\nThe significant improvements in NDCG ranking metrics provide additional validation: NDCG@10: 0.018 vs 0.005 (360% improvement). NDCG measures whether we’re putting the most relevant items at the top of our candidate list. This improvement suggests our retrieval system isn’t just finding relevant items—it’s finding them and scoring them appropriately.\nThis ranking quality matters regardless of whether we add a downstream ranking stage. If we deploy the retrieval system directly, users get better-ordered recommendations. If we add ranking later, we’re providing the ranking model with better-scored candidates to work with.\n\n\nWhat This Means for Users\nThese metric improvements translate to concrete user experience benefits:\nImmediate Impact: Users are 3x more likely to find relevant items in their top recommendations, dramatically reducing the time spent browsing through irrelevant suggestions.\nBetter Cold Start: New users get personalized recommendations from their very first interaction, eliminating the typical cold start period of generic popular items.\nSystem Flexibility: The improved candidate quality gives us options—we can deploy this as a complete recommendation system now, or use it as a strong foundation for a more sophisticated ranking stage later.\nThe results demonstrate that sequence modeling captures meaningful patterns in user behavior that static approaches miss entirely."
  }
]