<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>DvQ</title>
<link>https://dvquys.com/</link>
<atom:link href="https://dvquys.com/index.xml" rel="self" type="application/rss+xml"/>
<description>DvQ Personal Website</description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Sat, 31 May 2025 16:00:00 GMT</lastBuildDate>
<item>
  <title>Implement a RecSys, Chapter 6: Preparing for Serving</title>
  <link>https://dvquys.com/projects/implement-recsys/c6/</link>
  <description><![CDATA[ 





<p>This is the <strong>sixth chapter</strong> of the tutorial series: Implement a RecSys.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
List of chapters
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../c1/index.html">Chapter 1: Introduction and Project Overview</a><br>
</li>
<li><a href="../c2/index.html">Chapter 2: Understanding the Data and Feature Engineering</a><br>
</li>
<li><a href="../c3/index.html">Chapter 3: Negative Sampling</a><br>
</li>
<li><a href="../c4/index.html">Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation</a><br>
</li>
<li><a href="../c5/index.html">Chapter 5: Session-based Recommendation Model</a><br>
</li>
<li><a href="../c6/index.html">Chapter 6: Preparing for Serving</a><br>
</li>
</ul>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../../../projects/implement-recsys/c5/index.html">Chapter 5</a>, we have come a long way to build our sequence-based recommendation model which demonstrates significant metric uplifts over the popularity baseline. It can capture temporal patterns in user behavior and personalize recommendations based on interaction sequences. We’re finally ready to tell the world about our exciting new model! To do that, we need to package our work in a way that end-users can benefit from.</p>
<p>This chapter aims to provide a transition ground from model development to deployment readiness. The challenge isn’t just loading a model and calling <code>predict()</code>—it’s building a proper system that can respond in milliseconds.</p>
<p>Deploying ML models in production is actually a very huge area and deserves a series of its own. Within the scope of this tutorial, we will discuss the topic from the angle of an end-to-end data scientist—whose job is to design the complete pipeline from training to serving.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is available in the <code>notebooks/020-ann-index.ipynb</code> and <code>notebooks/021-store-user-item-sequence.ipynb</code> files, along with the infrastructure configuration in <code>compose.yml</code> and the <code>mlflow/</code> directory in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="serving-paradigms-from-model-to-user-experience" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="serving-paradigms-from-model-to-user-experience">Serving Paradigms: From Model to User Experience</h2>
<p>I have been always thinking that building a recommendation model is like crafting a perfect recipe for a gourmet dish. You might have the most sophisticated ingredients, precise measurements, and innovative techniques, but until that dish reaches hungry customers, it’s just potential sitting in the kitchen. The recipe itself doesn’t feed anyone—it’s the execution, plating, and delivery that creates value. Similarly, our sequence-based recommendation model, no matter how accurate its predictions, remains useless until it can respond to real user requests in real-time.</p>
<p>This analogy extends further when we consider the restaurant’s serving strategy. A high-end restaurant doesn’t prepare each dish from scratch when a customer orders. Instead, they use a combination of pre-preparation (mise en place) and real-time cooking. Some components are prepped in batches during quiet hours, while others must be prepared fresh to order. Recommendation systems follow the same principle: we balance pre-computed results with real-time inference based on the specific requirements of each use case.</p>
<section id="how-recommendations-reach-users" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="how-recommendations-reach-users">How Recommendations Reach Users</h3>
<div class="column-page my-5">
<p><img src="https://dvquys.com/projects/implement-recsys/static/Model Serving.drawio.png" class="img-fluid"></p>
</div>
<p>Understanding serving paradigms starts with tracing the journey from user action to displayed recommendations. When a user opens your app, a carefully orchestrated process begins:</p>
<ol type="1">
<li><strong>Frontend Request</strong>: The mobile app or web interface detects the user’s need for recommendations (homepage load, category browse, search query)</li>
<li><strong>API Call</strong>: The frontend makes a REST API call to the backend, passing user context (user ID, current page, device info)</li>
<li><strong>Backend Processing</strong>: The recommendation service processes this request, either by looking up pre-computed results or triggering real-time model inference</li>
<li><strong>Response Assembly</strong>: Results are ranked, filtered for business rules, and formatted for display</li>
<li><strong>Frontend Rendering</strong>: The app receives the recommendations and renders them in the user interface</li>
</ol>
<p>While the actual requirements vary between use cases, normally this entire pipeline must complete within 200ms at the 95th percentile to maintain user engagement. Any longer, and users start experiencing the dreaded loading spinner that kills conversion rates.</p>
</section>
<section id="two-paradigms-batch-pre-computation-vs-online-serving" class="level3">
<h3 class="anchored" data-anchor-id="two-paradigms-batch-pre-computation-vs-online-serving">Two Paradigms: Batch Pre-computation vs Online Serving</h3>
<p>The critical decision in this pipeline happens at step 3: how does the backend generate recommendations? There are two fundamental paradigms, each with distinct trade-offs:</p>
<p><strong>Batch Pre-computation</strong> follows the “prepare ahead” strategy. Recommendations are generated offline for all users during low-traffic periods and stored in a key-value store like Redis or DynamoDB. When a user makes a request, the API simply looks up their pre-computed recommendations—a blazingly fast operation that typically completes in under 10ms.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Batch pre-computation approach</span></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> batch_generate_recommendations():</span>
<span id="cb1-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Run offline to pre-compute recommendations for all users."""</span></span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> user_id <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> all_users:</span>
<span id="cb1-5">        recommendations <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.predict(user_id)</span>
<span id="cb1-6">        redis_client.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"recs:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>user_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, recommendations, ex<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3600</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> serve_recommendations(user_id):</span>
<span id="cb1-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Fast lookup during serving."""</span></span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> redis_client.get(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"recs:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>user_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<p><strong>Online Serving</strong> follows the “cook to order” strategy. The model inference happens in real-time when users make requests. This requires the recommendation model to be deployed as a service that can respond to API calls within milliseconds.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Online serving approach</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> serve_recommendations(user_id, context):</span>
<span id="cb2-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Real-time model inference during serving."""</span></span>
<span id="cb2-4">    user_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_user_features(user_id)</span>
<span id="cb2-5">    contextual_features <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> extract_context(context)</span>
<span id="cb2-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> model.predict(user_features, contextual_features)</span></code></pre></div>
</section>
<section id="when-to-choose-each-paradigm" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="when-to-choose-each-paradigm">When to Choose Each Paradigm</h3>
<p>The choice between batch pre-computation and online serving isn’t arbitrary—it depends on your specific constraints and requirements. Batch pre-computation shines when recommendations don’t need real-time context. It’s also ideal when you can tolerate slightly stale recommendations that are updated periodically, perhaps hourly or daily, in exchange for guaranteed fast response times under all conditions. And it’s particularly attractive when your infrastructure needs to be simple and cost-effective, especially if you’re serving millions of users and want predictable resource utilization patterns.</p>
<p>On the other hand, online serving becomes essential when having access to real-time contexts for recommendations is crucial in ensuring the relevance of our recommendations. Those contexts can be a user’s current shopping cart contents, her search query, or time-sensitive factors like current location or weather. All of these signals share an important property: we don’t know them in advance, so pre-computation is not an option.</p>
<p>In practice, most production recommendation systems use a hybrid approach that combines both paradigms strategically. The default fallback homepage might display pre-computed “trending items” in cases of new users or errors from the recommendation services. In the remaining happy cases, we pass the relevant contexts to the model endpoints to provide better browsing experiences for users. This hybrid strategy optimizes for both performance and personalization.</p>
<p>As you can see, the UI demo for our project also starts by showing the popular recommendations before updating the list with respect to user’s interactions.</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/static/session-based retriever - demo v2.gif" class="img-fluid"></p>
</div>
</section>
</section>
<section id="three-pillar-serving-architecture" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="three-pillar-serving-architecture">Three-Pillar Serving Architecture</h2>
<p>We’ll set up three main components that form the backbone of serving recommendation systems: <strong>MLflow</strong> for model registry and deployment, <strong>Qdrant</strong> for vector similarity search, and <strong>Redis</strong> as KV store for user sequences and metadata. Each addresses a specific aspect of the real-time recommendation challenge.</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://dvquys.com/projects/implement-recsys/static/Model Serving.drawio.png" class="img-fluid figure-img column-page"></p>
<figcaption>Three-pillar serving architecture with Model Registry, Vector Store, and Key-Value Cache</figcaption>
</figure>
</div>
</div>
<section id="pillar-1-model-registry-mlflow" class="level3">
<h3 class="anchored" data-anchor-id="pillar-1-model-registry-mlflow">Pillar 1: Model Registry (MLflow)</h3>
<p>The <strong>Model Registry</strong> serves as the single source of truth for all model artifacts and metadata. Instead of need to look up which S3 path pointing to which model version, we have a nice abstraction layer to manage and use our trained models much more easily.</p>
<p>MLflow Model Registry provides several useful capabilities for model serving:</p>
<ul>
<li><strong>Model Versioning</strong>: Every model training run produces a versioned artifact with associated metadata (metrics, parameters, training data lineage)</li>
<li><strong>Stage Management</strong>: Models progress through stages like “Staging” → “Champion” → “Archived” with clear governance</li>
<li><strong>A/B Testing Support</strong>: Multiple model versions can be deployed simultaneously with traffic splitting</li>
</ul>
</section>
<section id="pillar-2-vector-store-qdrant" class="level3">
<h3 class="anchored" data-anchor-id="pillar-2-vector-store-qdrant">Pillar 2: Vector Store (Qdrant)</h3>
<p>The goal of <strong>Vector Store</strong> is to make similarity search efficient. While traditional databases excel at exact matches for structured data, the nature of our embeddings demands a different indexing approach. With the rising popularity of LLMs and their ability to generate embeddings, a handful of vector databases have emerged to provide solutions.</p>
<p>In our case, our sequence model’s candidate tower generates embeddings for all items in the catalog. These embeddings are indexed in Qdrant, enabling fast retrieval of the most relevant candidates based on a user’s current sequence.</p>
<p>The choice of using Qdrant here is nothing too special rather than personal, as I happen to find myself comfortable with it.</p>
</section>
<section id="pillar-3-key-value-cache-redis" class="level3">
<h3 class="anchored" data-anchor-id="pillar-3-key-value-cache-redis">Pillar 3: Key-Value Cache (Redis)</h3>
<p>The <strong>Key-Value Cache</strong> serves as the system’s memory for frequently accessed data and computational shortcuts. In recommendation systems, this typically includes user sequences, popular items, and pre-computed features that would be expensive to generate on-the-fly.</p>
<p>For our recommender system, Redis stores each user’s recent interaction history, enabling the query tower to generate contextual embeddings without expensive database lookups. It also contains the popular items as a form of pre-computed recommendations.</p>
<p>When thinking about which open source tool to use for the key-value store, I must admit that Redis is so widely used that I don’t really consider other options, especially for a tutorial project like this.</p>
<p>After understanding those three pillars, let’s take a closer look at how we configure them running on our local environment.</p>
</section>
</section>
<section id="docker-compose-configuration" class="level2">
<h2 class="anchored" data-anchor-id="docker-compose-configuration">Docker Compose Configuration</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dvquys.com/projects/implement-recsys/c6/docker-logo.svg" class="img-fluid figure-img"></p>
<figcaption>Docker logo</figcaption>
</figure>
</div>
<p><strong>Docker</strong> is a containerization platform that packages applications and their dependencies into lightweight, portable containers. Think of it as creating a standardized shipping container<sup>1</sup> for your software. Just as shipping containers can move seamlessly between trucks, ships, and trains regardless of their contents, Docker containers can run consistently across different environments, from your laptop to production servers. This is particularly valuable for ML systems where dependency management can become complex, with different services requiring specific versions of Python, database drivers, or system libraries. It’s becoming a standard approach to package application services for a lot of teams nowadays.</p>
<p><strong>Docker Compose</strong> takes this concept one step further by orchestrating multiple containers as a unified application stack. Instead of manually starting each service and configuring their networking, Docker Compose allows us to define our entire infrastructure—MLflow, Qdrant, Redis, and their supporting databases—in a single configuration file. With a simple <code>docker-compose up</code> command, we can spin up our complete serving environment with all services properly connected and configured. This approach eliminates the “works on my machine” problem that often plagues ML deployments, ensuring that anyone can reproduce the exact same serving environment that we’ve designed.</p>
<p>Here’s what our Docker Compose file looks like:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>compose.yml</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="compose.yml" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">qdrant</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> qdrant/qdrant:v1.12.0</span></span>
<span id="cb3-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6333:6333"</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6334:6334"</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./data/qdrant_storage:/qdrant/storage:z</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> always</span></span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">kv_store</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> redis:7.2-bookworm</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> kv_store</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"${REDIS_PORT}:6379"</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">volumes</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./data/redis:/data</span></span>
<span id="cb3-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">env_file</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .env</span></span>
<span id="cb3-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMD"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"redis-cli"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-p"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"6379"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ping"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">]</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 10s</span></span>
<span id="cb3-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 30s</span></span>
<span id="cb3-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">retries</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span></span>
<span id="cb3-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">start_period</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 30s</span></span>
<span id="cb3-26"></span>
<span id="cb3-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlflow_server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-28"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">restart</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> always</span></span>
<span id="cb3-29"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ./mlflow</span></span>
<span id="cb3-30"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflow_server</span></span>
<span id="cb3-31"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflow_server</span></span>
<span id="cb3-32"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depends_on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-33"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflow_mc</span></span>
<span id="cb3-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflow_db</span></span>
<span id="cb3-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-36"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"5002:5000"</span></span>
<span id="cb3-37"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb3-38"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> MLFLOW_S3_ENDPOINT_URL=http://minio:9000</span></span>
<span id="cb3-39"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}</span></span>
<span id="cb3-40"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}</span></span>
<span id="cb3-41"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">    command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">: </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb3-42">      mlflow server</span>
<span id="cb3-43">        --backend-store-uri mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mlflow_db:3306/${MYSQL_DATABASE}</span>
<span id="cb3-44">        --artifacts-destination s3://mlflow</span>
<span id="cb3-45">        --serve-artifacts</span>
<span id="cb3-46">        --host 0.0.0.0</span>
<span id="cb3-47">        --port 5000</span></code></pre></div>
</div>
<p>This configuration defines our entire serving infrastructure as code. A simple <code>docker compose up -d</code> command brings up all services with proper networking, volumes, and health checks configured.</p>
<p>Although it’s pretty straightforward when you look how Redis and Qdrant are defined, I need to elaborate a bit on the MLflow part.</p>
<section id="setting-up-mlflow-model-registry" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-mlflow-model-registry">Setting up MLflow Model Registry</h3>
<p>MLflow Model Registry serves as our model deployment pipeline, providing versioning, staging, and rollback capabilities essential for production ML systems. By design MLflow coordinates between two backend systems: a <strong>MySQL Database</strong> that stores all the metadata—experiments, runs, parameters, metrics, and model registry information—and <strong>MinIO S3 Storage</strong> that acts as the artifact store where the actual model binaries, datasets, and logs are persisted. <strong>MLflow Server</strong> acts as the central orchestration service, providing REST APIs for experiment tracking, model registration, and serving.</p>
<p>This separation of metadata and artifacts provides both performance and scalability benefits. The database can quickly serve metadata queries for experiment comparisons and model lookups, while the object storage efficiently handles large model files without putting pressure on the database.</p>
<p>Now it should be clear why we need to run <code>make ml-platform-up</code> before running our notebooks in previous chapters. We do not need to worry too much about where the train models are stored, cause they sit happily in MLflow Registry. Below is the example code snippet for loading models:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>notebooks/020-ann-index.ipynb</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="notebooks/020-ann-index.ipynb" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">mlf_client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.MlflowClient()</span>
<span id="cb4-2">mlf_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.pyfunc.load_model(</span>
<span id="cb4-3">    model_uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"models:/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cfg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>train<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>retriever<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>mlf_model_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">@champion"</span></span>
<span id="cb4-4">)</span>
<span id="cb4-5">run_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlf_model.metadata.run_id</span>
<span id="cb4-6">run_info <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlf_client.get_run(run_id).info</span>
<span id="cb4-7">artifact_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> run_info.artifact_uri</span>
<span id="cb4-8"></span>
<span id="cb4-9">inferer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlf_model.unwrap_python_model()</span>
<span id="cb4-10">id_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inferer.idm</span></code></pre></div>
</div>
<p>Next we will populate Qdrant and Redis with the data they need to support online serving.</p>
</section>
</section>
<section id="building-the-vector-index-with-qdrant" class="level2">
<h2 class="anchored" data-anchor-id="building-the-vector-index-with-qdrant">Building the Vector Index with Qdrant</h2>
<section id="item-embedding-extraction" class="level3">
<h3 class="anchored" data-anchor-id="item-embedding-extraction">Item Embedding Extraction</h3>
<p>The first step is extracting embeddings from our trained sequence model. Our two-tower implementation contains a method <code>get_candidate_embeddings</code> that makes this straightforward:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/sequence/model.py</strong></pre>
</div>
<div class="sourceCode" id="cb5" data-filename="src/sequence/model.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SoleSequenceRetriever(BaseSequenceRetriever):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb5-3"></span>
<span id="cb5-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_candidate_embeddings(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, torch.Tensor]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor:</span>
<span id="cb5-5">        candidate_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candidate_items"</span>)</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> candidate_items <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb5-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing required input key: 'candidate_items'"</span>)</span>
<span id="cb5-8">        candidate_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_embedding(candidate_items)</span>
<span id="cb5-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> candidate_embedding</span></code></pre></div>
</div>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>notebooks/020-ann-index.ipynb</strong></pre>
</div>
<div class="sourceCode" id="cb6" data-filename="notebooks/020-ann-index.ipynb" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inferer is the model wrapper loaded from MLflow in the previous snippet</span></span>
<span id="cb6-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inferer.model</span>
<span id="cb6-3"></span>
<span id="cb6-4">all_item_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(num_items)</span>
<span id="cb6-5">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candidate_items"</span>: all_item_ids}</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> torch.no_grad():</span>
<span id="cb6-8">    candidate_embeddings <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.get_candidate_embeddings(inputs).detach().numpy()</span></code></pre></div>
</div>
</section>
<section id="qdrant-collection-setup" class="level3">
<h3 class="anchored" data-anchor-id="qdrant-collection-setup">Qdrant Collection Setup</h3>
<p>Qdrant organizes vectors into collections with configurable distance metrics and indexing parameters:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>notebooks/020-ann-index.ipynb</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-7" data-filename="notebooks/020-ann-index.ipynb" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> qdrant_client <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> QdrantClient, models</span>
<span id="annotated-cell-7-2"></span>
<span id="annotated-cell-7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Initialize Qdrant client</span></span>
<span id="annotated-cell-7-4">client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> QdrantClient(url<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.vectorstore.qdrant.url)</span>
<span id="annotated-cell-7-5"></span>
<span id="annotated-cell-7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create collection for item embeddings</span></span>
<span id="annotated-cell-7-7">client.create_collection(</span>
<span id="annotated-cell-7-8">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.vectorstore.qdrant.collection_name,</span>
<span id="annotated-cell-7-9">    vectors_config<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.VectorParams(</span>
<span id="annotated-cell-7-10">        size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.train.embedding_dim,</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-7" data-target-annotation="1">1</button><span id="annotated-cell-7-11" class="code-annotation-target">        distance<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>models.Distance.COSINE</span>
<span id="annotated-cell-7-12">    )</span>
<span id="annotated-cell-7-13">)</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-7" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-7" data-code-lines="11" data-code-annotation="1">Specify COSINE as the distance to align with how we implement the model forward pass.</span>
</dd>
</dl>
</section>
<section id="batch-indexing" class="level3">
<h3 class="anchored" data-anchor-id="batch-indexing">Batch Indexing</h3>
<p>We do not only upload the embeddings to Qdrant but also their metadata. This becomes quite handy later when preparing the demo as we can get the item metadata by ID from Qdrant without the need to set up new database.</p>
<div class="sourceCode" id="annotated-cell-8" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-8-1">points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="annotated-cell-8-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, vector <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(candidate_embeddings):</span>
<span id="annotated-cell-8-3">    id_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id_mapping.get_item_id(idx)</span>
<span id="annotated-cell-8-4">    payload <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> metadata_map[id_]</span>
<span id="annotated-cell-8-5">    payload[cfg.data.item_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id_</span>
<span id="annotated-cell-8-6">    point <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PointStruct(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>idx, vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>vector.tolist(), payload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>payload)</span>
<span id="annotated-cell-8-7">    points.append(point)</span>
<span id="annotated-cell-8-8"></span>
<span id="annotated-cell-8-9">upsert_result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ann_index.upsert(</span>
<span id="annotated-cell-8-10">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.vectorstore.qdrant.collection_name,</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-8" data-target-annotation="1">1</button><span id="annotated-cell-8-11" class="code-annotation-target">    points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>points,</span>
<span id="annotated-cell-8-12">)</span>
<span id="annotated-cell-8-13"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(upsert_result.status) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"completed"</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-8" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-8" data-code-lines="11" data-code-annotation="1">Note that we can send a batch of points to Qdrant in one go.</span>
</dd>
</dl>
<p>Once indexed, we can search for nearest neighbors by inputing a query embedding:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">id_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"043935806X"</span></span>
<span id="cb7-2">idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> id_mapping.get_item_index(id_)</span>
<span id="cb7-3">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_seq"</span>: torch.tensor([[idx]])}</span>
<span id="cb7-4">query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.get_query_embeddings(inputs)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb7-5"></span>
<span id="cb7-6">hits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ann_index.search(</span>
<span id="cb7-7">    collection_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.vectorstore.qdrant.collection_name,</span>
<span id="cb7-8">    query_vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>query_embedding,</span>
<span id="cb7-9">    limit<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>.top_k_retrieve,</span>
<span id="cb7-10">)</span>
<span id="cb7-11"></span>
<span id="cb7-12">display(hits)</span></code></pre></div>
<p>Example output when <code>cfg.eval.top_k_retrieval = 2</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">[</span>
<span id="cb8-2">    ScoredPoint(</span>
<span id="cb8-3">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">794</span>,</span>
<span id="cb8-4">        version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-5">        score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.89372206</span>,</span>
<span id="cb8-6">        payload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb8-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main_category'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Books'</span>,</span>
<span id="cb8-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'The Sword of Shannara'</span>,</span>
<span id="cb8-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average_rating'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.4</span>,</span>
<span id="cb8-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rating_number'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5470</span>,</span>
<span id="cb8-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'price'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'8.25'</span>,</span>
<span id="cb8-12">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subtitle'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mass Market Paperback – July 12, 1983'</span>,</span>
<span id="cb8-13">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_url'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://placehold.co/350x525/0057a3/ffffff.png?text=The%0ASword%0Aof%0AShannara&amp;font=raleway'</span>,</span>
<span id="cb8-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent_asin'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0345314255'</span></span>
<span id="cb8-15">        },</span>
<span id="cb8-16">        vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb8-17">        shard_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb8-18">        order_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-19">    ),</span>
<span id="cb8-20">    ScoredPoint(</span>
<span id="cb8-21">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1381</span>,</span>
<span id="cb8-22">        version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb8-23">        score<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8898184</span>,</span>
<span id="cb8-24">        payload<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb8-25">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'main_category'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Books'</span>,</span>
<span id="cb8-26">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'title'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Harry Potter and the Chamber of Secrets'</span>,</span>
<span id="cb8-27">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'average_rating'</span>: <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">4.8</span>,</span>
<span id="cb8-28">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rating_number'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">85813</span>,</span>
<span id="cb8-29">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'price'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'6.81'</span>,</span>
<span id="cb8-30">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'subtitle'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Hardcover – Big Book, July 1, 1999'</span>,</span>
<span id="cb8-31">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'image_url'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://m.media-amazon.com/images/I/519HQF7Vl6L._SY291_BO1,204,203,200_QL40_FMwebp_.jpg'</span>,</span>
<span id="cb8-32">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'parent_asin'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0439064864'</span></span>
<span id="cb8-33">        },</span>
<span id="cb8-34">        vector<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb8-35">        shard_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb8-36">        order_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb8-37">    )</span>
<span id="cb8-38">]</span></code></pre></div>
</section>
</section>
<section id="caching-user-sequences-in-redis" class="level2">
<h2 class="anchored" data-anchor-id="caching-user-sequences-in-redis">Caching User Sequences in Redis</h2>
<p>First we need to prepare our dataframe containing our user sequence signals. Since this is for serving, we would combine both train and val dataset and get the latest interaction for each user.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>notebooks/021-store-user-item-sequence.ipynb</strong></pre>
</div>
<div class="sourceCode" id="cb9" data-filename="notebooks/021-store-user-item-sequence.ipynb" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">train_features_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(cfg.data.train_features_fp)</span>
<span id="cb9-2">val_features_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(cfg.data.val_features_fp)</span>
<span id="cb9-3">full_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([train_features_df, val_features_df], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Locate the last instance per user from our interaction data</span></span>
<span id="cb9-6">latest_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> full_df.assign(</span>
<span id="cb9-7">    recency<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df.groupby(cfg.data.user_col)[cfg.data.timestamp_col].rank(</span>
<span id="cb9-8">        method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb9-9">    )</span>
<span id="cb9-10">).loc[<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"recency"</span>].eq(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)]</span></code></pre></div>
</div>
<p>Dumping data into Redis is quite easy.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>notebooks/021-store-user-item-sequence.ipynb</strong></pre>
</div>
<div class="sourceCode" id="cb10" data-filename="notebooks/021-store-user-item-sequence.ipynb" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">r <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> redis.Redis(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.redis.host, port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.redis.port, db<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, decode_responses<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb10-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> r.ping(), (</span>
<span id="cb10-3">    <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Redis at </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cfg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>redis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>host<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>cfg<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>redis<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> is not running, please make sure you have started the Redis docker service"</span></span>
<span id="cb10-4">)</span>
<span id="cb10-5"></span>
<span id="cb10-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(latest_df.iterrows(), total<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>latest_df.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]):</span>
<span id="cb10-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Since the row containing previous interacted items, we can get them and append the current item to compose the full sequence</span></span>
<span id="cb10-8">    prev_item_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(item) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> row[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_sequence"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb10-9">    prev_item_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [idm.get_item_id(idx) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> prev_item_indices]</span>
<span id="cb10-10">    updated_item_sequences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> prev_item_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [row[cfg.data.item_col]]</span>
<span id="cb10-11">    user_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row[cfg.data.user_col]</span>
<span id="cb10-12">    key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cfg.redis.keys.recent_key_prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> user_id</span>
<span id="cb10-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here we convert those list of string IDs into a single string with "__" as separator</span></span>
<span id="cb10-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is for convenience only since in Redis there are other data structures like the list</span></span>
<span id="cb10-15">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># which can also be used to store the sequence</span></span>
<span id="cb10-16">    value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__"</span>.join(updated_item_sequences)</span>
<span id="cb10-17">    r.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(key, value)</span></code></pre></div>
</div>
<p>Getting data is no harder.</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">test_user_id <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> latest_df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)[cfg.data.user_col].values[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb11-2">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> r.get(cfg.redis.keys.recent_key_prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> test_user_id)</span>
<span id="cb11-3">display(result)</span></code></pre></div>
<p>Example output:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">'B078GWN38X__B078JJFFGK__B07ZDG34ZC__B079QG6L98__B00M9GZTXG__B07CWSSFL3__B0031W1E86__B07LF2YL9S__B07BJZJ34M__B077XVF99N__B07F668MBT'</span></span></code></pre></div>
<p>In a technically similar way, we can populate the popular items in Redis. I will skip the details here, as you can easily find it from <a href="https://github.com/dvquy13/recsys-seq-model/blob/main/notebooks/021-store-user-item-sequence.ipynb">the notebook</a>.</p>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this chapter, we mimic our local environment with the infrastructure foundation needed to transform our sequence-based model from a model prototype into a deployable recommendation system.</p>
<p>We use Docker Compose to set up our stack of MLflow for model registry and versioning, Qdrant for fast vector similarity search, and Redis for caching user sequences and popular items. Then we implemented data population scripts to extract candidate embeddings from our trained model, index them in Qdrant with rich metadata, and populate Redis with user interaction sequences.</p>
</section>
<section id="next-steps" class="level2">
<h2 class="anchored" data-anchor-id="next-steps">Next Steps</h2>
<p>With our serving infrastructure ready and populated with data, we’re prepared for the final step: building the API layer that will expose our recommendation system to users. In <a href="../c7/index.qmd">Chapter 7</a>, we’ll learn how to use BentoML to host our model as an API endpoint and develop a FastAPI orchestrator to serve our recommendations.</p>
<p>Continue to the <a href="../c7/index.qmd">next chapter</a>.</p>
<hr>
<p><br> If you find this tutorial helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (May 2025). Implement a RecSys, Chapter 6:<br> Preparing for Serving. dvquys.com. https://dvquys.com/projects/implement-recsys/c6/.</p>
</blockquote>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>I love how Docker’s logo is actually a whale carrying containers on its back—it’s a perfect visual metaphor for what the platform does 👍.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>recsys</category>
  <category>implement-recsys-series</category>
  <guid>https://dvquys.com/projects/implement-recsys/c6/</guid>
  <pubDate>Sat, 31 May 2025 16:00:00 GMT</pubDate>
  <media:content url="https://dvquys.com/projects/implement-recsys/static/Model Serving.drawio.png" medium="image" type="image/png" height="75" width="144"/>
</item>
<item>
  <title>Implement a RecSys, Chapter 5: Session-based Recommendation Model</title>
  <link>https://dvquys.com/projects/implement-recsys/c5/</link>
  <description><![CDATA[ 





<p>This is the <strong>fifth chapter</strong> of the tutorial series: Implement a RecSys.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
List of chapters
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../c1/index.html">Chapter 1: Introduction and Project Overview</a><br>
</li>
<li><a href="../c2/index.html">Chapter 2: Understanding the Data and Feature Engineering</a><br>
</li>
<li><a href="../c3/index.html">Chapter 3: Negative Sampling</a><br>
</li>
<li><a href="../c4/index.html">Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation</a><br>
</li>
<li><a href="../c5/index.html">Chapter 5: Session-based Recommendation Model</a><br>
</li>
</ul>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../../../projects/implement-recsys/c4/index.html">Chapter 4</a>, we established our evaluation framework, implemented MLflow experiment tracking, and built a popularity-based baseline model. Since our baseline is simple, it treats all users similarly—everyone gets the same popular items regardless of their personal browsing history or preferences.</p>
<p>This chapter marks the transition from simple heuristics to a more sophisticated machine learning approach aimed towards personalization. We’ll dive deep into the rationales behind <strong>sequence-based recommendation models</strong> and explore the design decisions that make them effective.</p>
<p>These models excel at understanding the temporal patterns hidden in user behavior. Instead of just knowing that a user liked certain books, our model will learn to recognize meaningful sequences. For example, when someone browses “Python Programming” followed by “Machine Learning,” the model understands they might be interested in “Deep Learning with PyTorch” next.</p>
<p>This is going to be a long post. So grab your coffee, and let’s dive in.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is available in the <code>notebooks/011-sequence-modeling.ipynb</code> file and the <code>src/sequence/</code> directory in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Jargon
</div>
</div>
<div class="callout-body-container callout-body">
<p>Throughout the series I would be using <strong>sequence modeling</strong> and <strong>session-based recommendation</strong> interchangeably to refer to the same technique of modeling user’s behavior based on their sequential interactions.</p>
</div>
</div>
</section>
<section id="why-sequence-modeling-matters-in-recommendations" class="level2">
<h2 class="anchored" data-anchor-id="why-sequence-modeling-matters-in-recommendations">Why Sequence Modeling Matters in Recommendations</h2>
<p>Traditional collaborative filtering approaches treat user preferences as static snapshots. They might know that User A liked Items 1, 3, and 7, but they miss the story hidden in the order and timing of these interactions.</p>
<p>Consider these two users with identical item preferences but different behavioral patterns:</p>
<pre><code>User A: Book1 → Book2 → Book3 → Book4 → Book5
User B: Book5 → Book1 → Book4 → Book2 → Book3</code></pre>
<p>Both users interacted with the same five books, but their sequences tell very different stories. User A might be following a structured learning path (beginner to advanced), while User B might be jumping between topics based on immediate curiosity. Traditional collaborative filtering would treat these users identically, but sequence models can capture these nuanced patterns.</p>
<p>The even-more-compelling part about this our sequential model is that it gives you two very strong arguments to argue with: real-time adaptation and cold start handling.</p>
<p>Think about what happens in static recommendation systems when new users sign up. They get the same boring popular items everyone else sees. “Here are the top 10 books everyone’s reading!” It’s like walking into a bookstore and having the clerk hand you a list without asking what you’re interested in. The user has to suffer through generic recommendations until the system has enough data about them. This is the cold start problem, which is, trust me, a real typical ask your Product Manager would come up during your recommendation model pitch.</p>
<p>Our sequence model flips this on its head. The moment a new user clicks on their first book, the model springs into action. They browse “Python Programming,” then click on “Machine Learning Basics”—the model immediately understands they’re on a learning journey. The system starts personalizing from interaction number one, like having a shop assistant who gets better at helping you the longer you browse.</p>
<p>And all of this happens without retraining the model or updating any databases, dealing with one of the biggest problems in recommendation systems: how do you stay relevant when user interests change quickly? Traditional collaborative filtering models need to be retrained to pick up new patterns. Our sequence model adapts immediately. If thriller readers suddenly start buying romance novels (maybe it’s Valentine’s Day), the model notices the shift in the very next recommendation request.</p>
<p>Now that we understand why sequence modeling is crucial, let’s explore how to actually design it.</p>
</section>
<section id="sequence-modeling-approaches" class="level2">
<h2 class="anchored" data-anchor-id="sequence-modeling-approaches">Sequence Modeling Approaches</h2>
<p>The central challenge in sequence modeling boils down to one question: how do you take a bunch of user interactions and turn them into something useful for predictions? You have a sequence like “Book A → Book B → Book C” and somehow need to compress all that information into a representation that captures what the user is really interested in.</p>
<p>I like to think of this as a “pooling” problem. You’re pooling information from multiple items into a single representation. It’s like trying to summarize a conversation—you want to keep the important bits and throw away the noise.</p>
<p>The simplest pooling method is <strong>averaging</strong>. But wait, you might think, average what exactly? We’re talking about sequences of item IDs that users clicked on. You can’t just average “book_123” and “book_456” like they’re numbers, right?</p>
<p>This is where embeddings become your best friend. Here’s the key insight: every item in your catalog gets converted into a vector of numbers before any learning happens. Instead of working with raw item IDs, your model works with these dense numerical representations. It’s the same trick that made Word2Vec so powerful—remember from Chapter 3 how it could tell you that “king” minus “man” plus “woman” equals “queen”<sup>1</sup>? That magic happens because words become vectors, and vectors can be manipulated mathematically.</p>
<p>So when we talk about averaging a sequence, we’re actually averaging the embedding vectors of the items in that sequence. Book A becomes a 128-dimensional vector, Book B becomes another 128-dimensional vector, and averaging them gives you a single 128-dimensional vector that somehow captures the essence of “someone who reads both Book A and Book B.”</p>
<p>The beautiful thing about embeddings, just like in ML in general, is that they can start random but learn to be meaningful. During training, the model adjusts these vectors so that similar items end up close together in the embedding space. Books about Python programming cluster together, romance novels form their own neighborhood, and so on.</p>
<p>Now, averaging is wonderfully simple, and sometimes simplicity wins. I’ve seen myself trying other pooling methods only to discover that good old averaging works just as well. But that doesn’t mean you shouldn’t experiment. Some sequences have patterns that averaging destroys—like the difference between reading “Beginner Python → Advanced Python” versus “Advanced Python → Beginner Python”.</p>
<p>This is where more sophisticated pooling methods come in. The field of sequence modeling offers several architectural choices, each with its own strengths and trade-offs. The simplest approach uses Recurrent Neural Networks (RNNs), which process sequences step by step, maintaining a hidden state that captures information from previous steps. Think of an RNN as reading a book one page at a time, trying to remember everything important from earlier pages. While this sounds intuitive, vanilla RNNs have a memory problem—they forget important details from way back in the sequence, what researchers call the vanishing gradient problem.</p>
<p>To fix this memory issue, researchers developed Long Short-Term Memory (LSTM) and Gated Recurrent Unit (GRU) networks. These use clever gating mechanisms to decide what to remember and what to forget. GRUs, in particular, have become the go-to choice for recommendation systems. They’re simpler than LSTMs but perform just as well—like getting 90% of the benefit with 60% of the complexity.</p>
<p>More recently, Transformer models have taken the field by storm. Instead of processing sequences step by step, they use self-attention mechanisms to look at all parts of the sequence simultaneously. It’s like being able to read an entire book at once and instantly connect themes from chapter 1 to chapter 20. Transformers are incredibly powerful for capturing long-range dependencies, but there’s a catch—they can be computationally expensive, especially when you have thousands or millions of items in your catalog.</p>
<p>Now that we’ve explored different sequence modeling approaches—from simple averaging to sophisticated Transformers—let’s not forget that all architecture decisions should consider the following question: how do we deploy these models in production systems that need to handle millions of items in real-time?</p>
</section>
<section id="retrieval-vs-ranking" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="retrieval-vs-ranking">Retrieval vs Ranking</h2>
<p>While the main task is still to rank the most relevant and likely-to-be-interacted items on top, in reality it’s not uncommon that we need to deal with ranking for millions of items. Training a scoring model that takes into account each instance of <code>&lt;user, context, item&gt;</code> and uses it from the start is not feasible because of latency constraints. Calling that model to give fine-grained scores to all millions of items would take forever, and neither our users have that kind of patience nor do we as engineers find that idea sane.</p>
<section id="the-two-phase-architecture" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="the-two-phase-architecture">The Two-Phase Architecture</h3>
<p>To deal with this problem, we break the whole ranking process into two phases: first we quickly retrieve a shortlist of candidates from millions of items, then we use a fine-grained ranker to give the final ranking on the shortlist.</p>
<p>The difference in naming between these two phases already reveals their distinct characteristics. The retrieval phase needs to quickly scan millions of items to find about 1,000 potential candidates in milliseconds. This speed requirement means it cannot use complex computations and often needs to leverage indexing structures like vector databases for fast similarity search. The focus here is on <strong>recall</strong>—ensuring that relevant items make it into the candidate set, even if the initial scoring isn’t perfect.</p>
<p>The ranking phase operates under very different constraints. With bandwidth and a much more limited scope of hundreds to thousands of items, it can afford to adopt many more signals and complex features into its model. This phase delivers much better fine-grained scores for final ordering, focusing on <strong>precision</strong>—getting the order exactly right among the candidates that have already been deemed potentially relevant.</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><img src="https://dvquys.com/projects/implement-recsys/static/discovery-system-design.webp" class="img-fluid figure-img column-page"></p>
<figcaption><a href="https://eugeneyan.com/writing/system-design-for-discovery/">Yan, Ziyou. (Jun 2021). System Design for Recommendations and Search.</a></figcaption>
</figure>
</div>
</div>
</section>
<section id="retrieval-as-a-standalone-system" class="level3">
<h3 class="anchored" data-anchor-id="retrieval-as-a-standalone-system">Retrieval as a Standalone System</h3>
<p>One important thing to note: most of the time the retrieval phase provides scores together with the candidates, which indicates to some extent how well they match the query. We can already use this signal to rank the candidates and provide recommendations to users.</p>
<p>It also allows us to approach building recommendation systems in an incremental manner. In most of my RecSys projects, I start with building and deploying the retrieval model as the first version. The idea is to get both early impact and actual feedback from users interacting with our recommendations. This user feedback becomes a much better source of labeling signals to train our later ranking model on.</p>
<p>The benefits are twofold. First, you get a working system deployed quickly, enabling faster time to impact rather than waiting months to build a complex multi-stage system. More importantly, you start collecting actual interaction data from users engaging with your recommendations, rather than relying solely on historical patterns<sup>2</sup>. This real user feedback becomes invaluable—it’s a much richer source of labeling signals for training your later ranking model than any offline evaluation could provide.</p>
<p>Finally, it allows you to build the serving and monitoring infrastructure in phases, learning how to handle recommendation traffic, monitor model performance, and debug issues at a manageable scale before introducing the additional complexity of a ranking layer.</p>
</section>
<section id="our-two-tower-retriever" class="level3">
<h3 class="anchored" data-anchor-id="our-two-tower-retriever">Our Two-Tower Retriever</h3>
<p>In that spirit, the implementation of our sequential recommendation model in this series is a <strong>retrieval-based one</strong>. It follows a typical <strong>Two Tower architecture</strong>, where the query tower embeds information about the user and context—in our case, the user’s sequence of interactions—while the candidate tower represents the candidate items.</p>
<p>This separation is crucial for efficient serving. The candidate tower can precompute embeddings for all items and store them in a vector index. The query tower only needs to run at request time to generate the user’s current context embedding.</p>
<p><img src="https://dvquys.com/projects/implement-recsys/static/two-tower-architecture.png" class="img-fluid"></p>
</section>
<section id="training-setup" class="level3">
<h3 class="anchored" data-anchor-id="training-setup">Training Setup</h3>
<p>The labels for training come from our preparation in previous chapters. We create positive instances from <code>&lt;user, context, item&gt;</code> tuples which have actual interaction records in the past, while negative examples are sampled from the unseen item space for each user-context pair. This creates a binary classification problem where the model learns to distinguish between items a user would interact with versus items they would ignore.</p>
</section>
<section id="serving-architecture" class="level3">
<h3 class="anchored" data-anchor-id="serving-architecture">Serving Architecture</h3>
<p>For serving, our retrieval system works in two phases. First, in an offline process, we index all candidate item embeddings in a nearest neighbor vector search system. Then, during online serving, we send the <code>&lt;user, context&gt;</code> as input to the query tower to get a query embedding vector, use similarity lookup to search for the nearest candidate neighbors in the index, and return the corresponding items with their similarity scores.</p>
<p>This architecture enables low-latency response times even when searching through millions of items, making it practical for recommendation serving.</p>
<p>Again, the beauty of this approach is that it’s both a complete recommendation system on its own and a foundation for more sophisticated ranking models. You can deploy it immediately to start serving personalized recommendations, then later add a ranking layer on top without changing the underlying retrieval infrastructure.</p>
</section>
</section>
<section id="model-implementation" class="level2">
<h2 class="anchored" data-anchor-id="model-implementation">Model Implementation</h2>
<p>Now let’s translate the two-tower architecture into concrete code. But first, let me explain a key design decision that shapes our implementation.</p>
<section id="the-case-for-session-only-models" class="level3">
<h3 class="anchored" data-anchor-id="the-case-for-session-only-models">The Case for Session-Only Models</h3>
<p>Traditional two-tower retrievers include both user embeddings and sequence representations in the query tower. But I’ve chosen to build what I call a “SoleSequenceRetriever”—a model that relies entirely on the sequence of interactions, without any user-specific embeddings.</p>
<p>This isn’t just a technical choice; it’s a strategic one<sup>3</sup> that fundamentally changes how the model behaves. By removing user embeddings, we’re making a bet that the sequence itself contains enough signal to make good recommendations. A user browsing “Python Programming → Machine Learning → Data Analysis” tells us more about their immediate intent than knowing they’re “User #47832” with some historical preference profile.</p>
<p>This approach solves several practical problems. New users get meaningful recommendations from their very first interaction—no cold start period where they see generic popular items. Operationally, serving becomes a bit simpler since we don’t need to manage user embedding lookups or worry about user ID mapping issues.</p>
</section>
<section id="core-architecture" class="level3">
<h3 class="anchored" data-anchor-id="core-architecture">Core Architecture</h3>
<p>With that context, let’s look at our implementation. The core is simple and straightforward.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/sequence/model.py</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-2" data-filename="src/sequence/model.py" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SoleSequenceRetriever(BaseSequenceRetriever):</span>
<span id="annotated-cell-2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="annotated-cell-2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="annotated-cell-2-4">        num_items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="annotated-cell-2-5">        embedding_dim: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>,</span>
<span id="annotated-cell-2-6">        pooling_method: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>,</span>
<span id="annotated-cell-2-7">        dropout: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>,</span>
<span id="annotated-cell-2-8">        mask_pooling: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="annotated-cell-2-9">    ):</span>
<span id="annotated-cell-2-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.num_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> num_items</span>
<span id="annotated-cell-2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.embedding_dim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> embedding_dim</span>
<span id="annotated-cell-2-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pooling_method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pooling_method.lower()</span>
<span id="annotated-cell-2-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mask_pooling <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_pooling</span>
<span id="annotated-cell-2-14"></span>
<span id="annotated-cell-2-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item_embedding <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="annotated-cell-2-16">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Embedding(</span>
<span id="annotated-cell-2-17">                num_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># extra index for unknown/padding</span></span>
<span id="annotated-cell-2-18">                embedding_dim,</span>
<span id="annotated-cell-2-19">                padding_idx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_items,</span>
<span id="annotated-cell-2-20">            )</span>
<span id="annotated-cell-2-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1">1</button><span id="annotated-cell-2-22" class="code-annotation-target">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_embedding</span>
<span id="annotated-cell-2-23"></span>
<span id="annotated-cell-2-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pooling_method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gru"</span>:</span>
<span id="annotated-cell-2-25">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gru <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.GRU(embedding_dim, embedding_dim, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="annotated-cell-2-26">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pooling_method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>:</span>
<span id="annotated-cell-2-27">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gru <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="annotated-cell-2-28">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="annotated-cell-2-29">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Invalid pooling_method. Choose 'gru' or 'mean'."</span>)</span>
<span id="annotated-cell-2-30"></span>
<span id="annotated-cell-2-31">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.query_fc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.Sequential(</span>
<span id="annotated-cell-2-32">            nn.Linear(embedding_dim, embedding_dim),</span>
<span id="annotated-cell-2-33">            nn.BatchNorm1d(embedding_dim),</span>
<span id="annotated-cell-2-34">            nn.Dropout(dropout),</span>
<span id="annotated-cell-2-35">        )</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="22" data-code-annotation="1">We support pre-trained item embeddings, which can be useful if you have embeddings from other models or external sources.</span>
</dd>
</dl>
<p>The architecture reflects our key principles. The item embedding layer converts raw item IDs into dense vectors that can capture semantic relationships. The configurable pooling method (mean or GRU) aggregates the sequence into a single representation. The fully connected layer in the query tower adds learning capacity while batch normalization and dropout help with generalization.</p>
<p>Notice what’s <em>not</em> here: any mention of user IDs. The model’s query tower depends entirely on the sequence of items, making it truly session-based.</p>
</section>
</section>
<section id="model-training" class="level2">
<h2 class="anchored" data-anchor-id="model-training">Model Training</h2>
<p>The forward pass computes cosine similarity between the query embedding (pooled sequence representation) and candidate embedding, scaled to [0,1] to match our binary labels. This choice of cosine similarity isn’t arbitrary—it aligns with how we’ll serve the model using nearest neighbor search in production, i.e.&nbsp;we perform the exact same similarity computation, just against pre-indexed candidate embeddings rather than individual examples.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/sequence/model.py</strong></pre>
</div>
<div class="sourceCode" id="annotated-cell-3" data-filename="src/sequence/model.py" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SoleSequenceRetriever(BaseSequenceRetriever):</span>
<span id="annotated-cell-3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="annotated-cell-3-3"></span>
<span id="annotated-cell-3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_query_embeddings(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs: Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, torch.Tensor]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor:</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1">1</button><span id="annotated-cell-3-5" class="code-annotation-target">        item_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> inputs.get(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_seq"</span>)</span>
<span id="annotated-cell-3-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> item_seq <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="annotated-cell-3-7">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Missing required input key: 'item_seq'"</span>)</span>
<span id="annotated-cell-3-8">        item_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.replace_neg_one_with_padding(item_seq)</span>
<span id="annotated-cell-3-9">        mask <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_embedding.padding_idx</span>
<span id="annotated-cell-3-10">        seq_embeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_embedding(item_seq)</span>
<span id="annotated-cell-3-11">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pool the sequence; the method will decide whether to use the mask based on self.mask_pooling</span></span>
<span id="annotated-cell-3-12">        seq_rep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pool_sequence(seq_embeds, mask)</span>
<span id="annotated-cell-3-13">        query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.query_fc(seq_rep)</span>
<span id="annotated-cell-3-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> F.normalize(query_embedding, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-3-15"></span>
<span id="annotated-cell-3-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> forward(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, inputs):</span>
<span id="annotated-cell-3-17">        query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_query_embeddings(inputs)      </span>
<span id="annotated-cell-3-18">        candidate_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.get_candidate_embeddings(inputs)  </span>
<span id="annotated-cell-3-19">        </span>
<span id="annotated-cell-3-20">        query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.normalize(query_embedding, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-3-21">        candidate_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> F.normalize(candidate_embedding, p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-3-22">        cos_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(query_embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> candidate_embedding, dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="annotated-cell-3-23">        </span>
<span id="annotated-cell-3-24">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (cos_sim <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scale to [0,1] since cosine similarity is in [-1, 1]</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
</div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="5" data-code-annotation="1">Note how we only need the item_seq from the inputs dict. This handles the cold start problem—new users immediately get meaningful recommendations based solely on their current session, without needing historical preference data.</span>
</dd>
</dl>
<section id="mask-pooling" class="level3">
<h3 class="anchored" data-anchor-id="mask-pooling">Mask Pooling</h3>
<p>One challenge we need to address: <strong>variable sequence lengths</strong>. In practice, users have different numbers of interactions—some might have browsed 3 books, others 15. To batch these sequences efficiently for training, we need to pad shorter sequences to a fixed length. We do this by filling empty positions with a special padding token (typically -1).</p>
<p><strong>Masked pooling</strong> can help us deal with this issue. Without masking, our pooling operations would include these padding tokens in their calculations, diluting the actual sequence representation. For mean pooling, averaging real embeddings with padding embeddings would give us a less meaningful representation. For GRU pooling, the model might learn spurious patterns from the padding tokens.</p>
<p>By implementing masked pooling, we tell the model to ignore these -1 padding tokens during sequence aggregation. The mask ensures that only genuine user interactions contribute to the final sequence representation, preserving the integrity of the learned patterns.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/sequence/model.py</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="src/sequence/model.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> SoleSequenceRetriever(BaseSequenceRetriever):</span>
<span id="cb2-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb2-3"></span>
<span id="cb2-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> pool_sequence(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, seq_embeds: torch.Tensor, mask: torch.Tensor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> torch.Tensor:</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.mask_pooling <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> mask <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-6">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pooling_method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gru"</span>:</span>
<span id="cb2-7">                lengths <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).clamp(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-8">                packed_seq <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.utils.rnn.pack_padded_sequence(</span>
<span id="cb2-9">                    seq_embeds, lengths.cpu(), batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, enforce_sorted<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-10">                )</span>
<span id="cb2-11">                _, hidden_state <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gru(packed_seq)</span>
<span id="cb2-12">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> hidden_state.squeeze(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb2-13">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">elif</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pooling_method <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>:</span>
<span id="cb2-14">                mask_float <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask.unsqueeze(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb2-15">                sum_embeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (seq_embeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> mask_float).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-16">                count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mask_float.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(dim<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).clamp(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-17">                <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> sum_embeds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> count</span></code></pre></div>
</div>
<p>As with other ideas, feel free to experiment with using masked pooling or not. It may seem sound but not always lead to noticeable improvements according to my experience.</p>
</section>
<section id="training-loop" class="level3">
<h3 class="anchored" data-anchor-id="training-loop">Training Loop</h3>
<p>The training function uses binary cross-entropy loss against our positive/negative samples. We use PyTorch Lightning to leverage its built-in training loop, logging capabilities and integration with MLflow instead of implementing ourselves<sup>4</sup>.</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/sequence/trainer.py</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="src/sequence/trainer.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> LitSequenceRetriever(L.LightningModule):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="cb3-3"></span>
<span id="cb3-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> training_step(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, batch, batch_idx):</span>
<span id="cb3-5">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get model's predictions</span></span>
<span id="cb3-6">        predictions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.model({</span>
<span id="cb3-7">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_ids"</span>: batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>],</span>
<span id="cb3-8">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_seq"</span>: batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_sequence"</span>], </span>
<span id="cb3-9">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"candidate_items"</span>: batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item"</span>]</span>
<span id="cb3-10">        })</span>
<span id="cb3-11">        </span>
<span id="cb3-12">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compare to actual user behavior</span></span>
<span id="cb3-13">        labels <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>()</span>
<span id="cb3-14">        loss <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nn.BCELoss()(predictions, labels)</span>
<span id="cb3-15">        </span>
<span id="cb3-16">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This loss drives the learning process</span></span>
<span id="cb3-17">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> loss</span></code></pre></div>
</div>
</section>
<section id="preparing-pytorch-datasets" class="level3">
<h3 class="anchored" data-anchor-id="preparing-pytorch-datasets">Preparing PyTorch Datasets</h3>
<p>PyTorch models work best with PyTorch datasets. Our <code>UserItemRatingDFDataset</code> class handles the conversion from pandas DataFrames to PyTorch tensors:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/dataset.py</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="src/dataset.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> UserItemRatingDFDataset(Dataset):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, df, user_col: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, item_col: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, rating_col: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, timestamp_col: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.assign(</span>
<span id="cb4-4">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>{rating_col: (df[rating_col] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> MAX_RATING).astype(np.float32)}  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize rating to [0,1]</span></span>
<span id="cb4-5">        )</span>
<span id="cb4-6">    </span>
<span id="cb4-7">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(</span>
<span id="cb4-9">            user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.as_tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.user_col].iloc[idx]),</span>
<span id="cb4-10">            item<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.as_tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.item_col].iloc[idx]),</span>
<span id="cb4-11">            rating<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.as_tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.rating_col].iloc[idx]),</span>
<span id="cb4-12">            item_sequence<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.tensor(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_sequence"</span>].iloc[idx], dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">long</span>),</span>
<span id="cb4-13">        )</span></code></pre></div>
</div>
<p>This dataset is then wrapped into a PyTorch DataLoader for batching and shuffling.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">train_loader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(</span>
<span id="cb5-2">    train_dataset,</span>
<span id="cb5-3">    batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>batch_size,</span>
<span id="cb5-4">    shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb5-5">    num_workers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb5-6">)</span></code></pre></div>
</section>
</section>
<section id="integration-with-mlflow-for-experiment-tracking" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="integration-with-mlflow-for-experiment-tracking">Integration with MLflow for Experiment Tracking</h2>
<p>Every training run is automatically logged to MLflow through our configuration system:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">cfg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfigLoader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../cfg/common.yaml"</span>)</span>
<span id="cb6-2">cfg.run.run_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002-sequence-retriever-gru"</span></span>
<span id="cb6-3">cfg.run.experiment_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieve - Binary"</span></span>
<span id="cb6-4">cfg.init()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatically sets up MLflow logging</span></span></code></pre></div>
<p>We customzize our Lightning trainer module to help us automatically log:</p>
<ul>
<li><strong>Training metrics</strong>: Loss, learning rate, weight norms</li>
<li><strong>Validation metrics</strong>: ROC-AUC, PR-AUC, ranking metrics</li>
<li><strong>Model artifacts</strong>: Best model checkpoints</li>
</ul>
<p>While the model is training, we can observe how it converges and how it performs on the validation set in real-time on MLflow Web UI:</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/c5/mlflow-training.png" class="img-fluid"></p>
</div>
</section>
<section id="model-comparison" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="model-comparison">Model Comparison</h2>
<p>After training, we can compare the performance of our model with the popularity baseline:</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/static/model-compare.png" class="img-fluid"></p>
</div>
<p>The results validate our sequence-based approach with substantial improvements across all metrics. Let’s break down what these numbers tell us about our retrieval system’s effectiveness.</p>
<section id="recall-the-heart-of-retrieval-performance" class="level3">
<h3 class="anchored" data-anchor-id="recall-the-heart-of-retrieval-performance">Recall: The Heart of Retrieval Performance</h3>
<p>Since we’re building a retrieval system, <strong>recall is chosen to be our north-star metric</strong>. Recall measures what fraction of relevant items we successfully include in our candidate set. In the two-stage retrieval-ranking framework, if our retrieval system misses a relevant item, no amount of sophisticated ranking can fix that—the item is gone forever from the user’s recommendations.</p>
<p>Our sequence-based model achieves significant improvements in recall across thresholds:</p>
<ul>
<li><strong>Recall@100</strong>: 0.186 vs 0.062 (197% improvement)</li>
<li><strong>Recall@10</strong>: 0.038 vs 0.01 for the popularity baseline (280% improvement)</li>
</ul>
<p>These numbers tell two important stories. Assuming we would send hundreds of candidates as the output to the later ranking stage, the recall@100 improvement shows we’re nearly doubling our ability to capture relevant items in a typical retrieval pass. This is crucial for the downstream ranking stage—we’re giving it much better raw material to work with.</p>
<p>The recall@10 improvement indicates positive sign but for a different reason. When we deploy this retrieval system as a standalone recommender (without a ranking stage), users see these top-10 results directly. A 280% improvement means users are nearly three times more likely to find something relevant in their immediate recommendations.</p>
</section>
<section id="ranking-quality-validation" class="level3">
<h3 class="anchored" data-anchor-id="ranking-quality-validation">Ranking Quality Validation</h3>
<p>However, when talking about the end-result ranking for users, NDCG tells a more complete story. The significant improvements in NDCG ranking metrics provide additional validation: <strong>NDCG@10</strong>: 0.018 vs 0.005 (360% improvement). NDCG measures whether we’re putting the most relevant items at the top of our candidate list. This improvement suggests our retrieval system isn’t just finding relevant items—it’s finding them and scoring them appropriately.</p>
<p>This ranking quality matters regardless of whether we add a downstream ranking stage. If we deploy the retrieval system directly, users get better-ordered recommendations. If we add ranking later, we’re providing the ranking model with better-scored candidates to work with.</p>
</section>
<section id="what-this-means-for-users" class="level3">
<h3 class="anchored" data-anchor-id="what-this-means-for-users">What This Means for Users</h3>
<p>These metric improvements translate to concrete user experience benefits:</p>
<ul>
<li><strong>Immediate Impact</strong>: Users are 3x more likely to find relevant items in their top recommendations, dramatically reducing the time spent browsing through irrelevant suggestions.</li>
<li><strong>Better Cold Start</strong>: New users get personalized recommendations from their very first interaction, eliminating the typical cold start period of generic popular items.</li>
<li><strong>System Flexibility</strong>: The improved candidate quality gives us options—we can deploy this as a complete recommendation system now, or use it as a strong foundation for a more sophisticated ranking stage later.</li>
</ul>
<p>The results demonstrate that sequence modeling captures meaningful patterns in user behavior that static approaches miss entirely.</p>
<p>That said, while the uplifts are strong, the absolute numbers are still low. This is expected since we haven’t really optimized the model, so keep in mind that this is just the beginning. But if you ask me what high or good numbers look like, I would say this kind of improvement is already sufficient for us to deploy in production, given that we have no other models and are currently using the popularity baseline.</p>
</section>
</section>
<section id="model-registry-and-versioning" class="level2">
<h2 class="anchored" data-anchor-id="model-registry-and-versioning">Model Registry and Versioning</h2>
<p>As mentioned earlier, MLflow does not only help us track the training process but also provides a <strong>model registry</strong> for version management and easier deployment. We can easily log the training output artifacts to MLflow, while including a quality gate to ensure that only models that exceed minimum performance thresholds get registered:</p>
<div class="sourceCode" id="annotated-cell-9" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatic model registration after successful training</span></span>
<span id="annotated-cell-9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val_roc_auc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> cfg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>.min_roc_auc:</span>
<span id="annotated-cell-9-3">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Register model as new version</span></span>
<span id="annotated-cell-9-4">    mlflow.pytorch.log_model(</span>
<span id="annotated-cell-9-5">        model, </span>
<span id="annotated-cell-9-6">        cfg.train.retriever.mlf_model_name,</span>
<span id="annotated-cell-9-7">        registered_model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.train.retriever.mlf_model_name</span>
<span id="annotated-cell-9-8">    )</span>
<span id="annotated-cell-9-9">    </span>
<span id="annotated-cell-9-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Tag as champion if performance exceeds threshold</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-9" data-target-annotation="1">1</button><span id="annotated-cell-9-11" class="code-annotation-target">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val_roc_auc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> champion_threshold:</span>
<span id="annotated-cell-9-12">        client.set_registered_model_alias(</span>
<span id="annotated-cell-9-13">            cfg.train.retriever.mlf_model_name, </span>
<span id="annotated-cell-9-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"champion"</span>, </span>
<span id="annotated-cell-9-15">            latest_version</span>
<span id="annotated-cell-9-16">        )</span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-9" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-9" data-code-lines="11" data-code-annotation="1">Champion is a special alias for the current best model. It makes it easier for a new model to go online since we just need to tag it as champion without having to change the code or worry about version number.</span>
</dd>
</dl>
<p>That’s it. Finally we are ready to conclude the chapter. If you have made this far, I give you my respect!</p>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this chapter, we achieved a major milestone in our recommendation system journey—transitioning from simple heuristic-based approaches to personalized machine learning models that capture temporal patterns in user behavior. Here’s what we accomplished:</p>
<p><strong>From Theory to Practice:</strong></p>
<ul>
<li><strong>Why sequence modeling matters</strong>: We established that traditional collaborative filtering misses the crucial story hidden in the order and timing of user interactions. By modeling sequences, we can distinguish between users who follow structured learning paths versus those who jump between topics randomly.</li>
<li><strong>Real-time adaptation and cold start solutions</strong>: We demonstrated how sequence-based models solve two critical RecSys challenges. New users get personalized recommendations from their very first interaction, and the model adapts immediately to changing user interests without requiring retraining.</li>
</ul>
<p><strong>Architectural Decisions:</strong></p>
<ul>
<li><strong>Two-tower retrieval architecture</strong>: We chose a retrieval-focused approach over end-to-end ranking, enabling fast candidate selection from millions of items while maintaining millisecond-level response times.</li>
<li><strong>Session-only modeling</strong>: By building a “SoleSequenceRetriever” that relies entirely on interaction sequences without user embeddings, we prioritized adaptability and simplified serving infrastructure while solving cold start problems elegantly.</li>
</ul>
<p><strong>Technical Implementation:</strong></p>
<ul>
<li><strong>Masked pooling for variable sequences</strong>: We addressed the practical challenge of variable-length user sessions by implementing masked pooling that ignores padding tokens during sequence aggregation.</li>
<li><strong>Cosine similarity alignment</strong>: Our training objective uses the same cosine similarity computation as production serving, ensuring consistency between offline training and online inference.</li>
<li><strong>PyTorch Lightning integration</strong>: We leveraged Lightning’s capabilities for training loops, distributed training, and automatic MLflow integration, avoiding the complexity of custom implementations.</li>
</ul>
<p><strong>Validation and Results:</strong></p>
<ul>
<li><strong>Substantial performance improvements</strong>: Our sequence-based retriever achieved 197% improvement in Recall@100 and 280% improvement in Recall@10 compared to the popularity baseline, demonstrating that temporal patterns contain meaningful signals for recommendations.</li>
<li><strong>MLflow model registry</strong>: We established automated model versioning with quality gates, ensuring only models exceeding minimum performance thresholds get registered for potential deployment.</li>
</ul>
<p>This sequence-based retriever represents a complete, deployable recommendation system that can serve personalized suggestions in real-time. More importantly, it provides a solid foundation for future enhancements—whether adding a downstream ranking layer or incorporating additional features like item content or user demographics.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is available in the <code>notebooks/011-sequence-modeling.ipynb</code> file and the <code>src/sequence/</code> directory in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next?</h2>
<p>With our sequence-based retrieval model performing strongly, we have several exciting directions for future development:</p>
<p><strong>Short-term enhancements</strong> could include experimenting with Transformer-based pooling for better long-range dependency modeling or implementing more sophisticated negative sampling strategies like hard negative mining. Most importantly though, as long as request-level latency is still kept in check, we can always experiment with adding more input features to our towers.</p>
<p>Examples:</p>
<ul>
<li>Incorporating item content features to improve cold-start item recommendations</li>
<li>Provide query tower with user profile features, focusing on the information that we may be able to extract even for new users</li>
<li>Help model be aware of the timings of the items in the interaction sequence</li>
</ul>
<p><strong>Medium-term evolution</strong> might involve building the ranking layer on top of our retrieval system based on the actual feedback labels from the new deployed recommendation module.</p>
<p><strong>Production deployment</strong> includes setting up the vector database infrastructure for candidate indexing, implementing real-time serving APIs, and establishing A/B testing frameworks for online evaluation.</p>
<p>In <a href="../c6/index.qmd">Chapter 6</a>, we will continue our journey to build an end-to-end recommendation system by preparing the offline computation and online serving infrastructure, e.g.&nbsp;MLflow, Redis, Qdrant. The focus would shift a bit towards platform/infrastructure, but we only touch upon how we set them up locally so hopefully it should not be too much of a stretch.</p>
<p>Continue to the <a href="../c6/index.qmd">next chapter</a>.</p>
<hr>
<p><br> If you find this tutorial helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (May 2025). Implement a RecSys, Chapter 5:<br> Session-based Recommendation Model. dvquys.com. https://dvquys.com/projects/implement-recsys/c5/.</p>
</blockquote>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>If you don’t recall anything about king and queen… Well, yeah, cause I didn’t say anything about that (LOL). But I would assume if you read any random article about Word2Vec, you would run into this famous analogy.↩︎</p></li>
<li id="fn2"><p>The sequence itself can also serves as a long-term historical signal, like containing the interactions from two months ago. Just that in this case we would want to couple those interactions with their timestamps to help the model differentiate.↩︎</p></li>
<li id="fn3"><p>Or… it’s not entirely wrong if you think I’m just a lazy guy who doesn’t want to deal with the missing of user embedding for new users 😅.↩︎</p></li>
<li id="fn4"><p>I still remember how frustrating it was trying to implement DDP (Distributed Data Parallel) training loop with pure PyTorch. After figuring out that Lightning does not only handle that elegently but also has a lot of other features that I would have to implement myself, I never looked back.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>recsys</category>
  <category>implement-recsys-series</category>
  <guid>https://dvquys.com/projects/implement-recsys/c5/</guid>
  <pubDate>Fri, 30 May 2025 16:00:00 GMT</pubDate>
  <media:content url="https://dvquys.com/projects/implement-recsys/static/two-tower-architecture.png" medium="image" type="image/png" height="222" width="144"/>
</item>
<item>
  <title>Implement a RecSys, Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation</title>
  <link>https://dvquys.com/projects/implement-recsys/c4/</link>
  <description><![CDATA[ 





<p>This is the <strong>fourth chapter</strong> of the tutorial series: Implement a RecSys.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
List of chapters
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../c1/index.html">Chapter 1: Introduction and Project Overview</a><br>
</li>
<li><a href="../c2/index.html">Chapter 2: Understanding the Data and Feature Engineering</a><br>
</li>
<li><a href="../c3/index.html">Chapter 3: Negative Sampling</a><br>
</li>
<li><a href="../c4/index.html">Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation</a><br>
</li>
<li><a href="../c5/index.html">Chapter 5: Session-based Recommendation Model</a><br>
</li>
</ul>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../../../projects/implement-recsys/c3/index.html">Chapter 3</a>, inspired by how Word2Vec cleverly samples out-of-context words to train its language model, we implemented our own popularity-based sampling strategy to generate negative samples for our training dataset. Now we’re ready to tackle one of the most critical aspects of any ML project: <strong>evaluation</strong>.</p>
<p>We will discuss building our evaluation framework, setting up MLflow for experiment tracking, and implementing a popularity-based baseline model to illustrate the end-to-end process. A solid measuring foundation provides the groundwork for systematic model development—you’ll use these tools throughout all your different attempts at improving the model performance.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is available in the <code>notebooks/010-baseline-popular.ipynb</code> file and the <code>src/eval/</code> directory in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="the-challenges-of-evaluation-in-recommendation-systems" class="level2">
<h2 class="anchored" data-anchor-id="the-challenges-of-evaluation-in-recommendation-systems">The Challenges of Evaluation in Recommendation Systems</h2>
<p>Recommendation systems are notoriously tricky to evaluate. Unlike classification problems where accuracy is straightforward, the most significant challenge originates from the fact that RecSys has its root from information retrieval—where we essentially try to rank items. The issue comes when your new model produces a new ranking, but we don’t really know how users would react to this alternative ranking unless we deploy it in production. This makes offline evaluation feel quite limited for gauging real-world performance.</p>
<p>You may ask: Why don’t just run online experiment for any idea we have? Because they are typically expensive and slow. Methods like A/B tests in general require real users, real traffic, and real time to see if your changes work. So to iterate quickly on your backlog of a hundred different ideas, we don’t really have any other choices rather than resorting to offline evaluation as our development tool. That assumes, of course, that getting scores on old data actually points you towards better real-world models.</p>
<p>If you ask me how I navigate through all these sorts of uncertainties, here’s my take: if your offline metrics show clear improvements, that’s a good sign to move forward. If they show no change but you have strong reasons to believe your improvements are effective, don’t let that stop you from running an online experiment. Sometimes the best ideas don’t show up in offline metrics until they meet real users. Just make sure you can roll back quickly if you see significant drops in the early days.</p>
<p>Beyond this counterfactual challenge, recommendation systems must also struggle with implicit feedback where users rarely provide explicit ratings, ranking quality where the order of recommendations matters as much as the items themselves, personalization where a perfect recommendation for one user might be terrible for another, and temporal dynamics where user preferences evolve over time. In short, recommendations involve nuanced concepts of relevance, satisfaction, and utility that resist simple measurement.</p>
<p>To address these challenges, we need a comprehensive evaluation framework that can measure multiple aspects of recommendation quality. For the scope of this tutorial, we would be focusing on measuring both the ranking quality and the classification quality of the recommendations, while leaving the problem of counterfactual evaluation for a future post perhaps<sup>1</sup>.</p>
<p>All in all, we’ll focus on offline evaluation because it lets us iterate fast and learn the fundamentals. But important message worths repeating—the real test happens when your recommendations meet actual users.</p>
</section>
<section id="evaluation-metrics-for-recommendation-systems" class="level2">
<h2 class="anchored" data-anchor-id="evaluation-metrics-for-recommendation-systems">Evaluation Metrics for Recommendation Systems</h2>
<p>There are plenty of great posts diving into the details of these metrics so I would just briefly mention them here. Our evaluation framework implements several key metrics:</p>
<section id="ranking-metrics" class="level3">
<h3 class="anchored" data-anchor-id="ranking-metrics">Ranking Metrics</h3>
<ul>
<li><strong>Precision@K</strong>: What fraction of top-K recommendations are relevant?</li>
<li><strong>Recall@K</strong>: What fraction of relevant items appear in top-K recommendations?</li>
<li><strong>NDCG@K</strong>: Normalized Discounted Cumulative Gain—rewards relevant items appearing higher in the ranking</li>
</ul>
</section>
<section id="diversity-metrics" class="level3">
<h3 class="anchored" data-anchor-id="diversity-metrics">Diversity Metrics</h3>
<ul>
<li><strong>Personalization</strong>: Measures how different recommendations are across users (higher is better)</li>
</ul>
</section>
<section id="classification-metrics" class="level3">
<h3 class="anchored" data-anchor-id="classification-metrics">Classification Metrics</h3>
<ul>
<li><strong>ROC-AUC</strong>: Area under the ROC curve for binary relevance prediction</li>
<li><strong>Precision-Recall curves</strong>: Trade-offs between precision and recall at different thresholds</li>
</ul>
<p>Why classification metrics? Isn’t this a ranking problem? Well, the answer is yes and no. Essentially the choice of modeling approach is up to us, but there is one valid approach in which we would formulate the problem as predicting whether a user would interact with an item or not. As the output of this model would normally be a score between 0 and 1, we can then use the ROC-AUC to evaluate how well a model is able to rank the relevant items higher that the irrelevant ones, which is a form of ranking quality in and of itself. The other main benefit for using ROC-AUC is that it’s also a built-in metric for almost all ML frameworks, which makes it easy to measure without the need to implement it from scratch (lazy person saying).</p>
<p>If you wish to learn more, I suggest checking out <a href="https://amitness.com/posts/information-retrieval-evaluation">this post by Amit Chaudhary</a> and the <a href="https://docs.evidentlyai.com/metrics/all_metrics#ranking">Evidently documentation on Ranking metrics</a>.</p>
</section>
</section>
<section id="the-baseline-recommender-system" class="level2">
<h2 class="anchored" data-anchor-id="the-baseline-recommender-system">The baseline recommender system</h2>
<p>To demonstrate how we evaluate a model, let’s first build a baseline one for easier illustration. This will serve as a sanity check for our evaluation framework and provide a performance benchmark for more complex models to beat.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Start MLflow
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you have followed the README instructions (see <a href="../../../projects/implement-recsys/c1/index.html">Chapter 1</a>), you should have already started MLflow. If not, you can start it by running the following command:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> ml-platform-up <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> ml-platform-logs</span></code></pre></div>
</div>
</div>
<p>In the world of RecSys, the most popular base line is “popular” recommender (pun intended). It’s simple, fast, easy to implement, easy to understand for users, and sometimes quite effective, especially compared to the effort required to put up.</p>
<p>To get the most popular items, we only need a few lines of Pandas code to group by item and count the number of interactions: <img src="https://dvquys.com/projects/implement-recsys/c4/pop-impl-1.png" class="img-fluid"></p>
<p>Then, for each of the user in our validation set, we can simply assign the most popular items to them: <img src="https://dvquys.com/projects/implement-recsys/c4/pop-impl-2.png" class="img-fluid"></p>
<p>That’s it. We now have recommendations provided for our users. Now we can move to the actual evaluation part.</p>
</section>
<section id="how-we-set-up-evaluation-for-our-project" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-we-set-up-evaluation-for-our-project">How We Set Up Evaluation for our Project</h2>
<p>We need to align the recommendations with the ground truth labels. The <code>src/eval/utils.py</code> module provides two functions for this purpose:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/eval/utils.py</strong></pre>
</div>
<div class="sourceCode" id="cb2" data-filename="src/eval/utils.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span> <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb2-2">    create_label_df,           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create ground truth labels</span></span>
<span id="cb2-3">    merge_recs_with_target,    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge recommendations with labels  </span></span>
<span id="cb2-4">)</span>
<span id="cb2-5"></span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> create_label_df(df, user_col, item_col, rating_col, timestamp_col):</span>
<span id="cb2-8">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Creates a ranking of items for each user based on their ratings and interaction timestamps, providing the ground truth for evaluation.</span></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-11">    label_cols <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [user_col, item_col, rating_col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating_rank"</span>]</span>
<span id="cb2-12">    label_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-13">        df.sort_values([timestamp_col], ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>])</span>
<span id="cb2-14">        .assign(</span>
<span id="cb2-15">            rating_rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df.groupby(user_col)[rating_col].rank(</span>
<span id="cb2-16">                method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span>, ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb2-17">            )</span>
<span id="cb2-18">        )</span>
<span id="cb2-19">        .sort_values([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating_rank"</span>], ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>])[label_cols]</span>
<span id="cb2-20">    )</span>
<span id="cb2-21">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> label_df</span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> merge_recs_with_target(recs_df, label_df, user_col, item_col, rating_col, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb2-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb2-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Align your model's recommendations with the ground truth and handling cases where recommended items don't appear in the validation set.</span></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb2-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (</span>
<span id="cb2-28">        recs_df.pipe(</span>
<span id="cb2-29">            <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: pd.merge(</span>
<span id="cb2-30">                df, label_df[[user_col, item_col, rating_col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating_rank"</span>]],</span>
<span id="cb2-31">                on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[user_col, item_col], how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"outer"</span></span>
<span id="cb2-32">            )</span>
<span id="cb2-33">        )</span>
<span id="cb2-34">        .assign(</span>
<span id="cb2-35">            rating<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df[rating_col].fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>),</span>
<span id="cb2-36">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill the recall with ranking = top_k_retrieve + 1 so that the recall calculation is correct</span></span>
<span id="cb2-37">            rec_ranking<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rec_ranking"</span>].fillna(k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>),</span>
<span id="cb2-38">        )</span>
<span id="cb2-39">        .sort_values([user_col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rec_ranking"</span>])</span>
<span id="cb2-40">    )</span></code></pre></div>
</div>
<section id="metric-logging-with-evidently" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="metric-logging-with-evidently">Metric Logging with Evidently</h3>
<p>The <code>src/eval/log_metrics.py</code> module uses the <a href="https://www.evidentlyai.com/">Evidently</a> library to compute and log comprehensive metrics:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/eval/log_metrics.py</strong></pre>
</div>
<div class="sourceCode" id="cb3" data-filename="src/eval/log_metrics.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_ranking_metrics(cfg: Config, eval_df):</span>
<span id="cb3-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Compute and log ranking metrics using Evidently.</span></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Automatically integrates with MLflow for experiment tracking.</span></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb3-6">    column_mapping <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ColumnMapping(</span>
<span id="cb3-7">        recommendations_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rank"</span>,</span>
<span id="cb3-8">        target<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.data.rating_col,</span>
<span id="cb3-9">        prediction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rec_ranking"</span>, </span>
<span id="cb3-10">        item_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.data.item_col,</span>
<span id="cb3-11">        user_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.data.user_col,</span>
<span id="cb3-12">    )</span>
<span id="cb3-13"></span>
<span id="cb3-14">    report <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Report(</span>
<span id="cb3-15">        metrics<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb3-16">            NDCGKMetric(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>.top_k_rerank),</span>
<span id="cb3-17">            RecallTopKMetric(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>.top_k_retrieve),</span>
<span id="cb3-18">            PrecisionTopKMetric(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>.top_k_rerank),</span>
<span id="cb3-19">            FBetaTopKMetric(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>.top_k_rerank),</span>
<span id="cb3-20">            PersonalizationMetric(k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">eval</span>.top_k_rerank),</span>
<span id="cb3-21">        ]</span>
<span id="cb3-22">    )</span>
<span id="cb3-23">    </span>
<span id="cb3-24">    report.run(reference_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, current_data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>eval_df, column_mapping<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>column_mapping)</span>
<span id="cb3-25">    </span>
<span id="cb3-26">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Automatically log to MLflow if configured</span></span>
<span id="cb3-27">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> cfg.run.log_to_mlflow:</span>
<span id="cb3-28">        mlflow.log_artifact(evidently_report_fp)</span>
<span id="cb3-29">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Log individual metrics for easy comparison</span></span>
<span id="cb3-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> metric_result <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> report.as_dict()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"metrics"</span>]:</span>
<span id="cb3-31">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ... metric logging logic</span></span>
<span id="cb3-32">    </span>
<span id="cb3-33">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> report</span></code></pre></div>
</div>
<p>There is also a <code>log_classification_metrics</code> function that follows the similar pattern, but for the task of evaluation classification accuracy.</p>
<p>The output is we have HTML report like this:</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/c4/evidently-classification.png" class="img-fluid"></p>
</div>
<p>Do you notice that those report files are available in a nice web-based UI? If you are not familiar with MLflow, the next section will explain.</p>
</section>
</section>
<section id="experiment-tracking-with-mlflow" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="experiment-tracking-with-mlflow">Experiment Tracking with MLflow</h2>
<p>Machine learning development is fundamentally an iterative process—the more ideas we systematically test, the better our chances of discovering meaningful improvements. This iterative nature means we’re constantly cycling through hypotheses: trying new features, adjusting hyperparameters, experimenting with different architectures, and refining our approach based on results.</p>
<p>To maximize this exploration while maintaining scientific rigor, we need more than just robust evaluation metrics; we need a convenient way to <strong>track every experiment</strong>, compare results across iterations, and easily revisit previous approaches. Comprehensive experiment logging creates a safety net that encourages bold experimentation—when you know you can reproduce any previous result or quickly understand what changed between runs, you’re more willing to try ambitious ideas that might not work. This psychological safety accelerates the entire development cycle.</p>
<p>There are often no restrictions on how you should track your experiments. Even manually keeping things in a spreadsheet works just fine. Based on my own experience, I feel like <a href="https://mlflow.org/">MLflow</a> is the most convenient way though, since this tool is mature and well-integrated with other ML frameworks. It also offers other fundamental capabilities like model registry which becomes very handy when we talk about model serving and deployment.</p>
<p>As MLflow should be enabled in our every model training run, I put most of the MLflow integration implementation in our configuration code:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.cfg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfigLoader</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load configuration and initialize MLflow</span></span>
<span id="cb4-4">cfg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfigLoader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"../cfg/common.yaml"</span>)</span>
<span id="cb4-5">cfg.run.run_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001-baseline-popular"</span></span>
<span id="cb4-6">cfg.run.experiment_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieve - Binary"</span></span>
<span id="cb4-7">cfg.init()</span></code></pre></div>
<p>The <code>cfg.init()</code> method handles all the MLflow setup:</p>
<div class="sourceCode" id="annotated-cell-4" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> lightning.pytorch.loggers <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> MLFlowLogger</span>
<span id="annotated-cell-4-2"></span>
<span id="annotated-cell-4-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> ConfigLoader:</span>
<span id="annotated-cell-4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ...</span></span>
<span id="annotated-cell-4-5"></span>
<span id="annotated-cell-4-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> init(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="annotated-cell-4-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Initialize MLflow experiment tracking automatically."""</span></span>
<span id="annotated-cell-4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run.log_to_mlflow:</span>
<span id="annotated-cell-4-9">            logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Setting up MLflow experiment </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>run<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>experiment_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="annotated-cell-4-10">            mlflow.set_experiment(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run.experiment_name)</span>
<span id="annotated-cell-4-11">            mlflow.start_run(run_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run.run_name)</span>
<span id="annotated-cell-4-12">            </span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-4" data-target-annotation="1">1</button><span id="annotated-cell-4-13" class="code-annotation-target">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._mlf_logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MLFlowLogger(</span>
<span id="annotated-cell-4-14">                experiment_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.run.experiment_name,</span>
<span id="annotated-cell-4-15">                run_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mlflow.active_run().info.run_id,</span>
<span id="annotated-cell-4-16">                tracking_uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mlflow_uri,</span>
<span id="annotated-cell-4-17">                log_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="annotated-cell-4-18">            )</span>
<span id="annotated-cell-4-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-4" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-4" data-code-lines="13" data-code-annotation="1">Note that MLFlowLogger here is a PyTorch Lightning logger, which we would use later when defining our PyTorch Lightning model for logging our model training progress.</span>
</dd>
</dl>
<p>In the end of our run, we can call this method <code>cfg.log_config_to_mlflow()</code> to log all parameters to MLflow:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> log_config_to_mlflow(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Log all configuration parameters to MLflow with dot notation."""</span></span>
<span id="cb5-3">    flat_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> flatten_dict(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.config.model_dump())</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key, value <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> flat_config.items():</span>
<span id="cb5-5">        mlflow.log_param(key, value)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># e.g., "train.learning_rate": 0.01</span></span></code></pre></div>
<p>The result is we can access our experiment parameters like this:</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/c4/mlflow-overview.png" class="img-fluid"></p>
</div>
<p>If for some reasons we don’t want to log your run to MLflow e.g.&nbsp;when we starts to develop our notebook, we can easily control this behavior by setting the <code>log_to_mlflow</code> flag to <code>false</code> in our configuration file:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># cfg/common.yaml</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">run</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span></span>
<span id="cb6-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">log_to_mlflow</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span>
<span id="cb6-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">experiment_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Retrieve - Binary"</span></span></code></pre></div>
<p>At this point, you’ve got a working popularity-based recommender, a full offline evaluation pipeline, and MLflow tracking wired into your runs. With those pieces in place, you can safely try out new ideas, compare experiments side by side, and roll back if something goes sideways.</p>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this chapter, we established the critical evaluation infrastructure that will power your recommendation system development. Here’s what we covered:</p>
<ul>
<li><strong>The fundamental evaluation challenges</strong>: We explored why recommendation systems are uniquely difficult to evaluate, mostly from the angle of counterfactual problem (we only see what users actually encountered) which makes simple accuracy metrics inadequate.</li>
<li><strong>Online vs offline evaluation strategy</strong>: We established the principle that while online metrics are the ultimate business goal, offline evaluation serves as our rapid iteration tool. The key insight: offline improvements don’t always translate to online wins, but they provide essential guidance for systematic development.</li>
<li><strong>Comprehensive evaluation metrics</strong>: We implemented a multi-dimensional framework using Evidently that captures ranking quality (Precision@K, Recall@K, NDCG@K), diversity (Personalization), and classification performance (ROC-AUC, Precision-Recall curves). We also justified why classification metrics make sense for recommendation systems when framed as binary relevance prediction.</li>
<li><strong>Popularity-based baseline implementation</strong>: We built our first recommender system—a simple but effective popularity-based model that assigns the most frequently interacted items to all users. This baseline serves as our performance benchmark and validates that our evaluation pipeline works correctly.</li>
<li><strong>MLflow experiment tracking integration</strong>: We created a configuration-driven system that automatically handles experiment setup, parameter logging, and artifact storage. This infrastructure encourages bold experimentation by providing the safety net of full reproducibility.</li>
</ul>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is available in the <code>notebooks/010-baseline-popular.ipynb</code> file and the <code>src/eval/</code> directory in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="whats-next" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next</h2>
<p>In <a href="../../../projects/implement-recsys/c5/index.html">Chapter 5</a>, we’ll build on this foundation to implement session-based recommendation models that can capture temporal patterns in user behavior. The evaluation framework you’ve built here will be essential for measuring whether these more complex models actually improve upon our simple baseline. And if the our evaluation setup does a good job, the results would be hard to miss:</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/static/model-compare.png" class="img-fluid"></p>
</div>
<p>As you can see, MLflow helps comparing model iterations easily 😉.</p>
<p>Continue to the <a href="../../../projects/implement-recsys/c5/index.html">next chapter</a>.</p>
<hr>
<p><br> If you find this tutorial helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (May 2025). Implement a RecSys, Chapter 4:<br> Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation. dvquys.com. https://dvquys.com/projects/implement-recsys/c4/.</p>
</blockquote>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>You may take a look at this writing <a href="https://eugeneyan.com/writing/counterfactual-evaluation/">Counterfactual Evaluation for Recommendation Systems</a> to learn more.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>recsys</category>
  <category>implement-recsys-series</category>
  <guid>https://dvquys.com/projects/implement-recsys/c4/</guid>
  <pubDate>Thu, 29 May 2025 16:00:00 GMT</pubDate>
  <media:content url="https://dvquys.com/projects/implement-recsys/c4/evidently-classification.png" medium="image" type="image/png" height="57" width="144"/>
</item>
<item>
  <title>Implement a RecSys, Chapter 3: Negative Sampling</title>
  <link>https://dvquys.com/projects/implement-recsys/c3/</link>
  <description><![CDATA[ 





<p>This is the <strong>third chapter</strong> of the tutorial series: Implement a RecSys.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
List of chapters
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../c1/index.html">Chapter 1: Introduction and Project Overview</a><br>
</li>
<li><a href="../c2/index.html">Chapter 2: Understanding the Data and Feature Engineering</a><br>
</li>
<li><a href="../c3/index.html">Chapter 3: Negative Sampling</a><br>
</li>
<li><a href="../c4/index.html">Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation</a><br>
</li>
<li><a href="../c5/index.html">Chapter 5: Session-based Recommendation Model</a><br>
</li>
</ul>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../../../projects/implement-recsys/c2/index.html">Chapter 2</a>, we dug into our Amazon dataset and built a solid feature preprocessing pipeline. But we’re not ready to train any models yet. We’re missing something crucial: the labels that will teach our model the difference between what users want and what they don’t.</p>
<p>We already know which items users bought. So here’s a natural idea: let’s turn this into a sequence prediction problem. Show the model a user’s past actions, then ask it to predict what comes next.</p>
<p>If this idea of predicting next thing based on a sequence of things sounds familiar, then it’s expected. This is exactly what researchers in natural language processing figured out years ago. Take Word2Vec. It’s a simple but brilliant model that learns word relationships by studying which words hang out together. Word2Vec breaks a sentence into input-output pairs where the surrounding words are the input and the hidden target word is what you’re trying to predict.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dvquys.com/projects/implement-recsys/c3/skipgram.webp" class="img-fluid figure-img"></p>
<figcaption>Source: <a href="https://medium.com/@zafaralibagh6/a-simple-word2vec-tutorial-61e64e38a6a1">A simple Word2Vec tutorial</a></figcaption>
</figure>
</div>
<p>At each step, we pick a target word along with its neighboring context to form a positive training example. How about the negatives? That’s where negative sampling comes in. Rather than letting the model see only context words that belong together, we throw in some randomly selected words from outside the context. This mix challenges the model, teaching it to learn the patterns of words that appear in similar contexts.</p>
<p>Now let’s apply this to our book dataset. When a user clicks, views, or buys something, that’s a clear positive signal. But what about the millions of items they never touch? Are these items bad, or did the user just never discover them? Negative sampling helps us figure this out. It gives the model examples of what a user probably won’t pick.</p>
<p>I personally find this analogy helpful: Training a recommendation model without negative samples is like teaching someone to recognize cats by only showing them cat pictures. They might think everything is a cat!</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is in <code>notebooks/002-negative-sample.ipynb</code> and <code>src/negative_sampling.py</code> in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="negative-sampling-strategies" class="level2">
<h2 class="anchored" data-anchor-id="negative-sampling-strategies">Negative Sampling Strategies</h2>
<section id="random-sampling" class="level3">
<h3 class="anchored" data-anchor-id="random-sampling">Random Sampling</h3>
<p>Let’s start with the obvious approach: just pick random items the user hasn’t touched.</p>
<p>This is faily straightforward to code up. You grab all the items a user hasn’t interacted with, throw them in a hat, and pull out however many negatives you need. It’s fast, it’s unbiased, and it works.</p>
<p>But there’s a problem. Some of those “random” negatives might actually be items the user would love if they found them. There’s also another issue: the model might get biased toward popular items, since they show up in lots of positive pairs.</p>
</section>
<section id="popularity-based-sampling" class="level3">
<h3 class="anchored" data-anchor-id="popularity-based-sampling">Popularity-Based Sampling</h3>
<p>To deal with the above popularity biase, instead of picking negatives randomly, we sample them based on how popular they are in the dataset. This makes popular items get chosen as negatives more often.</p>
<p>Why does this work better? A popular item has a higher chance of being liked by any user than a random item. So when we use popular items as negatives, we’re creating harder training examples. We’re forcing the model to learn why this specific user didn’t interact with this popular item, even though lots of other people did.</p>
<p>This has a nice side effect. It helps the model learn beyond simple popularity bias. Instead of just recommending whatever’s trending, it has to figure out what makes items relevant for specific users.</p>
<p>The downside? It’s more work to implement. You need to track popularity statistics. And there’s a catch: popular items aren’t always bad choices for a user. Sometimes they’re popular because they’re actually good. So when we force a negative for a user-item pair, it might confuse the model.</p>
</section>
<section id="hard-negative-mining" class="level3">
<h3 class="anchored" data-anchor-id="hard-negative-mining">Hard Negative Mining</h3>
<p>This is the fancy approach. You need a model that’s already somewhat trained, and you use it to find items it thinks a user would like—but shouldn’t. These become your negative samples.</p>
<p>It’s like having a sparring partner who knows your weaknesses. The model keeps getting challenged by examples that are specifically designed to trip it up. As the model gets better, the negatives get harder, creating a virtuous cycle of improvement.</p>
<p>Sounds great, right? But it’s not always worth the extra effort, especially at the start. You need to train iteratively, which takes more time and compute. And there’s always the risk that you’re just teaching the model to overfit to its own biases.</p>
<p>For this project, we’ll use <strong>popularity-based negative sampling</strong>. It strikes a good balance between effectiveness and simplicity.</p>
</section>
</section>
<section id="lets-implement" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="lets-implement">Let’s implement</h2>
<p>The full implementation is <a href="https://github.com/dvquy13/recsys-seq-model/blob/main/src/negative_sampling.py">here</a>.</p>
<p>Function signature:</p>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>src/negative_sampling.py</strong></pre>
</div>
<div class="sourceCode" id="cb1" data-filename="src/negative_sampling.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"></span>
<span id="cb1-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> generate_negative_samples(</span>
<span id="cb1-3">    df,</span>
<span id="cb1-4">    user_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_indice"</span>,</span>
<span id="cb1-5">    item_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_indice"</span>, </span>
<span id="cb1-6">    label_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span>,</span>
<span id="cb1-7">    neg_label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb1-8">    seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-9">) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> pd.DataFrame:</span>
<span id="cb1-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Generate negative samples for a user-item interaction DataFrame.</span></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    The key insight: sample negative items proportional to their </span></span>
<span id="cb1-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    popularity to create more challenging training scenarios.</span></span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb1-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        df (pd.DataFrame): DataFrame containing user-item interactions.</span></span>
<span id="cb1-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        user_col (str): Column name representing users.</span></span>
<span id="cb1-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        item_col (str): Column name representing items.</span></span>
<span id="cb1-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        label_col (str): Column name for the interaction label (e.g., rating).</span></span>
<span id="cb1-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        neg_label (int): Label to assign to negative samples (default is 0).</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        seed (int, optional): Seed for random number generator to ensure reproducibility.</span></span>
<span id="cb1-23"></span>
<span id="cb1-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns:</span></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        pd.DataFrame: DataFrame containing generated negative samples.</span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span></code></pre></div>
</div>
<section id="step-1-calculate-item-popularity" class="level3">
<h3 class="anchored" data-anchor-id="step-1-calculate-item-popularity">Step 1: Calculate Item Popularity</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Calculate item popularity based on interaction frequency</span></span>
<span id="cb2-2">item_popularity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[item_col].value_counts()</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Convert to sampling probabilities to be used in the next step</span></span>
<span id="cb2-5">popularity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_popularity.values.astype(np.float64)</span>
<span id="cb2-6">total_popularity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> popularity.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb2-7">sampling_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> popularity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total_popularity</span></code></pre></div>
<p>This creates a probability distribution where more popular items have higher chances of being selected as negatives.</p>
</section>
<section id="step-2-identify-negative-candidates" class="level3">
<h3 class="anchored" data-anchor-id="step-2-identify-negative-candidates">Step 2: Identify Negative Candidates</h3>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create user-item interaction mapping</span></span>
<span id="cb3-2">user_item_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(user_col)[item_col].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>).to_dict()</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For each user, find items they haven't interacted with</span></span>
<span id="cb3-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> user, pos_items <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> user_item_dict.items():</span>
<span id="cb3-6">    negative_candidates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_items_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pos_items</span></code></pre></div>
<p>We make sure we only sample from items the user hasn’t already interacted with.</p>
</section>
<section id="step-3-popularity-weighted-sampling" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="step-3-popularity-weighted-sampling">Step 3: Popularity-Weighted Sampling</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a mapping from item to index to quickly access item-related data.</span></span>
<span id="cb4-2">items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> item_popularity.index.values</span>
<span id="cb4-3">item_to_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {item: idx <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> idx, item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(items)}</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample negatives proportional to popularity</span></span>
<span id="cb4-6">candidate_indices <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [item_to_index[item] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> negative_candidates_list]</span>
<span id="cb4-7">candidate_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampling_probs[candidate_indices]</span>
<span id="cb4-8">candidate_probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/=</span> candidate_probs.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Normalize</span></span>
<span id="cb4-9"></span>
<span id="cb4-10">sampled_items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(</span>
<span id="cb4-11">    negative_candidates_list, </span>
<span id="cb4-12">    size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>num_neg, </span>
<span id="cb4-13">    replace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, </span>
<span id="cb4-14">    p<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>candidate_probs</span>
<span id="cb4-15">)</span></code></pre></div>
<p>This makes sure popular items are more likely to be selected as negatives, creating harder training examples.</p>
<p>In our implementation, we choose to have the same number of negative samples as positive samples. This helps us avoid dealing with imbalanced training data. But feel free to experiment with different ratios (you’ll need to update the implementation).</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">num_pos <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(pos_items)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Number of positive interactions</span></span>
<span id="cb5-2">num_neg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(num_pos, num_neg_candidates)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Match positive count</span></span></code></pre></div>
<p>Like other crucial parts of our pipeline, let’s test this with some mock data to make sure it works.</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/c3/gen-negative-samples-test.png" class="img-fluid"></p>
</div>
</section>
</section>
<section id="adding-features-to-the-generated-negative-samples" class="level2">
<h2 class="anchored" data-anchor-id="adding-features-to-the-generated-negative-samples">Adding Features to the generated negative samples</h2>
<p>As you can see from the above output, we only have the item indice and the label. We also need to populate the new negative observations with the same features as the positive ones, i.e.&nbsp;the sequence of previously interacted items.</p>
<p>Since these negative samples come from the same user, we can use the same features as the positive ones. We just need to use the timestamp of the corresponding positive interaction.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_features_to_neg_df(pos_df, neg_df, user_col, timestamp_col, feature_cols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]):</span>
<span id="cb6-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb6-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Add features from positive samples to negative samples DataFrame.</span></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb6-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Key insight: Negative samples should have realistic timestamps</span></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    that align with when the user was actually active.</span></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb6-8">    </span>
<span id="cb6-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create pseudo timestamps for negatives</span></span>
<span id="cb6-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This timestamp pseudo column is used as join key to the positive samples, ensuring that each negative</span></span>
<span id="cb6-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># maps to one positive sample and get the positive's features.</span></span>
<span id="cb6-12">    neg_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> neg_df.assign(</span>
<span id="cb6-13">        timestamp_pseudo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df.groupby(user_col).cumcount() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb6-14">    )</span>
<span id="cb6-15">    </span>
<span id="cb6-16">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Merge with corresponding positive interaction timestamps</span></span>
<span id="cb6-17">    neg_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.merge(</span>
<span id="cb6-18">        neg_df,</span>
<span id="cb6-19">        pos_df.assign(</span>
<span id="cb6-20">            timestamp_pseudo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> df: df.groupby([user_col])[timestamp_col].rank(</span>
<span id="cb6-21">                method<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"first"</span></span>
<span id="cb6-22">            )</span>
<span id="cb6-23">        )[[user_col, timestamp_col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp_pseudo"</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>feature_cols]],</span>
<span id="cb6-24">        how<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"left"</span>,</span>
<span id="cb6-25">        on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[user_col, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp_pseudo"</span>],</span>
<span id="cb6-26">    ).drop(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp_pseudo"</span>])</span>
<span id="cb6-27">    </span>
<span id="cb6-28">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> neg_df</span></code></pre></div>
</section>
<section id="concat-and-re-split-train-test" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="concat-and-re-split-train-test">Concat and re-split train-test</h2>
<p>After adding features to the negative samples, we can combine them with the positive samples. Then we re-split the dataset based on the timestamp milestone we used in our original train-test split.</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/c3/concat-pos-neg.png" class="img-fluid"></p>
</div>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this chapter, we tackled the tricky problem of implicit feedback in recommendation systems. Here’s what we covered:</p>
<ul>
<li><strong>Why we need negative samples</strong>: Without them, our model would be like someone trying to recognize cats by only seeing cat pictures. We need examples of what users don’t want to create balanced learning.</li>
<li><strong>Three approaches to negative sampling</strong>: We looked at random sampling (simple but not very challenging), popularity-based sampling (our chosen approach that creates harder training scenarios), and hard negative mining (powerful but complex).</li>
<li><strong>Our popularity-based implementation</strong>: We built a system that samples negative items based on their popularity. This forces our model to learn why a user didn’t interact with popular items that others liked.</li>
<li><strong>Keeping things balanced</strong>: We generate equal numbers of positive and negative samples for each user (1:1 ratio) to avoid bias in either direction.</li>
<li><strong>Adding realistic features</strong>: We make sure our negative samples have proper timestamps and features that align with when users were actually active. This maintains temporal consistency for sequence modeling.</li>
</ul>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is in <code>notebooks/002-negative-sample.ipynb</code> and <code>src/negative_sampling.py</code> in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next?</h2>
<p>With our balanced dataset of positive and negative samples, we’re ready to tackle model evaluation. In <a href="../../../projects/implement-recsys/c4/index.html">Chapter 4</a>, we’ll set up our evaluation framework and experiment tracking with MLflow while implementing a baseline model along the way as an illustration. This will give us the foundation for systematic model development and comparison.</p>
<p>Continue to the <a href="../../../projects/implement-recsys/c4/index.html">next chapter</a>.</p>
<hr>
<p><br> If you find this tutorial helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (May 2025). Implement a RecSys, Chapter 3:<br> Negative Sampling. dvquys.com. https://dvquys.com/projects/implement-recsys/c3/.</p>
</blockquote>


</section>

 ]]></description>
  <category>recsys</category>
  <category>implement-recsys-series</category>
  <guid>https://dvquys.com/projects/implement-recsys/c3/</guid>
  <pubDate>Sun, 25 May 2025 16:00:00 GMT</pubDate>
  <media:content url="https://dvquys.com/projects/implement-recsys/c3/skipgram.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>Implement a RecSys, Chapter 2: Understanding the Data and Feature Engineering</title>
  <link>https://dvquys.com/projects/implement-recsys/c2/</link>
  <description><![CDATA[ 





<p>This is the <strong>second chapter</strong> of the tutorial series: Implement a RecSys.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
List of chapters
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../c1/index.html">Chapter 1: Introduction and Project Overview</a><br>
</li>
<li><a href="../c2/index.html">Chapter 2: Understanding the Data and Feature Engineering</a><br>
</li>
<li><a href="../c3/index.html">Chapter 3: Negative Sampling</a><br>
</li>
<li><a href="../c4/index.html">Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation</a><br>
</li>
<li><a href="../c5/index.html">Chapter 5: Session-based Recommendation Model</a><br>
</li>
</ul>
</div>
</div>
</div>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In <a href="../../../projects/implement-recsys/c1/index.html">Chapter 1</a>, we set up our development environment and explored the project architecture. Now it’s time to dive into the heart of any recommendation system: <strong>data</strong>. The quality of our recommendations depends entirely on how well we understand, process, and engineer features from our data.</p>
<p>This chapter focuses on the data pipeline from raw data to model-ready features. We’ll explore the Amazon product dataset, understand user-item interaction sequences, and build the feature engineering pipeline that will power our session-based recommender.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is available in the <code>notebooks/000-prep-data.ipynb</code> and <code>notebooks/001-features.ipynb</code> files in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="dataset-overview-amazon-reviews-2023" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="dataset-overview-amazon-reviews-2023">Dataset Overview: Amazon Reviews 2023</h2>
<p>A good dataset for this kind of sequential recommendation project would typically have the following characteristics:</p>
<ol type="1">
<li><strong>Temporal richness</strong>: Each interaction has a timestamp, enabling sequence modeling</li>
<li><strong>Scale</strong>: Millions of interactions across thousands of users and items</li>
<li><strong>Real-world patterns</strong>: Authentic user behavior with natural sparsity</li>
</ol>
<p>Among the well-known public datasets, I chose the <a href="https://amazon-reviews-2023.github.io/">Amazon Reviews 2023</a> dataset from the McAuley Lab, specifically the “Books” category. Beyond the characteristics above, this dataset has other useful features—like reviews for both users and items—with plenty of observations to work with.</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/static/dataset.png" class="img-fluid"></p>
</div>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/static/dataset-info.png" class="img-fluid"></p>
</div>
<p>The main schema of the dataset is as simple as follows:</p>
<div class="sourceCode" id="annotated-cell-1" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># From cfg/common.yaml</span></span>
<span id="annotated-cell-1-2">data:</span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="1">1</button><span id="annotated-cell-1-3" class="code-annotation-target">  user_col: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_id"</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="2">2</button><span id="annotated-cell-1-4" class="code-annotation-target">  item_col: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parent_asin"</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="3">3</button><span id="annotated-cell-1-5" class="code-annotation-target">  rating_col: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-1" data-target-annotation="4">4</button><span id="annotated-cell-1-6" class="code-annotation-target">  timestamp_col: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-1" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="3" data-code-annotation="1">Unique user identifier</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="4" data-code-annotation="2">Product identifier (in our case, the ASIN—Amazon Standard Identification Number)</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="3">3</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="5" data-code-annotation="3">User rating (1-5 scale)</span>
</dd>
<dt data-target-cell="annotated-cell-1" data-target-annotation="4">4</dt>
<dd>
<span data-code-cell="annotated-cell-1" data-code-lines="6" data-code-annotation="4">Interaction timestamp</span>
</dd>
</dl>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Configuration Management
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.cfg <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ConfigLoader</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load configuration</span></span>
<span id="cb1-4">cfg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ConfigLoader(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cfg/common.yaml"</span>)</span></code></pre></div>
<p>Throughout this project, we store most configuration in <code>cfg/common.yaml</code>. This design does not only make it easier for notebooks and scripts to access their inputs and outputs but also help us try different configurations quickly.</p>
</div>
</div>
</div>
</section>
<section id="data-sampling-and-filtering" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data-sampling-and-filtering">Data Sampling and Filtering</h2>
<p>As ML is mostly about iterative development, the main rationale of sampling and filtering is to have a small but decent enough dataset to experiment different ideas <strong>fast</strong>. The more experiments we run, the more likely we would introduce improvements to our models.</p>
<p>What does it mean for a decent RecSys dataset? One of the key criteria is <strong>sparsity</strong>—the ratio of observed interactions to all possible user-item pairs.</p>
<p>To understand why sparsity is problematic, consider the interaction matrix where each cell represents a potential user-item interaction:</p>
<ul>
<li><strong>Matrix size</strong>: <code>num_users × num_items</code> (total possible interactions)</li>
<li><strong>Actual interactions</strong>: Much smaller number of observed ratings/clicks</li>
<li><strong>Sparsity</strong>: <code>1 - (actual_interactions / (num_users × num_items))</code></li>
</ul>
<p>The sparsity problem gets <strong>quadratically worse</strong> as datasets grow:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Small dataset example</span></span>
<span id="cb2-2">users <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">000</span>, items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">000</span> → possible interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">M</span></span>
<span id="cb2-3">actual interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">000</span> → sparsity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span></span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Larger dataset </span></span>
<span id="cb2-6">users <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">000</span>, items <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">000</span> → possible interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">M</span>  </span>
<span id="cb2-7">actual interactions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">000</span> → sparsity <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">99.5</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span></span></code></pre></div>
<p>Each new user adds an entire <strong>row</strong> of mostly empty interactions, and each new item adds an entire <strong>column</strong> of mostly empty interactions. Since users typically interact with only a tiny fraction of available items, the interaction matrix becomes increasingly sparse as the catalog grows.</p>
<p>In recommendation systems, interactions follow a long-tailed distribution—many users and items have only a few interactions. So while randomly sampling may work just fine for many ML use cases, we need to apply it a bit more carefully here. Ultimately we want to have a sample dataset where each user/item has at least X interactions.</p>
<p>The tricky part is that a basic random sampling of users and items would create <strong>sparsity cascade</strong>—a domino effect that breaks your dataset.</p>
<p>Here’s what happens: You start with users and items that look fine on their own. User A has 10 interactions, Item X has 15 interactions. When you remove User B, you also lose all of User B’s interactions with Item X. Suddenly Item X only has 8 interactions. Oops, now it’s too sparse, so you remove it too. But removing Item X means User A loses some interactions and might become too sparse as well.</p>
<p>It’s like pulling threads from a sweater—everything starts unraveling.</p>
<p>To solve this, we take an iterative approach. We gradually drop random users from the dataset while watching our conditions and sampling targets. The trade-off is that while it’s hard to get an exact predefined number of users and items, we can control the minimum acceptable thresholds:</p>
<div class="sourceCode" id="annotated-cell-3" style="background: #f1f3f5;"><pre class="sourceCode python code-annotation-code code-with-copy code-annotated"><code class="sourceCode python"><span id="annotated-cell-3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># From cfg/common.yaml</span></span>
<span id="annotated-cell-3-2">sample:</span>
<span id="annotated-cell-3-3">  sample_users: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-3" data-target-annotation="1">1</button><span id="annotated-cell-3-4" class="code-annotation-target">  min_val_records: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span></span>
<span id="annotated-cell-3-5">  min_user_interactions: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="annotated-cell-3-6">  min_item_interactions: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-3" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-3" data-code-lines="4" data-code-annotation="1">We need to ensure sufficient validation data to evaluate our models.</span>
</dd>
</dl>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.sample <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> InteractionDataSampler</span>
<span id="cb3-2"></span>
<span id="cb3-3">data_sampler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> InteractionDataSampler(</span>
<span id="cb3-4">    user_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.data.user_col,</span>
<span id="cb3-5">    item_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.data.item_col,</span>
<span id="cb3-6">    sample_users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.sample.sample_users,</span>
<span id="cb3-7">    min_val_records<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.sample.min_val_records,</span>
<span id="cb3-8">    random_seed<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.run.random_seed,</span>
<span id="cb3-9">    min_item_interactions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.sample.min_item_interactions,</span>
<span id="cb3-10">    min_user_interactions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cfg.sample.min_user_interactions,</span>
<span id="cb3-11">    perc_users_removed_each_round<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.1</span>,</span>
<span id="cb3-12">    debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb3-13">)</span></code></pre></div>
<pre class="plaintext code-overflow-wrap"><code>...

Randomly removing 2960 users - Round 18 started
After randomly removing users - round 18: num_users=29,605
Number of users 29,605 are still greater than expected, keep removing...

Randomly removing 2413 users - Round 19 started
After randomly removing users - round 19: num_users=24,137
Number of users 24,137 are still greater than expected, keep removing...
Number of val_df records 4,282 are falling below expected threshold, stop and use `sample_df` as final output...
len(sample_users)=19,734 len(sample_items)=7,388</code></pre>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<a href="https://github.com/dvquy13/recsys-seq-model/blob/main/src/sample.py#L8">InteractionDataSampler implementation</a>
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>In the end, we won’t have exactly 10,000 users, but the numbers will be close. The distribution of interactions is shown below:</p>
<div class="column-page">
<p><a href="../static/sample-interaction-dist.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dvquys.com/projects/implement-recsys/static/sample-interaction-dist.png" class="img-fluid"></a></p>
</div>
</section>
<section id="train-test-split" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="train-test-split">Train-Test Split</h2>
<p>After sampling our data, we need to split it into a train and validation dataset to evaluate our models. The validation dataset plays a critical role in providing an estimate of how well the model performs on unseen data.</p>
<p>There are two main types of train-test-split in RecSys:</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/static/train-test-split.png" class="img-fluid"></p>
</div>
<p>From what I’ve seen, last-one-out is used more in academic settings, while <strong>absolute timestamp</strong> is more common in industry. This makes sense from the perspective that any model deployed in production gets tested against future data.</p>
</section>
<section id="feature-engineering" class="level2">
<h2 class="anchored" data-anchor-id="feature-engineering">Feature Engineering</h2>
<section id="id-mapping-from-strings-to-indices" class="level3">
<h3 class="anchored" data-anchor-id="id-mapping-from-strings-to-indices">ID Mapping: From Strings to Indices</h3>
<p>As discussed in Chapter 1, we’re modeling this problem with neural networks. Deep learning models work with numerical indices, not string IDs. So we use our <a href="https://github.com/dvquy13/recsys-seq-model/blob/main/src/id_mapper.py">IDMapper</a> to provide deterministic mapping from user and item IDs to indices:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> src.id_mapper <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IDMapper</span>
<span id="cb5-2"></span>
<span id="cb5-3">user_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[cfg.data.user_col].values</span>
<span id="cb5-4">item_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_df[cfg.data.item_col].values</span>
<span id="cb5-5">unique_user_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(user_ids))</span>
<span id="cb5-6">unique_item_ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(item_ids))</span>
<span id="cb5-7">idm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> IDMapper()</span>
<span id="cb5-8">idm.fit(unique_user_ids, unique_item_ids)</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save for later use in model serving</span></span>
<span id="cb5-11">idm.save(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/idm.json"</span>)</span>
<span id="cb5-12"></span>
<span id="cb5-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Below is the example output of the indice mapping for user IDs:</span></span>
<span id="cb5-14">display(idm.user_to_index)</span></code></pre></div>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AE224PFXAEAT66IXX43GRJSWHXCA"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AE225Y3KDZ44DHLUKLE4RJ63HC5Q"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AE226YVDC3MAGJZMZ4IBGE7RFJSQ"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-5">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AE22EJZ4354VB7MN4IE2CDGHA2DQ"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"AE22O3TURLPFCJKL7YCX5CPF22OA"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb6-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</section>
<section id="sequence-generation" class="level3">
<h3 class="anchored" data-anchor-id="sequence-generation">Sequence Generation</h3>
<p>At this point, you might wonder about the sequences I mentioned earlier. How does user-item rating data relate to sequences?</p>
<p>Traditional collaborative filtering approaches like Matrix Factorization only use the user-item rating matrix. But one important signal gets left out: the timestamps.</p>
<p>The key insight is simple: when a user interacts with items over time, those interactions tell a story. We group each user’s interactions chronologically to create sequences of items, with the assumption that items a user engages with have meaningful relationships to each other.</p>
<p>Let’s trace through an example to understand how sequence generation works:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User interactions over time:</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time 1: User buys "Python Programming" (item_indice: 42)</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time 2: User buys "Machine Learning" (item_indice: 73) </span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Time 3: User buys "Deep Learning" (item_indice: 91)</span></span>
<span id="cb7-5"></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generated sequences:</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row 1: item_sequence = [-1, -1, ..., -1]           # No previous items</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row 2: item_sequence = [-1, -1, ..., 42]          # Previous: Python book</span></span>
<span id="cb7-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Row 3: item_sequence = [-1, -1, ..., 42, 73]      # Previous: Python, ML books</span></span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sample DataFrame</span></span>
<span id="cb8-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb8-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_indices"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb8-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_indices"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb8-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>],</span>
<span id="cb8-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ratings"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>],</span>
<span id="cb8-7">}</span>
<span id="cb8-8"></span>
<span id="cb8-9">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(data)</span>
<span id="cb8-10"></span>
<span id="cb8-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Generate the item sequences</span></span>
<span id="cb8-12">df_with_sequences <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> generate_item_sequences(</span>
<span id="cb8-13">    df,</span>
<span id="cb8-14">    user_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user_indices"</span>,</span>
<span id="cb8-15">    item_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_indices"</span>,</span>
<span id="cb8-16">    timestamp_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>,</span>
<span id="cb8-17">    sequence_length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb8-18">    padding<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb8-19">    padding_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb8-20">)</span>
<span id="cb8-21"></span>
<span id="cb8-22">display(df_with_sequences)</span></code></pre></div>
<p><a href="./sequence-gen-test.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://dvquys.com/projects/implement-recsys/c2/sequence-gen-test.png" class="img-fluid"></a></p>
<p>As you can see, the above item_sequence column contains the sequence of items in chronological order which holds the context for the model to understand user preferences and make sequential predictions.</p>
<p>In this project, we use the user’s last 10 items as the sequence length, but this is configurable. The choice depends on experimentation, but generally there’s a trade-off: longer sequences provide more context but use more memory, while shorter sequences focus on recent items and process faster.</p>
<p>Do take note that we need to pad sequences to the same length so we can batch process them in our PyTorch model.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># From cfg/common.yaml</span></span>
<span id="cb9-2">train:</span>
<span id="cb9-3">  sequence:</span>
<span id="cb9-4">    sequence_length: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Keep last 10 items as context</span></span></code></pre></div>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>In this chapter, we covered:</p>
<ol type="1">
<li><strong>Data Sampling and Filtering</strong>: We discussed problems with basic random sampling of dyadic data and introduced our iterative sampling approach</li>
<li><strong>ID Mapping</strong>: We converted string IDs to numerical indices to work with PyTorch model</li>
<li><strong>Sequence Generation</strong>: We created item sequence features based on user’s chronological interactions</li>
</ol>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Code
</div>
</div>
<div class="callout-body-container callout-body">
<p>All code for this chapter is available in the <code>notebooks/000-prep-data.ipynb</code> and <code>notebooks/001-features.ipynb</code> files in the <a href="https://github.com/dvquy13/recsys-seq-model">project repository</a>.</p>
</div>
</div>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next</h2>
<p>In <a href="../../../projects/implement-recsys/c3/index.html">Chapter 3</a>, we’ll tackle the critical challenge of <strong>negative sampling</strong>. If our model only sees positive interactions (ratings), it can’t learn meaningful patterns for generalization. We need to generate negative examples so the model can distill the patterns by learning to distinguish between positive and negative interactions.</p>
<p>Continue to the <a href="../../../projects/implement-recsys/c3/index.html">next chapter</a>.</p>
<hr>
<p><br> If you find this tutorial helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (May 2025). Implement a RecSys, Chapter 2:<br> Understanding the Data and Feature Engineering. dvquys.com. https://dvquys.com/projects/implement-recsys/c2/.</p>
</blockquote>


</section>

 ]]></description>
  <category>recsys</category>
  <category>implement-recsys-series</category>
  <guid>https://dvquys.com/projects/implement-recsys/c2/</guid>
  <pubDate>Sat, 24 May 2025 16:00:00 GMT</pubDate>
  <media:content url="https://dvquys.com/projects/implement-recsys/static/L2%20-%20Data%20signals.excalidraw.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Implement a RecSys, Chapter 1: Introduction and Project Overview</title>
  <link>https://dvquys.com/projects/implement-recsys/c1/</link>
  <description><![CDATA[ 





<p>This is the <strong>first chapter</strong> of the tutorial series: Implement a RecSys.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-1-contents" aria-controls="callout-1" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
List of chapters
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-1" class="callout-1-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ul>
<li><a href="../c1/index.html">Chapter 1: Introduction and Project Overview</a><br>
</li>
<li><a href="../c2/index.html">Chapter 2: Understanding the Data and Feature Engineering</a><br>
</li>
<li><a href="../c3/index.html">Chapter 3: Negative Sampling</a><br>
</li>
<li><a href="../c4/index.html">Chapter 4: Offline Evaluation, MLflow Experiment Tracking, and Baseline Implementation</a><br>
</li>
<li><a href="../c5/index.html">Chapter 5: Session-based Recommendation Model</a><br>
</li>
</ul>
</div>
</div>
</div>
<section id="introduction" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Imagine you’re browsing an e-commerce site and notice something remarkable: the recommendations update almost instantly as you click through products. You view a pair of headphones, and suddenly complementary items appear. You check out a laptop, and the “you might also like” section refreshes with relevant accessories. You think to yourself—<em>“Wow, how do they do that?”</em> Then curiosity kicks in: How do they capture your evolving intent so quickly? How do they serve personalized suggestions fast enough to feel real-time? How do they handle the complexity of understanding your browsing patterns on the fly?</p>
<p>If you’ve ever have those questions, this tutorial series is for you.</p>
<p>Over the next several chapters, I’ll walk you through building an end-to-end <strong>recommendation system</strong> that reacts in real-time based on user behavior sequences. We’ll go from raw data to a complete recommender system that personalizes recommendations as users interact with your platform.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Enough Talking, Show Me the Code!
</div>
</div>
<div class="callout-body-container callout-body">
<p>If you’re familiar with RecSys and just want to see the code, here it is: <a href="https://github.com/dvquy13/recsys-seq-model">https://github.com/dvquy13/recsys-seq-model</a>.</p>
</div>
</div>
<p>For those who aren’t well aware of what a recommender system is, here is a quick recap. Recommender systems are specialized tools designed to suggest items—whether products, content, or services—to users based on what we know about their preferences and behaviors. At their core, they comprise a set of technologies, algorithms, and processes that analyze user interaction signals (clicks, views, purchases, ratings, etc.) to predict what individual users might find relevant or engaging.</p>
<div class="column-page">
<p><a href="../static/recommender system.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dvquys.com/projects/implement-recsys/static/recommender system.png" class="img-fluid"></a></p>
</div>
<p>From the user’s perspective, these systems help uncover content or products they might never have discovered on their own and save time by surfacing the most relevant options up front.</p>
<p>From a business standpoint, the primary goals of a recommender system are to create a sense of “we understand you” for each user and to drive revenue through personalized cross-selling opportunities. By tailoring recommendations to each user, companies can boost engagement and average order value.</p>
<p>In practice, recommender systems power some of the world’s largest digital platforms. For example, Amazon’s “Frequently Bought Together” suggestions guide shoppers toward complementary products, Facebook uses recommendation algorithms to prioritize posts and ads in users’ feeds, and Netflix’s home screen is largely driven by personalized movie and show recommendations.</p>
<div class="column-page">
<p><img src="https://dvquys.com/projects/implement-recsys/static/recsys-biz-value.gif" class="img-fluid"></p>
</div>
<p>The impact of these systems is profound: According to <a href="https://www.mckinsey.com/industries/retail/our-insights/how-retailers-can-keep-up-with-consumers">this report from McKinsey</a>, roughly 75 percent of Netflix viewing hours come from recommended titles, 35 percent of Amazon’s purchases are influenced by its recommendations, and Netflix alone <a href="https://dl.acm.org/doi/pdf/10.1145/2843948">saves around $1 billion per year</a> through improved user retention and engagement. These metrics underscore why recommender systems have become a critical component of modern digital businesses.</p>
</section>
<section id="what-youll-build" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-youll-build">What You’ll Build</h2>
<p>By the end of this series, you’ll have constructed an end-to-end recommendation system while know how to:</p>
<ul>
<li><strong>Design and Train Session-based RecSys models</strong> using PyTorch to <strong>personalizes recommendations in real-time</strong> based on users’ recent interaction sequences</li>
<li><strong>Track experiments</strong> with MLflow for reproducible ML workflows</li>
<li><strong>Serve predictions</strong> through a FastAPI service in conjunction with a vector database and caching</li>
<li><strong>Package the project</strong> using Docker and modern ML infrastructure</li>
<li><strong>Launch aninteractive demo</strong> with a frontend<sup>1</sup></li>
</ul>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="../static/session-based retriever - demo v2.gif" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-2" title="The Demo"><img src="https://dvquys.com/projects/implement-recsys/static/session-based retriever - demo v2.gif" class="img-fluid figure-img column-page" alt="The Demo"></a></p>
<figcaption>The Demo</figcaption>
</figure>
</div>
</div>
</section>
<section id="target-audience" class="level2">
<h2 class="anchored" data-anchor-id="target-audience">Target Audience</h2>
<p>This tutorial series is designed for:</p>
<ul>
<li><strong>Data Scientists</strong> looking beyond training models and into ML services</li>
<li><strong>ML Engineers</strong> building scalable recommendation systems</li>
<li><strong>Backend Developers</strong> interested in ML/RecSys architecture</li>
<li><strong>Anyone</strong> curious about a modern and real-time end-to-end RecSys project</li>
</ul>
<p>All in all, it’s good to have some basic knowledge of Machine Learning and Python to follow along.</p>
</section>
<section id="session-based-vs-traditional-recommendations" class="level2">
<h2 class="anchored" data-anchor-id="session-based-vs-traditional-recommendations">Session-Based vs Traditional Recommendations</h2>
<section id="traditional-collaborative-filtering" class="level3">
<h3 class="anchored" data-anchor-id="traditional-collaborative-filtering">Traditional Collaborative Filtering</h3>
<p>Traditional recommendation systems often rely on collaborative filtering, which uses historical user-item interaction matrices to find similar users or items. While effective, these approaches have limitations:</p>
<ul>
<li><strong>Static representations</strong>: User preferences are treated as fixed</li>
<li><strong>Cold start problems</strong>: Difficulty with new users or items</li>
<li><strong>Limited temporal understanding</strong>: Doesn’t capture evolving user interests within a session</li>
</ul>
</section>
<section id="session-based-recommendations" class="level3">
<h3 class="anchored" data-anchor-id="session-based-recommendations">Session-Based Recommendations</h3>
<p>Session-based recommendation systems address these limitations by:</p>
<ul>
<li><strong>Modeling sequences</strong>: Understanding the order and timing of user interactions</li>
<li><strong>Capturing short-term intent</strong>: Focusing on recent behaviors within a session</li>
<li><strong>Handling anonymity</strong>: Working even without persistent user identifiers</li>
<li><strong>Real-time adaptation</strong>: Continuously updating recommendations as users interact</li>
</ul>
</section>
</section>
<section id="why-session-based-recommendations-matters" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="why-session-based-recommendations-matters">Why Session-based Recommendations Matters</h2>
<p>User behavior is inherently sequential. Consider an e-commerce browsing session:</p>
<ol type="1">
<li>User searches for “wireless headphones”</li>
<li>Views a Sony model</li>
<li>Checks reviews for Audio-Technica alternatives</li>
<li>Compares prices across brands</li>
</ol>
<p>Each step provides context for the next recommendation. Traditional systems might miss this sequential pattern, while sequence models capture the evolving intent throughout the session.</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="../static/L2 - Data signals.excalidraw.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-3" title="Data signals"><img src="https://dvquys.com/projects/implement-recsys/static/L2 - Data signals.excalidraw.png" class="img-fluid figure-img column-page" alt="Data signals"></a></p>
<figcaption>Data signals</figcaption>
</figure>
</div>
</div>
</section>
<section id="how-to-react-in-real-time-a-simplified-payload-approach" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-to-react-in-real-time-a-simplified-payload-approach">How to react in real-time: A Simplified Payload Approach</h2>
<p>In production, real-time recommendation systems typically leverage <strong>streaming architectures</strong> with event pipelines (Kafka, Kinesis, etc.) that process user interactions. The streaming system is normally built in a centralized manner by a platform team with the aim to provide real-time data processing capabilities to multiple downstream usages. This approach also ensures scalability and reliability.</p>
<p>However, for the purpose of this tutorial, we’ll use the <strong>simplified request-payload approach</strong> to focus on the ML aspects rather than streaming infrastructure complexity.</p>
<p>Basically we would include the real-time events in the payload of the requests coming in to RecSys APIs. In real-world, implementation can be done by frontend capturing user interactions locally (clicks, views, etc.) and includes recent session history in each API request.</p>
<p>While this approach looks like a hacky-workaround ways, I have seen teams using this in production for early-stage real-time ML RecSys. In the end, the idea in and of itself has some merits such as minimal signal delay, users not needing to refresh to get updated recommendations and easier to implement and debug.</p>
<p>In the below screenshot you can see that in the POST request payload sending to a recommendation endpoint, we include the recent user interacted item IDs in <code>item_seq_raw</code> in the payload.</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="../static/api-payload.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-4" title="Example request payload"><img src="https://dvquys.com/projects/implement-recsys/static/api-payload.png" class="img-fluid figure-img column-page" alt="Example request payload"></a></p>
<figcaption>Example request payload</figcaption>
</figure>
</div>
</div>
</section>
<section id="our-technology-stack" class="level2">
<h2 class="anchored" data-anchor-id="our-technology-stack">Our Technology Stack</h2>
<p>Below is a list of the technology frameworks we use in this project. There is no need to understand all of them in detail, so do not worry too much if you are not familiar. However, I do encourage you to at least learn the basics of each of them. Wherever possible I would also explain the rationale and what roles they play in the system that we build together.</p>
<table class="caption-top table">
<thead>
<tr class="header">
<th>Component</th>
<th>Technology</th>
<th>Purpose</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><strong>ML Framework</strong></td>
<td>PyTorch</td>
<td>Deep learning model training</td>
</tr>
<tr class="even">
<td><strong>API Server</strong></td>
<td>FastAPI</td>
<td>High-performance API endpoints</td>
</tr>
<tr class="odd">
<td><strong>Experiment Tracking</strong></td>
<td>MLflow</td>
<td>Model versioning and experiments</td>
</tr>
<tr class="even">
<td><strong>Vector Database</strong></td>
<td>Qdrant</td>
<td>Similarity search and retrieval</td>
</tr>
<tr class="odd">
<td><strong>Caching</strong></td>
<td>Redis</td>
<td>Real-time data storage</td>
</tr>
<tr class="even">
<td><strong>Package Management</strong></td>
<td>uv</td>
<td>Fast Python dependency management</td>
</tr>
<tr class="odd">
<td><strong>Containerization</strong></td>
<td>Docker</td>
<td>Consistent deployment environments</td>
</tr>
</tbody>
</table>
</section>
<section id="project-structure-overview" class="level2">
<h2 class="anchored" data-anchor-id="project-structure-overview">Project Structure Overview</h2>
<p>The codebase can be found <a href="https://github.com/dvquy13/recsys-seq-model">here</a>. Below is a quick glance into its structure.</p>
<pre><code>recsys-seq-model/
├── notebooks/           # Progressive tutorial notebooks
│   ├── 000-prep-data.ipynb
│   ├── 001-features.ipynb
│   ├── 002-negative-sample.ipynb
│   ├── 010-baseline-popular.ipynb
│   ├── 011-sequence-modeling.ipynb
│   ├── 020-ann-index.ipynb
│   └── 021-redis-prep.ipynb
├── src/                 # Core implementation modules
│   ├── cfg.py          # Configuration management
│   ├── dataset.py      # Data loading utilities  
│   ├── id_mapper.py    # ID mapping functionality
│   ├── negative_sampling.py  # Sampling strategies
│   ├── sequence/       # Sequence model implementations
│   ├── eval/          # Evaluation frameworks
│   └── vectorstore.py # Qdrant integration
├── api/                # FastAPI service
│   ├── app.py         # Main application
│   ├── services.py    # Business logic
│   └── models.py      # Request/response schemas
├── mlflow/            # MLflow configuration
├── data/              # Dataset storage
└── compose.yml        # Docker orchestration</code></pre>
<section id="progressive-notebook-approach" class="level3">
<h3 class="anchored" data-anchor-id="progressive-notebook-approach">Progressive Notebook Approach</h3>
<p>Notice the <strong>numbered notebook sequence</strong> (000, 001, 002, etc.). This design ensures you build knowledge progressively:</p>
<ul>
<li><strong>000-series</strong>: Data preparation and exploration</li>
<li><strong>010-series</strong>: Model training and evaluation<br>
</li>
<li><strong>020-series</strong>: Production deployment preparation</li>
</ul>
<p>Each notebook represents a complete milestone, allowing you to pause and resume at any point.</p>
</section>
<section id="a-note-on-the-commonly-used-commands" class="level3">
<h3 class="anchored" data-anchor-id="a-note-on-the-commonly-used-commands">A note on the commonly used commands</h3>
<p>You may found the below commands useful, as I have myself running them regularly when developing the projects. Treating them as shortcuts, I have put them in the Makefile:</p>
<div class="sourceCode" id="annotated-cell-2" style="background: #f1f3f5;"><pre class="sourceCode bash code-annotation-code code-with-copy code-annotated"><code class="sourceCode bash"><span id="annotated-cell-2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Environment setup</span></span>
<span id="annotated-cell-2-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">uv</span> sync <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--all-groups</span>     <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Install/update dependencies</span></span>
<span id="annotated-cell-2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> requirements-txt    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Export requirements for Docker</span></span>
<span id="annotated-cell-2-4"></span>
<span id="annotated-cell-2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Development session</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="1">1</button><span id="annotated-cell-2-6" class="code-annotation-target"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> lab                 <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start Jupyter Lab</span></span>
<button class="code-annotation-anchor" data-target-cell="annotated-cell-2" data-target-annotation="2">2</button><span id="annotated-cell-2-7" class="code-annotation-target"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> ml-platform-up      <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start MLflow, Qdrant, Redis</span></span>
<span id="annotated-cell-2-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> ml-platform-down    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Stop all services</span></span>
<span id="annotated-cell-2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> ml-platform-logs    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># View service logs</span></span>
<span id="annotated-cell-2-10"></span>
<span id="annotated-cell-2-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># API Operations (covered in later chapters)</span></span>
<span id="annotated-cell-2-12"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> api-up             <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the FastAPI service</span></span>
<span id="annotated-cell-2-13"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> api-test           <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Run API tests</span></span>
<span id="annotated-cell-2-14"></span>
<span id="annotated-cell-2-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># UI Demo (optional)</span></span>
<span id="annotated-cell-2-16"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">make</span> ui-up              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Start the frontend demo</span></span><div class="code-annotation-gutter-bg"></div><div class="code-annotation-gutter"></div></code></pre></div>
<dl class="code-annotation-container-hidden code-annotation-container-grid">
<dt data-target-cell="annotated-cell-2" data-target-annotation="1">1</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="6" data-code-annotation="1">This is a shortcut to start Jupyter Lab, you will need to run this in every chapter.</span>
</dd>
<dt data-target-cell="annotated-cell-2" data-target-annotation="2">2</dt>
<dd>
<span data-code-cell="annotated-cell-2" data-code-lines="7" data-code-annotation="2">The tools that we will use to support our model development and serving are grouped into this ml-platform umbrella.</span>
</dd>
</dl>
</section>
</section>
<section id="recap" class="level2">
<h2 class="anchored" data-anchor-id="recap">Recap</h2>
<p>To get a hands on the system that we will build together, you can clone the repo and follow the instructions in the README to get the project running.</p>
<p>After that you should have:</p>
<ul>
<li><strong>A clear picture</strong> of what session-based recommendations are and why they’re useful</li>
<li><strong>Your development environment</strong> ready to go with all services running<br>
</li>
<li><strong>Familiarity with the project structure</strong> so you can navigate the codebase<br>
</li>
<li><strong>The foundation knowledge</strong> to tackle the upcoming chapters</li>
</ul>
</section>
<section id="whats-next" class="level2">
<h2 class="anchored" data-anchor-id="whats-next">What’s Next</h2>
<p>In <a href="../../../projects/implement-recsys/c2/index.html">Chapter 2</a>, we’ll get our hands dirty while setting up the input data in a format that’s designed for sequence modeling.</p>
<p>Continue to the <a href="../../../projects/implement-recsys/c2/index.html">next chapter</a>.</p>
<hr>
<p><br> If you find this tutorial helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (May 2025). Implement a RecSys, Chapter 1:<br> Introduction and Project Overview. dvquys.com. https://dvquys.com/projects/implement-recsys/c1/.</p>
</blockquote>


</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>Though not covered in this tutorial, there would be example UI code in the repo.↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>recsys</category>
  <category>implement-recsys-series</category>
  <guid>https://dvquys.com/projects/implement-recsys/c1/</guid>
  <pubDate>Fri, 23 May 2025 16:00:00 GMT</pubDate>
  <media:content url="https://dvquys.com/projects/implement-recsys/static/recommender%20system.png" medium="image" type="image/png"/>
</item>
<item>
  <title>Building a Conversational Assistant for Restaurant Discovery and Booking</title>
  <link>https://dvquys.com/projects/review-rec-bot/</link>
  <description><![CDATA[ 





<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<a href="https://github.com/dvquy13/review-rec-bot">Project Details</a>
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/4trTuAV3RnY?si=s7s5pjbgoSopGJja" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
</section>
<section id="problem-statement" class="level2">
<h2 class="anchored" data-anchor-id="problem-statement">Problem Statement</h2>
<p>Listing/reservation businesses like Yelp offer value to users by providing useful information to make them find out where to go next. Good search and recommendation systems go a long way, but they are still far from delivering the ultimate experience where users can interact naturally with the system for complex queries or have a conversation to drill down their needs.</p>
</section>
<section id="approach" class="level2">
<h2 class="anchored" data-anchor-id="approach">Approach</h2>
<p>Build a chatbot assistant to assist users in <strong>discovering places to go and booking</strong>.</p>
<p>Workflow:</p>
<ol type="1">
<li>Download <a href="https://www.yelp.com/dataset">Yelp reviews data</a>. Sample <strong>5,240 reviews from 100 businesses</strong>.</li>
<li>Set up development environment including experimentation tracking via MLflow, observability with Arize Phoenix</li>
<li>Build MVP version using LlamaIndex, Qdrant</li>
<li>Build synthetic evaluation datasets with 30 questions for retrieval and response. Manual response dataset are gradually built up and added based on error analysis</li>
<li>Conduct error analysis and look at the model’s output to come up with new iteration ideas. Run a total of 10 experiments to improve the RAG, with notable attempts including: Replacing Llama-8.1B with GPT-4o-mini, Fine-tuning Embedding Model, Hybrid Retrievers, Semantic Chunking, BGE Reranker, Query Expansion</li>
<li>Build RAG Agent based on OpenAI API with Query Engine tool and Reservation Service tool. Chatbot UI is built with Chainlit.</li>
</ol>
</section>
<section id="evaluation" class="level2">
<h2 class="anchored" data-anchor-id="evaluation">Evaluation</h2>
<p>Evaluation results can be found <a href="https://drive.google.com/file/d/1GU0gnChJBBlB-xfaMEcnmGiHhUFKzfqb/view?usp=sharing">here</a>.</p>
<p>Two proposed key metrics are <strong>Retrieval Hit Rate</strong> and <strong>Response Correctness</strong>.</p>
<p>Retrieval is a critical component in any RAG system. Along with data prep, retrieval sits at the top of the pipeline so any improvements in these fronts is more likely to improve the overall system. <strong>Hit rate</strong> is chosen as a key metric because since we can employ rerank as a subsequent step, we have room to optimize for the ranking issues.&nbsp;</p>
<p>For response, <strong>Correctness</strong> measures both how relevant the answer is with respect to the query and how correct it is compared to the referenced answer. It’s therefore a better indicator than pure relevance, which is just based on the query and hence easier to get right.</p>
<p>For reference, Response Correctness on synthetic dataset has improved <strong>+166%</strong> from 1.75 / 5.00 from MVP version to <strong>4.67 / 5.00</strong> on the current version. The current <strong>Retrieval Hit Rate @ 50</strong> reaches <strong>73%</strong>, not directly comparable but at MVP version <strong>Retrieval Hit Rate @ 10</strong> was 20%.</p>
<p>As next steps, while there is not much room to improve Response Correctness, we ought to increase Retrieval Hit Rate to 90% which should be doable since this dataset only contains a small amount of data.</p>
</section>
<section id="learningsremarks" class="level2">
<h2 class="anchored" data-anchor-id="learningsremarks">Learnings/Remarks</h2>
<ul>
<li>Using question-style query leads to 5-20% uplift in retrieval hit rate compared to using keyword search</li>
<li>BM25 Retriever alone results in 200% increase in retrieval effectiveness including hit rate, average precision, MRR and NDCG</li>
<li>Fine-tuning small embedding model like Snowflake/snowflake-arctic-embed-m-v1.5 yield +80% retrieval effectiveness, especially rankings of the retrieved nodes</li>
<li>Using GPT-4o-mini as response synthesizer significantly improve the quality of response in all aspects (especially correctness from 2.6 to 3.8) compared to Llama 3.1-8B-Instruct</li>
<li>Using TreeSummarize with custom prompt yields a +10% uplift on response correctness evaluation, from 3.97 to 4.37. Based on eyeballing we also see a way better response that is recommendation-like</li>
</ul>
</section>
<section id="challenges" class="level2">
<h2 class="anchored" data-anchor-id="challenges">Challenges</h2>
<section id="challenge-1-auto-retrieval-not-reliable" class="level5">
<h5 class="anchored" data-anchor-id="challenge-1-auto-retrieval-not-reliable">Challenge 1: Auto-retrieval not reliable</h5>
<p>While theoretically both precision and recall should be greatly improved if we are able to apply the right filters for User questions instead of relying on embedding/keyword matching, my first attempt to apply auto-retrieval with ChromaDB did not yield promising results. There were at least two syntactic issues which broke the agentic workflow. Even after fixing those two the unreliable nature of this approach is still there and I also witnessed a -10% degradation in Retrieval Hit Rate.</p>
<p>In the end I forfeited the feature but nevertheless look forward to a way to re-applying this technique.</p>
</section>
<section id="challenges-2-indexing-pipeline-takes-too-long" class="level5">
<h5 class="anchored" data-anchor-id="challenges-2-indexing-pipeline-takes-too-long">Challenges 2: Indexing pipeline takes too long</h5>
<p>Indexing 70K nodes from 30K reviews for 400 businesses takes more than 6 hours!</p>
</section>
</section>
<section id="future-improvements" class="level2">
<h2 class="anchored" data-anchor-id="future-improvements">Future Improvements</h2>
<ul>
<li>Guardrail system inputs and outputs</li>
<li>Experiment with Contextual Compression and Filters</li>
<li>Fine tune LLM Re-ranker (FlagEmbedding BGE Reranker)</li>
<li>Try ColBERT as a new retriever (may be add to the list of retrievers)</li>
<li>Try different loss function in training embeddings</li>
<li>Improve the diversity by implement custom re-ranker that weight downs the reviews from the already seen biz_id</li>
</ul>
<p><br> If you find this article helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (Sep 2024). Building a Conversational Assistant for Restaurant Discovery and Booking. dvquys.com. https://dvquys.com/projects/review-rec-bot/.</p>
</blockquote>


</section>

 ]]></description>
  <category>tech</category>
  <category>llm</category>
  <guid>https://dvquys.com/projects/review-rec-bot/</guid>
  <pubDate>Sat, 21 Sep 2024 16:00:00 GMT</pubDate>
  <media:content url="https://dvquys.com/projects/review-rec-bot/thumbnail.svg" medium="image" type="image/svg+xml"/>
</item>
<item>
  <title>Let’s build an ML system</title>
  <link>https://dvquys.com/projects/reviews-parsing-mlsys/</link>
  <description><![CDATA[ 





<p>This project focuses on applying engineering practices to build a Machine Learning System using Kubernetes and deploy on Google Cloud Platform.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
<a href="https://github.com/dvquy13/reviews-parsing-mlsys">Project Details</a>
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="architecture" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="architecture">Architecture</h2>
<div class="column-page">
<p><a href="./architecture.svg" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dvquys.com/projects/reviews-parsing-mlsys/architecture.svg" class="img-fluid"></a></p>
</div>
</section>
<section id="demo" class="level2">
<h2 class="anchored" data-anchor-id="demo">Demo</h2>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/O-8_Q1GgJpM?si=VA9XK7fBDAl6ngH3" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p><br> If you find this article helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (Jun 2024). Let’s build an ML system. dvquys.com. https://dvquys.com/projects/reviews-parsing-mlsys/.</p>
</blockquote>


</section>

 ]]></description>
  <category>tech</category>
  <category>machine learning</category>
  <guid>https://dvquys.com/projects/reviews-parsing-mlsys/</guid>
  <pubDate>Thu, 20 Jun 2024 16:00:00 GMT</pubDate>
</item>
<item>
  <title>A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration</title>
  <link>https://dvquys.com/posts/site-search-elasticsearch/</link>
  <description><![CDATA[ 





<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This article is originally published in <a href="https://medium.com/towards-data-science/a-site-search-engineers-journal-approaching-relevance-challenges-in-elasticsearch-query-1eca29283da5">Towards Data Science</a>
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<section id="intro" class="level2">
<h2 class="anchored" data-anchor-id="intro">Intro</h2>
<p>Over the last 22 months I have been working as a site-search engineer who uses Elasticsearch to help improve relevance in our restaurant platform. I have deployed in total 83 releases including 3 major versions.</p>
<p>With roughly one release per week, I can say that not only our search engine is much better than it was 2 years ago, but I have also learned quite a lot. Though still far from a great search engine, here are some things worth sharing in my opinion. More importantly, I want to get feedback about them.</p>
<p>This blog post is to provide an approach to design the Elasticsearch query template to deal with common site-search problems including searching for matches across different fields, boosting results and testing. Together we will identify issues with the default approach and then gradually come up with a new one to address the issues altogether.</p>
<p>This <a href="https://github.com/dvquy13/elasticsearch-sharing">Github repo</a> contains the examples and code discussed in this post.</p>
</section>
<section id="main" class="level2">
<h2 class="anchored" data-anchor-id="main">Main</h2>
<p>We now play the role of a search engineer for a restaurant platform, which allows diners to discover and make reservation for their next meals. We haven’t had much experience, but luckily the app does not require accuracy level of Google from the start. The key is to make gradual visible progresses!</p>
<p>Alright, let’s dive into it. First off, we make sure user can search for restaurant by name. Here we can rely on the simple default <code>query-match</code> to get the job done.</p>
<details>
<summary>
Code: Index our first two restaurants
</summary>
<pre class="shell"><code>POST _bulk
{ "index" : { "_index" : "restaurant", "_id" : "001sabichuong" } }
{ "restaurant_name": "Sa Bi Chuong", "cuisine": "Vietnamese", "rating": 5.0 }
{ "index" : { "_index" : "restaurant", "_id" : "002vietnamesephonoodle" } }
{ "restaurant_name": "Vietnamese Pho Noodle", "cuisine": "Vietnamese", "rating": 4.0 }

# Test searching for one
# Should return Vietnamese Pho Noodle
GET restaurant/_search
{
  "query" : {
    "match" : { "restaurant_name": "vietnamese" }
  }
}</code></pre>
</details>
<p>The above snippet can be run at Kibana’s Dev Tools &gt; Console, which will be available at your <code>localhost:5601</code> if you follow the repo.</p>
<p>The code is self-explained. We ask Elasticsearch to return restaurants whose name contains <code>vietnamese</code>. And we get back one result for <code>Vietnamese Pho Noodle</code>. No problems.</p>
<p>But we quickly find out that name is not the only place we want to look for when user submit a query. Given keyword<code>vietnamese</code> we should also return the restaurant <code>Sa Bi Chuong</code>, because it’s a Vietnamese restaurant as tagged in the <code>cuisine</code>. A <code>multi_match</code> query allows us to do exactly that.</p>
<details>
<summary>
Code: Matching multiple fields
</summary>
<pre class="{code-overflow-wrap}"><code># Should return all 2 Vietnamese restaurant with the Vietnamese Pho Noodle on top
GET restaurant/_search</code></pre>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb3-4">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb3-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-8"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<details>
<summary>
Result
</summary>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb4-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits":</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-2">    <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb4-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb4-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002vietnamesephonoodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6931471</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-8">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho Noodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-10">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-11">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb4-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-16">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001sabichuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18232156</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-18">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb4-19">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sa Bi Chuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-20">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-21">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb4-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-24">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb4-25">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
</section>
<section id="problems-with-the-default-tfidf" class="level2">
<h2 class="anchored" data-anchor-id="problems-with-the-default-tfidf">Problems with the default&nbsp;TFIDF</h2>
<p>Notice the above scores. The first one is like 4 times higher than the second, indicating that it’s much more relevant given query <code>vietnamese</code>. One might have an assumption that because matching at multiple fields will make the score higher.</p>
<p>Whenever we have doubts, we can use Elasticsearch <code>explain</code> to get a detailed breakdown of its scoring components.</p>
<details>
<summary>
Code: Let’s use explain=true to see what happens under the hood
</summary>
<pre class="{code-overflow-wrap}"><code># Vietnamese Pho Noodle is on top because of the default implementation of TFIDF that penalizes the matching at cuisine field because there are multiple restaurants with cuisine=Vietnamese while there are only one restaurant with name=Vietnamese
# Question: But why having the name Vietnamese in its name makes it more Vietnamese than other restaurants?</code></pre>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb6-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">GET</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restaurant/_search</span></span>
<span id="cb6-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb6-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb6-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb6-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb6-8">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb6-9">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"explain"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span></span>
<span id="cb6-10"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Result 👇</span></span></code></pre></div>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb8-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits":</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-2">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-3">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-4">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002vietnamesephonoodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6931471</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-7">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho Noodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb8-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb8-11">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_explanation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-12">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6931471</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-13">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-14">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-15">            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">field</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`cuisine`</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">yields</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb8-16">            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Note</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">by</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">default</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">calculated</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">by</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">TFIDF</span></span>
<span id="cb8-17">            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">More</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">info</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">about</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Elasticsearch</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">TFIDF:</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">https://www.elastic.co/guide/en/elasticsearch/reference/</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.6</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/index-modules-similarity.html#bm25</span></span>
<span id="cb8-18">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-19">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18232156</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-20">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(cuisine:vietnamese in 1) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-21">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-22">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-23">            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">field</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`restaurant_name`</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">yields</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">69</span></span>
<span id="cb8-24">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-25">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6931471</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-26">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(restaurant_name:vietnamese in 1) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-27">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-28">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-29">            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Because</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">final</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max of:"</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">those</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">two</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">above</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">scores</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-30">            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">it</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">equal</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`restaurant_name`</span></span>
<span id="cb8-31">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-33">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-34">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-35">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001sabichuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-36">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18232156</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-37">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-38">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sa Bi Chuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-39">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-40">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb8-41">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb8-42">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Similarly</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">since</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">there's</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">no</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`restaurant_name`</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-43">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">here</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">final</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">equal</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`cuisine`</span></span>
<span id="cb8-44">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_explanation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-45">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18232156</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-46">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-47">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb8-48">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb8-49">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18232156</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-50">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(cuisine:vietnamese in 0) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb8-51">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-52">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-53">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-54">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-55">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-56">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb8-57">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>Above we can see that Vietnamese Pho Noodle is on top because of the default implementation of TFIDF that penalizes the matching at cuisine field because there are multiple restaurants with <code>cuisine=Vietnamese</code> while there are only one restaurant with <code>name=Vietnamese</code>.</p>
<p>Diving into the <code>_explanation</code> block, we realize that score difference originates from the TFIDF matching output for <code>restaurant_name</code>. This is expected as the algorithm assumes that a keyword is a better signal if it is not common and usually found in a lot of documents (sort of a solution to automatically handle stopwords). In our examples, both the restaurants have cuisine <code>Vietnamese</code> so according to TFIDF, that match does not say much about the relevance of the documents.</p>
<p>Whether we should encourage this behavior is a question. Is it true that having Vietnamese in the name make one restaurant more “Vietnamese” than the other?</p>
<p>Another problem with TFIDF is that it takes into account the length of the field.</p>
<details>
<summary>
Code: Let’s add another restaurant
</summary>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb9-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">POST</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">_bulk</span></span>
<span id="cb9-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"003vietnamesepho"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">3.0</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-4"></span>
<span id="cb9-5"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">In</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">below</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">example</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">we</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">see</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">new</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Vietnamese</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Pho</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restaurant</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ranked</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">higher...</span></span>
<span id="cb9-6"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">GET</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restaurant/_search</span></span>
<span id="cb9-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-8">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-9">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb9-10">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese pho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb9-11">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb9-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb9-13">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb9-14">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"explain"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span></span>
<span id="cb9-15"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>You can find the detailed and lengthy result in Appendix 1. In short, we see that the result ranks restaurant Vietnamese Pho first and then Vietnamese Pho Noodle. Analyzing the component scores indicates that the key difference is that Vietnamese Pho has <code>length=2</code> (words) while Vietnamese Pho Noodle has <code>length=3</code>. It feels unintuitive since we know that the second restaurant has higher rating, given that both, in practice, are equally matching to user’s keyword.</p>
</section>
<section id="reranking-boosting-with-function_score" class="level2">
<h2 class="anchored" data-anchor-id="reranking-boosting-with-function_score">Reranking (boosting) with function_score</h2>
<p>As we talk about <code>rating</code>, we can wrap our query with <code>function_score</code> to incorporate that information to modify our matching scores, hence have a better control over our ranking.</p>
<details>
<summary>
Code: Function score
</summary>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb10-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">GET</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restaurant/_search</span></span>
<span id="cb10-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"function_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-5">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Our</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">main</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">query</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">wrapped</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">a</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">function_score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">clause</span></span>
<span id="cb10-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb10-10">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-11">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb10-12">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">We</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">define</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">functions</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">will</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">be</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">applied</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">on</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">top</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">scores</span></span>
<span id="cb10-13">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">returned</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">by</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">our</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">main</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">query</span></span>
<span id="cb10-14">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"functions"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb10-15">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-16">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"field_value_factor"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb10-17">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"field"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-18">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"modifier"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"none"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"missing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb10-20">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-21">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-22">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-23">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Retrieve</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">max</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">boosting</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">defined</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">inside</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`functions`</span></span>
<span id="cb10-24">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Above</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">there</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">only</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">one</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">boosting</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">so</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">it's</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">applied</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">by</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">default</span></span>
<span id="cb10-25">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"score_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb10-26">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Multiply</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">boosting</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">calculated</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">from</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">functions</span></span>
<span id="cb10-27">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boost_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiply"</span></span>
<span id="cb10-28">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-29">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb10-30"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<details>
<summary>
Result
</summary>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb11-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002vietnamesephonoodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7885544</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-8">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho Noodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-10">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-11">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb11-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-16">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"003vietnamesepho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.5706451</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-18">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-19">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-20">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-21">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb11-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-25">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-26">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001sabichuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-27">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">66765696</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-28">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb11-29">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sa Bi Chuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-30">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb11-31">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb11-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-33">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-34">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb11-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb11-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>The higher rating restaurant is on top now. But how about restaurant <code>Sa Bi Chuong</code> with <code>rating=5</code>? It being the last result seems like we haven’t boosted “enough”.</p>
<p>We might start tinkering a bit more with <code>function_score</code> to make that happen. Here is one of the implementation which models the boosting in a non-linear manner to effectively apply a strong boost on documents with <code>rating=5</code>.</p>
<details>
<summary>
Code: Non-linear function score boosting
</summary>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb12-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">GET</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restaurant/_search</span></span>
<span id="cb12-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"function_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-5">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-7">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb12-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-10">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-11">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"functions"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb12-12">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Apply</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">a</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">non-linear</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">function</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">model</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span></span>
<span id="cb12-13">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">a</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">rating</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">has</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">much</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">more</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">weight</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">than</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">rating</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(not</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">just</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">%</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">more)</span></span>
<span id="cb12-14">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-15">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-16">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"range"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-17">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-18">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"gte"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-19">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"lte"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb12-20">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-21">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-22">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-23">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"weight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb12-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-25">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-26">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-27">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"range"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-28">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb12-29">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"gte"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-30">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"lt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb12-31">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-32">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-33">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb12-34">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"weight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb12-35">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-36">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-37">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"score_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb12-38">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boost_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiply"</span></span>
<span id="cb12-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb12-41"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<details>
<summary>
Result
</summary>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb13-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb13-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001sabichuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.3353139</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-8">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Sa Bi Chuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-10">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-11">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb13-12">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-13">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-14">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-15">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-16">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002vietnamesephonoodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-17">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8942772</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-18">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-19">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho Noodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-20">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-21">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb13-22">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-23">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-24">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-25">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-26">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"003vietnamesepho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-27">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52354836</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-28">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb13-29">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-30">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb13-31">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb13-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-33">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-34">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb13-35">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb13-36"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>You may wonder that: “Isn’t the function boosting now looking too arbitrary? Will it work for other cases?”. Indeed, that’s the question we should ask ourselves. Overtime, with more and more requirements, our query template will grow in complexity, leading to conflicts between the modifications we make.</p>
<p>Let’s move to the next example to illustrate what I mean by “conflict”.</p>
</section>
<section id="the-complexity-comes-with-fuzzy-matching" class="level2">
<h2 class="anchored" data-anchor-id="the-complexity-comes-with-fuzzy-matching">The complexity comes with fuzzy&nbsp;matching</h2>
<p>While not vital, the ability to handle user’s typo is always a nice-to-have feature, especially when they are now familiar with smart search engine like Google’s. Elasticsearch has a built-in mechanism called <code>fuzzy matching</code>, which is configurable with the option <code>fuzziness</code>.</p>
<details>
<summary>
Code: fuzzy matching
</summary>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The use of `bool` query below is to implement the logic: At least one condition should match</span></span></code></pre></div>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb15-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">PUT</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">_scripts/01-default-fuzzy-search-template</span></span>
<span id="cb15-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"script"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"lang"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mustache"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"function_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-9">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bool"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-10">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"must"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-11">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-12">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bool"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-13">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"should"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-14">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-15">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-16">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{query_string}}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-17">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-18">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-19">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-20">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-21">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-22">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{query_string}}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-23">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-24">                          <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">For</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">purpose</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">this</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">demo</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">default</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">behavior</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">works</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">well</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">enough</span></span>
<span id="cb15-25">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fuzziness"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AUTO"</span></span>
<span id="cb15-26">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-27">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-28">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-29">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-30">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-31">              <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb15-32">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-33">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-34">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"functions"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb15-35">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-36">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-37">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"range"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-38">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-39">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"gte"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-40">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"lte"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-41">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-42">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-43">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-44">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"weight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb15-45">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-46">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-47">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-48">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"range"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-49">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-50">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"gte"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-51">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"lt"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb15-52">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-53">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-54">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-55">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"weight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-56">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-57">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-58">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"score_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb15-59">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boost_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiply"</span></span>
<span id="cb15-60">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-61">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-62">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb15-63">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"params"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb15-64">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query_string"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My query string"</span></span>
<span id="cb15-65">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-66">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb15-67"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>Notice that we just created a query template instead of running a query. We can now invoke the query with paramaters, which is a nice feature Elasticsearch introduces to make our code look less overwhelming. Like this:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb16-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">GET</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/_search/template</span></span>
<span id="cb16-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-default-fuzzy-search-template"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb16-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"params"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb16-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query_string"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnames"</span></span>
<span id="cb16-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb16-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>The above query returns our expected Vietnamese restaurant given a typo keyword <code>vietnames</code>. Under the hood, fuzzy matching uses <a href="https://www.elastic.co/guide/en/elasticsearch/reference/8.7/query-dsl-fuzzy-query.html">Levenshtein edit distance</a>, which measures similarity between strings by the number of modifications one make to make one become another. In our example, we just need to add one letter <code>e</code> at the end to make <code>vietnames</code> become <code>vietnamese</code>. Quite an easy task for the algorithm. One might also argue that it’s quite easy for our developers as well. 2 lines of code and a new beautiful feature.</p>
<p>Well, the interesting bit lies elsewhere. One day, our sales team suddenly comes to us with a complaint that search result is wrong. People are getting Japanese BBQ restaurants over Korean ones even when they explicitly search for <code>kbbq</code> (which is a common acronym for <code>korean bbq</code>).</p>
<p>Here are the restaurants:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb17-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">POST</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">_bulk</span></span>
<span id="cb17-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"004parkhangseokbbq"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Park Hang-seo's KBBQ"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Korean"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.0</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"index"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"005bestbbqintown"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb17-5"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Best BBQ in town"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Japanese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.0</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
<p>Query:</p>
<pre><code>{
  "id": "01-default-fuzzy-search-template",
  "params": {
    "query_string": "kbbq"
  }
}</code></pre>
<details>
<summary>
Result
</summary>
<pre><code>{
  "hits": {
    "hits": [
      {
        "_index": "restaurant",
        "_id": "005bestbbqintown",
        "_score": 8.384459,
        "_source": {
          "restaurant_name": "Best BBQ in town",
          "cuisine": "Japanese",
          "rating": 5
        }
      },
      {
        "_index": "restaurant",
        "_id": "004parkhangseokbbq",
        "_score": 2.5153382,
        "_source": {
          "restaurant_name": "Park Hang-seo's KBBQ",
          "cuisine": "Korean",
          "rating": 2
        }
      }
    ]
  }
}</code></pre>
</details>
<p>To understand what is happening, we need to enable <code>explain=true</code> to see what contributes to the final scores. As this time the output is too verbose, here are the findings:</p>
<ul>
<li>The keyword matching score (before boosting) for the <code>Best BBQ in town</code> restaurant is 0.8, less than the 1.2 of <code>Park Hang-seo's KBBQ</code></li>
<li>So if no boosting applied, we will see <code>Park Hang-seo's KBBQ</code> restaurant ranks at the first position</li>
<li>But then the boosting from <code>rating</code> modifies the score, leading to the ordering as we can see</li>
</ul>
<p>One way to frame the issue is that we have imperfect boosting. Say we have a better formula that strikes the right balances, then the problem should be solved. But it’s close to impossible to guarantee that the new formula will not cause any other issues. We don’t want these kinds of issue creep into the system without any notice and then some day being flagged out by stakeholders. We want to be the first to be aware of those issues, especially whenever we make any changes. Therefore, before discussing potential solutions, I hope we all agree that the very next important thing we should do is (yes, you are probably thinking about the same thing as I am) setting up a testing/evaluation mechanism.</p>
</section>
<section id="how-should-we-create-test-cases-for-this-search-application" class="level2">
<h2 class="anchored" data-anchor-id="how-should-we-create-test-cases-for-this-search-application">How should we create test cases for this search application?</h2>
<p>IMHO, the first challenge is about moving data. The queries and the documents can both grow over time, so a static mock dataset might not be a very good representative of the search relevance anymore after a month. The next bit is related to our mindset. Sometimes we might need to think about whether we need 100% passed test cases in order to fix this new very urgent issue. For example, there are cases where if you fix some issues then the search result orderings of the other test cases might alter a bit. If we hard-code the rankings, then we might sweat ourselves trying to tweak our query template. But in practice a lot of the times we neither don’t need the ranking to be exactly pre-defined nor we are perfectly sure about which ordering is actually optimal. We should consider using a soft mechanism where we quantify the relevance of the system and using threshold instead.</p>
<p>Here we look at how we can use Elasticsearch Ranking Evaluation API to implement such evaluation scheme:</p>
<details>
<summary>
Code: Evaluation API
</summary>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb20-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">GET</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restaurant/_rank_eval</span></span>
<span id="cb20-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-3">  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Query</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">template</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">comes</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">really</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">handy</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">when</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">used</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">conjunction</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">_rank_eval</span></span>
<span id="cb20-4">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"templates"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb20-5">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-default-fuzzy-search-template"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"template"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-8">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-default-fuzzy-search-template"</span></span>
<span id="cb20-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-10">     <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-11">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-12">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"requests"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb20-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-14">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kbbq_query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-15">     <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Here</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">we</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">manually</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">define</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">true</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">positives</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">rating</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span></span>
<span id="cb20-16">     <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">The</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">actual</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">rating</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">number</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">helps</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">when</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">using</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">metrics</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">takes</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">into</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">account</span></span>
<span id="cb20-17">     <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ranking</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">search</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">results</span></span>
<span id="cb20-18">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ratings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb20-19">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"004parkhangseokbbq"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-20">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"005bestbbqintown"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-21">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-22">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"template_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-default-fuzzy-search-template"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-23">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"params"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-24">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query_string"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kbbq"</span></span>
<span id="cb20-25">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-26">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-27">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-28">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese_query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-29">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"ratings"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb20-30">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"001sabichuong"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-31">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002vietnamesephonoodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-32">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"003vietnamesepho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-33">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-34">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"template_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"01-default-fuzzy-search-template"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-35">     <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"params"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-36">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query_string"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese"</span></span>
<span id="cb20-37">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-38">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-39">  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-40">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metric"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-41">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dcg"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb20-42">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"k"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb20-43">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"normalize"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">true</span></span>
<span id="cb20-44">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-45">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb20-46"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<details>
<summary>
Result
</summary>
<div class="sourceCode" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb21-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metric_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8549048706984328</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span>  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">This</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">overall</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">metric</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">best</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">worst</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.0</span></span>
<span id="cb21-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"kbbq_query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-5">      <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">This</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">kbbq_query</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">has</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">a</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">imperfect</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">because</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">it</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">ranks</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">more</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">relevant</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">result</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">lower</span></span>
<span id="cb21-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metric_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7098097413968655</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-7">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"unrated_docs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-8">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb21-9">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-10">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-11">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-12">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"005bestbbqintown"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-13">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">8.384459</span></span>
<span id="cb21-14">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb21-15">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb21-16">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-17">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-18">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hit"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-19">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_index"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-20">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"004parkhangseokbbq"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-21">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.5153382</span></span>
<span id="cb21-22">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb21-23">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb21-24">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-25">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-26">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metric_details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-27">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb21-28">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-29">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb21-30">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"vietnamese_query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-31">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metric_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-32">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"unrated_docs"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-33">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb21-34">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb21-35">      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb21-36">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"metric_details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb21-37">        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb21-38">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-39">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb21-40">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb21-41">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"failures"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{}</span></span>
<span id="cb21-42"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>Let’s try to better our search by introducing changes that move the evaluation score closer to the perfect 1.0.</p>
</section>
<section id="our-revised-search-model" class="level2">
<h2 class="anchored" data-anchor-id="our-revised-search-model">Our revised search&nbsp;model</h2>
<p>Before start designing a new query template, we can take a step back and really think about how we should model the search engine. Below are the essentials:</p>
<ol type="1">
<li>Exact matching will always surface on top of not-exact ones like fuzzy matching;</li>
<li>Exact matches does not take into account field length or word/document frequencies. If two documents have the same exact match in a field, they should have the same keyword matching score;</li>
<li>Within the same level of matching (whether exact or fuzzy), while the initial keyword matching scores should be the same, they can be reranked by certain modifiers such as distance, popularity,&nbsp;… However, the modified scores should not make the final score to exceed the base score of the upper level, e.g.&nbsp;modifed fuzzy score should not be greater than exact base score. This is to ensure the essential #1.</li>
</ol>
<p>If you watch football, this is similar to how the leagues such as Premiere League rank their teams. No matter how much more goals the team L has scored compared to team M’s or their head-to-head results, if team M has more points than team M has a higher ranking. The other measures are for tie-breaker only.</p>
<p>This understanding can be then transferred to how we use Elasticsearch to express our model.</p>
<p>One approach is to use <code>dis_max</code> query combined with <code>constant_score</code> query. The idea is to categorize each type of matching into different levels of score where one level will have twice the score of the below level. The documents fall into one level of matching (tie) will be reranked by modifiers but eventually the new scores will not exceed the upper base score. Here is the new query template:</p>
<details>
<summary>
Code: New query template
</summary>
<div class="sourceCode" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb22-1"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">PUT</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">_scripts/02-constant-score-search-template</span></span>
<span id="cb22-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-3">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"script"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-4">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"lang"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mustache"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-5">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-6">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"function_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-9">            <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bool"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-10">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"must"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb22-11">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-12">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"bool"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-13">                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"should"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb22-14">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-15">                        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`dis_max`</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">query</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">gets</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">max</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">an</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">array</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">clauses</span></span>
<span id="cb22-16">                        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"dis_max"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-17">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"queries"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb22-18">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-19">                              <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">`constant_score`</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">says</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">if</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">matches</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">return</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">a</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">constant</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span></span>
<span id="cb22-20">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"constant_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-21">                                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-22">                                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-23">                                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{query_string}}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-24">                                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-25">                                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-26">                                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb22-27">                                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">This</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">constant</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">returned</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">as</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span></span>
<span id="cb22-28">                                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Note</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">exact</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">number</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">chosen</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">intentionally</span></span>
<span id="cb22-29">                                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Here</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">upper</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">level</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">will</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">be</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">twice</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">lower</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">level</span></span>
<span id="cb22-30">                                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">and</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">we</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">will</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restrict</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">modifiers</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">be</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">only</span></span>
<span id="cb22-31">                                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">able</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">boost</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">by</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">at</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">most</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">100%</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">base</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span></span>
<span id="cb22-32">                                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">so</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">lower</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">level</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">can</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">not</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">exceed</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">upper</span></span>
<span id="cb22-33">                                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boost"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb22-34">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-35">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-36">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-37">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"constant_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-38">                                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"filter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-39">                                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"multi_match"</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-40">                                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"{{query_string}}"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-41">                                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fields"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cuisine"</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-42">                                    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"fuzziness"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AUTO"</span></span>
<span id="cb22-43">                                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-44">                                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb22-45">                                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boost"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-46">                              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-47">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-48">                          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-49">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-50">                      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-51">                    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-52">                  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-53">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-54">              <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb22-55">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-56">          <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb22-57">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"functions"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb22-58">            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Design</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">modifiers</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">be</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">multiplier</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">maximum</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.9999</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">base</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span></span>
<span id="cb22-59">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-60">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"weight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-61">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-62">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-63">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"field_value_factor"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-64">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"field"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-65">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"modifier"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"ln"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-66">                <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"missing"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-67">              <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb22-68">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"weight"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb22-69">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-70">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-71">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"score_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb22-72">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"boost_mode"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"multiply"</span></span>
<span id="cb22-73">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-74">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-75">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb22-76">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"params"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb22-77">      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"query_string"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"My query string"</span></span>
<span id="cb22-78">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-79">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb22-80"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p>When we re-run the evaluation, we can observe that the normalized DCG metric now has score equal to 1.0, denoting a perfect accuracy!</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>This blog post focuses on putting you in the shoe of an Elasticsearch engineer who has to derive query templates that fit the needs of a site-search enginer. We have briefly coverred the following topics:</p>
<ul>
<li>Keyword matching with multiple fields</li>
<li>Understanding default Elasticsearch scoring</li>
<li>Problems with the default TFIDF</li>
<li>Boosting search results by attributes</li>
<li>Fuzzy matching</li>
<li>Elasticsearch query templateEvaluation with Rank Evaluation API</li>
<li>Constructing query with <code>dis_max</code>and <code>constant_score</code></li>
</ul>
<p>Though definitely not optimal, I hope that parts of the blog post help you come closer to utilize Elasticsearch to help solve your own problems.</p>
<p>I also much appreciate any comments or feedbacks. If you want to discuss more, please comment on this post or open an issue in the <a href="https://github.com/dvquy13/elasticsearch-sharing">Github repo</a>.</p>
<p>Thanks all!</p>
</section>
<section id="appendix" class="level2">
<h2 class="anchored" data-anchor-id="appendix">Appendix</h2>
<section id="appendix-1-detailed-breakdown-of-default-tfidf-matching-where-length-of-the-field-value-affect-overall-matching-score" class="level3">
<h3 class="anchored" data-anchor-id="appendix-1-detailed-breakdown-of-default-tfidf-matching-where-length-of-the-field-value-affect-overall-matching-score">Appendix 1: Detailed breakdown of default TFIDF matching where length of the field value affect overall matching&nbsp;score</h3>
<details>
<summary>
Results
</summary>
<div class="sourceCode" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode json code-with-copy"><code class="sourceCode json"><span id="cb23-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-2">  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-3">    <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"hits"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-4">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-5">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"003vietnamesepho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-6">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0470967</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-7">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-8">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-9">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-10">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb23-11">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb23-12">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_explanation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-13">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0470967</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-14">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-15">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-16">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-17">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13353139</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-18">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-19">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-20">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-21">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13353139</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-22">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(cuisine:vietnamese in 0) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-23">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-24">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-25">              <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-26">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-27">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-28">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0470967</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-29">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-30">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-31">                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"vietnamese"</span></span>
<span id="cb23-32">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-33">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52354836</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-34">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(restaurant_name:vietnamese in 0) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-35">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-36">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-37">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52354836</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-38">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score(freq=1.0), computed as boost * idf * tf from:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-39">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-40">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-41">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-42">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boost"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-43">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb23-44">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-45">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-46">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">47000363</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-47">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"idf, computed as log(1 + (N - n + 0.5) / (n + 0.5)) from:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-48">                          <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb23-49">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-50">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-51">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50632906</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-52">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-53">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-54">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-55">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-56">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"freq, occurrences of term within document"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-57">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb23-58">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-59">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-60">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-61">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"k1, term saturation parameter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-62">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb23-63">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-64">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-65">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">75</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-66">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b, length normalization parameter"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-67">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb23-68">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-69">                            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Notice</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">length=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">here</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">is</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">in</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">denominator</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-70">                            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">which</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">means</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">that</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">higher</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">length</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">less</span></span>
<span id="cb23-71">                            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span></span>
<span id="cb23-72">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-73">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-74">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dl, length of field"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-75">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb23-76">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-77">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-78">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">2.6666667</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-79">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"avgdl, average length of field"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-80">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb23-81">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-82">                          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-83">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-84">                      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-85">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-86">                  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-87">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-88">                <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Matching</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">score</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">with</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pho"</span></span>
<span id="cb23-89">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-90">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">52354836</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-91">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(restaurant_name:pho in 0) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-92">                  <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Details</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">are</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">exactly</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">like</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">above</span></span>
<span id="cb23-93">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-94">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-95">              <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-96">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-97">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-98">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-99">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-100">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-101">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_id"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"002vietnamesephonoodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-102">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_score"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8942772</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-103">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_source"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-104">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"restaurant_name"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese Pho Noodle"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-105">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"cuisine"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vietnamese"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-106">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"rating"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb23-107">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">},</span></span>
<span id="cb23-108">        <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"_explanation"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-109">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8942772</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-110">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"max of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-111">          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-112">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-113">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13353139</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-114">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-115">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-116">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-117">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-118">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8942772</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-119">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sum of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-120">              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-121">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-122">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4471386</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-123">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(restaurant_name:vietnamese in 1) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-124">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-125">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-126">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4471386</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-127">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"score(freq=1.0), computed as boost * idf * tf from:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-128">                      <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-129">                        <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-130">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-131">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4324324</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-132">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tf, computed as freq / (freq + k1 * (1 - b + b * dl / avgdl)) from:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-133">                          <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span></span>
<span id="cb23-134">                            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-135">                            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">Here</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">length=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">(greater</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">than</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">length=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">of</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">the</span></span>
<span id="cb23-136">                            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">#</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">above</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">restaurant)</span></span>
<span id="cb23-137">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-138">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-139">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dl, length of field"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-140">                              <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[]</span></span>
<span id="cb23-141">                            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-142">                            <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span></span>
<span id="cb23-143">                          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-144">                        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-145">                      <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-146">                    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-147">                  <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-148">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-149">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">{</span></span>
<span id="cb23-150">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"value"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">.</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4471386</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-151">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"description"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"weight(restaurant_name:pho in 1) [PerFieldSimilarity], result of:"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb23-152">                  <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">"details"</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">:</span> <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">...</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-153">                <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-154">              <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-155">            <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-156">          <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-157">        <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-158">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-159">    <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb23-160">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb23-161"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">}</span></span></code></pre></div>
</details>
<p><br> If you find this article helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (Jun 2023). A Hierarchical approach with Elasticsearch: Lessons from 22 Months of Iteration. dvquys.com. https://dvquys.com/posts/site-search-elasticsearch/.</p>
</blockquote>


</section>
</section>

 ]]></description>
  <category>tech</category>
  <category>search</category>
  <guid>https://dvquys.com/posts/site-search-elasticsearch/</guid>
  <pubDate>Wed, 31 May 2023 16:00:00 GMT</pubDate>
</item>
<item>
  <title>From Model to Production: Deploying Your Machine Learning Solution on Google Cloud</title>
  <link>https://dvquys.com/posts/deploy-ml-gcp/</link>
  <description><![CDATA[ 





<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
This article is originally published in <a href="https://medium.com/vinid/what-i-learned-about-deploying-machine-learning-application-c7bfd654f999">VinID Engineering</a>
</div>
</div>
<div class="callout-body-container callout-body">

</div>
</div>
<p>Imagine a company named Rainbow imports boxes of flowers and need to classify them into species. For six months, they have some staff label the boxes manually. Now, they hire you to build a Machine Learning model to do the task.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://dvquys.com/posts/deploy-ml-gcp/img-1.webp" class="img-fluid figure-img"></p>
<figcaption>Source: <a href="https://hackernoon.com/top-5-machine-learning-projects-for-beginners-47b184e7837f">Hackernoon</a></figcaption>
</figure>
</div>
<p>With a small amount of labelled data as input and tons of experience working on Kaggle projects, you quickly develop a 95% accuracy using simple RandomForestClassifier from the popular scikit-learn library. Nice. Stakeholders approve and ask you when you could <strong>deploy that model to production.</strong></p>
<p>Hmm, deploy a model from my laptop?&nbsp;…</p>
<p>In case you wonder, I hope this tutorial will help you understand one among some common and most simple approaches. The diagram below depicts how we will use Google Cloud Platform to do the job in a batch-processing manner.</p>
<div class="column-page">
<p><a href="./img-2.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-2.png" class="img-fluid"></a></p>
</div>
<p>I choose the <a href="https://archive.ics.uci.edu/ml/datasets/iris">Iris data set</a> as our input to help you see how our approach works with small-sized problems. All the codes are in <a href="https://github.com/dvquy13/gcp_ml_pipeline">this repo</a>.</p>
<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>Like many other self-taught data people, I am familiar with manipulating data and develop a model on my laptop.</p>
<p>However, when you’re solving real-world problems, your duty does not stop after you deliver a presentation. You will have to think about how to bring that solution to the production environment.</p>
<p>Over the last few months, I have tried to deploy multiple computing pipelines. They are different in their scopes and complexity, ranging from processing a dozen of MB to 400 GB data per run. In this article, I want to summarize and share what I learned.</p>
</section>
<section id="the-targeted-audience" class="level2">
<h2 class="anchored" data-anchor-id="the-targeted-audience">The targeted&nbsp;audience</h2>
<p>This post is for data analysts/scientists who want to deploy their local solution, especially those without a software engineering background.</p>
<p>You will need Cloud Dataproc to proceed. This product allows you to spin up a cluster of machines to run your computing job in a distributed manner. Please refer to <a href="https://cloud.google.com/dataproc/">this documentation</a> if you don’t know what Dataproc is.</p>
</section>
<section id="agenda" class="level2">
<h2 class="anchored" data-anchor-id="agenda">Agenda</h2>
<ol type="1">
<li>Discuss the approach</li>
<li>Step-by-step instructions to create the infrastructure and run the pipeline</li>
<li>Explain codebase</li>
<li>Introduce other extended components, including Big Data processing with Apache Spark, scheduler with Airflow, local development environment, unit testing</li>
<li>Summary</li>
</ol>
</section>
<section id="approaches" class="level2">
<h2 class="anchored" data-anchor-id="approaches">Approaches</h2>
<section id="about-writing-codes" class="level3">
<h3 class="anchored" data-anchor-id="about-writing-codes">About writing&nbsp;codes</h3>
<p><strong>Instead of writing a long script to do everything, we break a pipeline into tasks and checkpoint interim data to disk.</strong> For example, after doing preprocess on train and test data, we dump both the data outputs and the transformer to Google Cloud Storage. We then load those objects as inputs for the next step.</p>
<p>This strategy has several purposes. First, for a long-running task, if a job fails at one of the last steps, we can re-run the pipeline from the nearest checkpoint rather than wasting time and resources restarting the whole pipeline. Second, it allows us to (1) debug more easily, (2) get alert when things break and (3) monitor interim outputs. Lastly, decoupled components can be understood more clearly, and easier to be replaced or extended later.</p>
</section>
<section id="about-computing-resources" class="level3">
<h3 class="anchored" data-anchor-id="about-computing-resources">About computing resources</h3>
<p>Normally for a small input size, we are fine with setting up a single virtual machine on the cloud. However, in some companies with mature cloud practice, the overhead of managing that VM is a type of cost that is difficult to justify. Especially when we have better options. <strong>For instance, Cloud Dataproc provides us with virtual machines that only live for the duration of one run, thereby free us from managing the machines.</strong> In this post, we explore Dataproc as our main engine for all the computing process.</p>
</section>
</section>
<section id="step-by-step-instructions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="step-by-step-instructions">Step-by-step instructions</h2>
<section id="create-a-gcp-project-and-enable-necessary-components" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="create-a-gcp-project-and-enable-necessary-components">Create a GCP project and enable necessary components</h3>
<ol type="1">
<li>👉 Create a free GCP account with $300 credit by going to <a href="https://console.cloud.google.com/getting-started">console.cloud.google.com</a>. <strong>Beware that by following this tutorial, you might incur a cost of about $0.2–$0.5.</strong></li>
</ol>
<div class="column-page">
<p><a href="./img-3.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-3.png" class="img-fluid"></a></p>
</div>
<ol start="2" type="1">
<li>👉 Click Billing at the left sidebar and initiate a billing account to be able to use the components used in this tutorial</li>
</ol>
<div class="column-page">
<p><a href="./img-4.png" class="lightbox" data-gallery="quarto-lightbox-gallery-3"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-4.png" class="img-fluid"></a></p>
</div>
<ol start="3" type="1">
<li><p>👉 Select <strong>Library</strong>, then search and enable the following API: Cloud Dataproc, Cloud Storage and Cloud Firestore.</p></li>
<li><p>👉 Navigate to the Firestore either by scrolling the sidebar to the left or search from the top menu bar. When you arrive at the below screen, choose <strong>SELECT NATIVE MODE</strong>, then choose <code>us-east1</code> as the location.</p></li>
</ol>
<div class="column-page">
<p><a href="./img-5.png" class="lightbox" data-gallery="quarto-lightbox-gallery-4"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-5.png" class="img-fluid"></a></p>
</div>
</section>
<section id="environment-setup" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="environment-setup">Environment setup</h3>
<section id="step-1-launch-terminal-window" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="step-1-launch-terminal-window">Step 1: Launch terminal window</h4>
<ol type="1">
<li>👉 At the home page of your GCP project, select the command button to the right of your menubar. The CloudShell window then appears as you can see below:</li>
</ol>
<div class="column-page">
<p><a href="./img-6.png" class="lightbox" data-gallery="quarto-lightbox-gallery-5"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-6.png" class="img-fluid"></a></p>
</div>
<ol start="6" type="1">
<li>👉 Launch Cloud Shell Editor:</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><a href="./img-10.png" class="lightbox" data-gallery="quarto-lightbox-gallery-6"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-10.png" class="img-fluid quarto-figure quarto-figure-center figure-img"></a></p>
</figure>
</div>
<p>It’s recommended to use Cloud Shell to follow this tutorial. However, if you’re using Linux and want to use terminal on your local machine, make sure you first <a href="https://cloud.google.com/sdk/install">install the Google Cloud SDK</a> and firebase CLI.</p>
</section>
<section id="step-2-clone-github-repo" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="step-2-clone-github-repo">Step 2: Clone Github repo</h4>
<ol start="7" type="1">
<li>👉 In the Terminal window:</li>
</ol>
<pre class="shell"><code>git clonehttps://github.com/dvquy13/gcp_ml_pipeline.git
cd gcp_ml_pipeline</code></pre>
<ol start="8" type="1">
<li>👉 Select <code>File</code> then open the file <code>gcp_ml_pipeline/configs/.project_env</code>:</li>
</ol>
<div class="column-page">
<p><a href="./img-7.png" class="lightbox" data-gallery="quarto-lightbox-gallery-7"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-7.png" class="img-fluid"></a></p>
</div>
<ol type="1">
<li>👉 Replace the values enclosed by &lt;&gt;. For the <code>GCP_PROJECT</code>, you need to provide the <code>id</code> of your GCP project. For the remaining, feel free to choose some random names for the global variables that identify your resources. The final output looks like this:</li>
</ol>
<pre class="shell"><code>GCP_PROJECT='zinc-primer-230105'
GCS_BUCKET=dvquys-tut-gcp-ml-pipeline
DATA_LOCATION=us-east1
BQ_DATASET=tut_iris
BQ_ORG_TABLE=F_ORIGINAL
CLUSTER_NAME=iris-pred</code></pre>
<ol start="10" type="1">
<li>👉 Grant <code>execute</code> permission to the folder scripts by running the command: <code>chmod +x -R&nbsp;./scripts</code>. Then, run&nbsp;<code>./scripts/00_import_data_to_bigquery.sh</code>. <a href="https://github.com/dvquy13/gcp_ml_pipeline/blob/master/scripts/00_import_data_to_bigquery.sh">Link to the script</a>.</li>
</ol>
</section>
<section id="step-3-create-dataproc-cluster-and-submit-jobs" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="step-3-create-dataproc-cluster-and-submit-jobs">Step 3: Create Dataproc cluster and submit&nbsp;jobs</h4>
<p>We use Makefile to orchestrate our actions. You can find it <a href="https://github.com/dvquy13/gcp_ml_pipeline/blob/master/Makefile">here</a>.</p>
<p>️Now, run the following commands in sequence:</p>
<ol type="1">
<li><p><code>make create-dataproc-cluster</code>: <strong>This command creates a Dataproc cluster</strong>. The <code>single-node</code> flag indicates that this is a cluster containing only one machine. <code>n1-standard-1</code> is the cheapest machine we can rent. To install Python packages, we supply the <code>metadata</code> and <code>initialization-actions</code> params.</p></li>
<li><p><code>make build</code>: <strong>Package your code</strong>, including your source code and other 3rd party libraries that you can not pre-install when creating the cluster (PyYAML for example). To submit a job to the cluster, we will send these codes to those machines via the <code>gcloud dataproc jobs submit pyspark</code> command.</p></li>
<li><p><code>make submit-job ENV=dev MODULE=data_import TASK=query_train_pred</code>: <strong>Submit job cloning input data for training and predicting.</strong> The <code>submit-job</code> <code>make</code> command allows you to use this interface to run on both local and development environments.</p></li>
<li><p><code>make submit-job ENV=dev MODULE=feature_engineer TASK=normalize</code>: <strong>Prepare features.</strong> In this illustrative example, we choose to include only normalization in the pipeline. After learning the normalization parameters from the train data set, we save those configurations for later usage.</p></li>
<li><p><code>make submit-job ENV=dev MODULE=model TASK=fit</code>: <strong>Train model.</strong> Here we build a pipeline consisting of 2 steps, Normalization and Logistic Regression. After that, we persist the fit pipeline.</p></li>
<li><p><code>make submit-job ENV=dev MODULE=predict TASK=batch_predict</code>: <strong>Batch predict.</strong> This job demonstrates the process when you use your learned model to make predictions.</p></li>
<li><p><code>make submit-job ENV=dev MODULE=predict TASK=store_predictions</code>: <strong>Store predictions.</strong> The reason we do not combine this with the above step is two-fold. First, writing to a database often takes time and requires several retries. Second, we write to a document database like Cloud Firestore because when other team uses, they typically retrieve one document per query. However, there are times when we want to inspect the whole batch of predictions (e.g.&nbsp;debugging, count number of documents scored more than 0.9). For this query pattern, we will better off using the persisted outputs from the previous step, stored as parquet files in Cloud Storage.</p></li>
<li><p><code>make delete-dataproc-cluster</code>: <strong>Delete Dataproc cluster.</strong> After the process finishes, delete the cluster so no further cost incurs.</p></li>
</ol>
<div class="column-page">
<p><a href="./img-8.png" class="lightbox" data-gallery="quarto-lightbox-gallery-8"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-8.png" class="img-fluid"></a></p>
</div>
<p>Succeeded Dataproc&nbsp;jobs</p>
<p>You can see that your predictions are stored at Cloud Firestore by accessing its web console.</p>
<div class="column-page">
<p><a href="./img-9.png" class="lightbox" data-gallery="quarto-lightbox-gallery-9"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-9.png" class="img-fluid"></a></p>
</div>
<p>Firestore populated with predictions</p>
<p>Along the way, you will see that the output data of each step is persisted in Cloud Storage. I use <code>parquet</code> rather than <code>CSV</code> as the serialization format because it can embed schema information (therefore you do not have to specify column types when reading) and reduce storage size. For more detail, please refer to <a href="https://towardsdatascience.com/the-best-format-to-save-pandas-data-414dca023e0d">this benchmark</a>.</p>
</section>
</section>
<section id="clean-up" class="level3">
<h3 class="anchored" data-anchor-id="clean-up">Clean up</h3>
<ol start="11" type="1">
<li>👉 Finally, when you’re done exploring the results, you can delete all resources by running these commands:</li>
</ol>
<pre class="shell"><code>./scripts/01_erase_resources.sh
./scripts/02_disable_resources.sh
./scripts/03_delete_project.sh</code></pre>
</section>
</section>
<section id="explain-codebase" class="level2">
<h2 class="anchored" data-anchor-id="explain-codebase">Explain codebase</h2>
<p><code>scripts/</code>: This directory contains some initial scripts, which are the steps to help you set things up. In practice, I also favor using script rather than user interfaces such as web console because it is self-documented and easy for others to follow the exact steps.</p>
<p><code>configs/</code>: Store all the arguments that need to be set initially.&nbsp;<code>.project_env</code> is a file to store the global variables used to work with GCP. We also have the <code>runtime.yaml</code>, where we <a href="https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd">use Anchor, Alias and Extension in YAML</a> to define runtime parameters for multiple environments. Both of these files serve as a centralized config store so that we can easily look up and make changes, instead of finding the configs scattered elsewhere in the code.</p>
<p><code>Makefile</code>: Originally Makefile is used to orchestrate the build process in C programming language. But it has done so well out of being just a shortcut so people start using it to facilitate ML model development. I have seen many tutorials using this tool, including <a href="https://developerzen.com/best-practices-writing-production-grade-pyspark-jobs-cb688ac4d20f">the one that inspires me to design my Pyspark codebase</a>.In this small project, we also use Makefile to save us a lot of time. As you can see above in <strong>Step 3</strong>, I put there our frequently used commands so that I can easily type <code>make &lt;something&gt;</code> to run a particular step.</p>
<p><code>iris_pred/</code>: Source code.</p>
<p><code>main.py</code>: is the interface to all tasks. This file parses the arguments to load config and get the job name, then call <code>analyze</code> function in <code>entry_point.py</code> from the appropriate module.</p>
<p><code>jobs/</code>: contain tasks as modules. Inside <code>jobs</code>, we have one module corresponding to a step in our pipeline. All these modules expose an <code>entry_point.py</code> file where we unify the API to easily and consistently communicate with <code>main.py</code>.</p>
<details>
<summary>
Code: train.py
</summary>
<div class="code-with-filename">
<div class="code-with-filename-file">
<pre><strong>iris_pred/jobs/model/train.py</strong></pre>
</div>
<div class="sourceCode" id="cb4" data-filename="iris_pred/jobs/model/train.py" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb4-2">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> subprocess</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> shared.io_handler <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> IOHandler</span>
<span id="cb4-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> jobs.feature_engineer.normalize <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FeatureNormalizer</span>
<span id="cb4-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.externals <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb4-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LogisticRegression</span>
<span id="cb4-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_pipeline</span>
<span id="cb4-10"></span>
<span id="cb4-11"></span>
<span id="cb4-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Trainer:</span>
<span id="cb4-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, params, load: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>):</span>
<span id="cb4-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> params</span>
<span id="cb4-15"></span>
<span id="cb4-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.io_handler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> IOHandler(params)</span>
<span id="cb4-17">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.interim_output_path, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.final_output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-18">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._get_fpath()</span>
<span id="cb4-19"></span>
<span id="cb4-20">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-21">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-22">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb4-23"></span>
<span id="cb4-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _get_fpath(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-25">        interim_output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-26">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'../</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>params<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>io<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pipeline<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/pipeline.joblib'</span></span>
<span id="cb4-27">        final_output_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-28">            <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>io_handler<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>fpath_dict<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>pipeline<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/pipeline.joblib'</span></span>
<span id="cb4-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> interim_output_path, final_output_path</span>
<span id="cb4-30"></span>
<span id="cb4-31">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _load_train_data(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-32">        X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.io_handler.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'X_train'</span>)</span>
<span id="cb4-33">        y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.io_handler.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y_train'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'species'</span>]</span>
<span id="cb4-34">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> X_train, y_train</span>
<span id="cb4-35"></span>
<span id="cb4-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _load_transformer(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-37">        normalizer_wrapper <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FeatureNormalizer(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params, load<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-38">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalizer <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> normalizer_wrapper.normalizer</span>
<span id="cb4-39"></span>
<span id="cb4-40">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _initiate_learner(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-41">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LogisticRegression()</span>
<span id="cb4-42"></span>
<span id="cb4-43">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _make_pipeline(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-44">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_pipeline(</span>
<span id="cb4-45">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.normalizer,</span>
<span id="cb4-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.learner)</span>
<span id="cb4-47"></span>
<span id="cb4-48">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _fit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, X_train, y_train):</span>
<span id="cb4-49">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pipeline.fit(X_train, y_train)</span>
<span id="cb4-50"></span>
<span id="cb4-51">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> _persist_pipeline(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-52">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Temporarily save model to disk</span></span>
<span id="cb4-53">        joblib.dump(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pipeline, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.interim_output_path)</span>
<span id="cb4-54"></span>
<span id="cb4-55">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Copy model to GCS</span></span>
<span id="cb4-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.params.env_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'local'</span>:</span>
<span id="cb4-57">            logger.info(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Persisting </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>final_output_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">..."</span>)</span>
<span id="cb4-58">            subprocess.check_output([</span>
<span id="cb4-59">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gsutil'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-m'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cp'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-r'</span>,</span>
<span id="cb4-60">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.interim_output_path,</span>
<span id="cb4-61">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.final_output_path])</span>
<span id="cb4-62"></span>
<span id="cb4-63">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb4-64">        X_train, y_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_train_data()</span>
<span id="cb4-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._load_transformer()</span>
<span id="cb4-66">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._initiate_learner()</span>
<span id="cb4-67">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._make_pipeline()</span>
<span id="cb4-68">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._fit(X_train, y_train)</span>
<span id="cb4-69">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._persist_pipeline()</span></code></pre></div>
</div>
</details>
<p>As you can see in the snippet above, the class <code>Trainer</code> expose a function <code>run</code>. Each step in the process corresponds to a private function declared in the same class.</p>
<p><code>shared/</code>: functions and classes to be reused across modules</p>
<p>In <code>io_handler.py</code>, the class IOHandler applies the principle <a href="https://en.wikipedia.org/wiki/Composition_over_inheritance">Composition Over Inheritance</a> to ease the process of loading outputs from the previous step.</p>
</section>
<section id="further-discussion" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="further-discussion">Further discussion</h2>
<p>To completely build and operate a pipeline, there is still more to be considered.</p>
<section id="apache-spark-for-bigger-data" class="level3">
<h3 class="anchored" data-anchor-id="apache-spark-for-bigger-data">Apache Spark for bigger&nbsp;data</h3>
<p>In this tutorial, we rent one small machine from Dataproc and use pandas as our preprocessing engine, which perfectly handles the case of data fit into the memory of that machine. However, often data input in real-world situations will be much bigger, therefore require us to use a distributed computing framework for scalability. In that case, you can just switch to using Apache Spark. From version 1.3, Spark introduces its DataFrame API, which greatly bears resemblance to Pandas counterpart. After porting your code from Pandas to Spark, to be able to run jobs across multiple machines, you just need to create a bigger cluster with a master and multiple workers.</p>
</section>
<section id="apache-airflow-for-orchestration" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="apache-airflow-for-orchestration">Apache Airflow for orchestration</h3>
<p>Most of the batch job is not ad hoc. If it is, we should not even think about putting effort to standardize the process in the first place. <a href="https://airflow.apache.org/">Apache Airflow</a> can play the role of both a scheduler and a monitor. It keeps metadata of each run and can send you alerts when things fail.</p>
<div class="page-columns page-full">
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p class="page-columns page-full"><a href="./img-11.png" class="lightbox page-columns page-full" data-gallery="quarto-lightbox-gallery-10" title="Example of Airflow DAG: Source"><img src="https://dvquys.com/posts/deploy-ml-gcp/img-11.png" class="img-fluid figure-img column-page" alt="Example of Airflow DAG: Source"></a></p>
<figcaption>Example of Airflow DAG: <a href="https://www.google.com/url?sa=i&amp;source=images&amp;cd=&amp;ved=2ahUKEwiHu5jc1dfmAhWULqYKHaQKBBAQjRx6BAgBEAQ&amp;url=https%3A%2F%2Fwww.astronomer.io%2Fguides%2Fsubdags&amp;psig=AOvVaw1KeFNXmbAOrSVsWWG3HOSK&amp;ust=1577599347094494">Source</a></figcaption>
</figure>
</div>
</div>
<p>An alternative is Dataproc Workflows. This is a native solution offered by GCP, but I haven’t tried it myself so I will just leave the documentation <a href="https://cloud.google.com/dataproc/docs/concepts/workflows/using-workflows">here</a>.</p>
</section>
<section id="local-development" class="level3">
<h3 class="anchored" data-anchor-id="local-development">Local development</h3>
<p>Because rarely our codes work the first time we write them, it’s very important to be able to quickly test without having to go through all the boilerplate steps from setting up variables to requesting cloud resources. My suggestion is that we should set up our local environment asap. We can install Apache Spark 2.4.3+ to act as our runner engine, and MongoDB to be our alternative for Cloud Firestore. Here in the code repo, you can still refer to some line containing what I call the “environment branching logic”, which enables you to switch between running the same code on both local and cloud environments.</p>
</section>
<section id="unit-testing" class="level3">
<h3 class="anchored" data-anchor-id="unit-testing">Unit testing</h3>
<p>Many people have already talked about unit testing, so I won’t go too detailed here. I also don’t do unit testing in this tutorial for the sake of simplicity. However, I strongly encourage you to add testing yourself. Whatever it takes, unit testing forces us to modularize our code and add a layer of alerting. This is very important because things in data science often break in silence.</p>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Here is a summary of what you have learned in this tutorial:</p>
<ol type="1">
<li>How to utilize different Google Cloud Platform components to build a batch job pipeline (whether it involves ML or not).</li>
<li>A product named Google Cloud Dataproc, where you can both submit a light-weight job via single-node mode and easily scale to a cluster of computers.</li>
<li>One approach to structurize ML pipeline codebase: <a href="https://github.com/dvquy13/gcp_ml_pipeline">Link to the repo</a>.</li>
<li>Some convenient components in model development, e.g.&nbsp;Makefile, runtime config, parquet persistence. This mostly helps people with little or no software engineering background.</li>
</ol>
<p>Again, one of my main goals in writing this article is to receive feedback from the community, so I can do my job better. Please feel free me leave me comments, and I hope you guys enjoy this tutorial.</p>
</section>
<section id="references" class="level2">
<h2 class="anchored" data-anchor-id="references">References</h2>
<ol type="1">
<li><p>Ricky Kim. (Dec 2018). PySpark Sentiment Analysis on Google Dataproc. towardsdatascience.com. <a href="https://towardsdatascience.com/step-by-step-tutorial-pyspark-sentiment-analysis-on-google-dataproc-fef9bef46468">https://towardsdatascience.com/step-by-step-tutorial-pyspark-sentiment-analysis-on-google-dataproc-fef9bef46468</a>.</p></li>
<li><p>Evan Kampf. (Jan 2017). Best Practices Writing Production-Grade PySpark Jobs. developerzen.com. <a href="https://developerzen.com/best-practices-writing-production-grade-pyspark-jobs-cb688ac4d20f">https://developerzen.com/best-practices-writing-production-grade-pyspark-jobs-cb688ac4d20f</a>.</p></li>
<li><p>King Chung Huang. (Oct 2017). Don’t Repeat Yourself with Anchors, Aliases and Extensions in Docker Compose Files. medium.com. <a href="https://medium.com/@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd">https://medium.com/<span class="citation" data-cites="kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd">@kinghuang/docker-compose-anchors-aliases-extensions-a1e4105d70bd</span></a>.</p></li>
</ol>
<hr>
</section>
<section id="credits" class="level2">
<h2 class="anchored" data-anchor-id="credits">Credits</h2>
<p>Kudos to Bido for reviewing my work; to anh Khanh, anh Linh, anh Tuan for providing me feedback.</p>
<p><br> If you find this article helpful, please cite this writeup as:</p>
<blockquote class="blockquote">
<p>Quy, Dinh. (Feb 2020). From Model to Production: Deploying Your Machine Learning Solution on Google Cloud. dvquys.com. https://dvquys.com/posts/deploy-ml-gcp/.</p>
</blockquote>


</section>

 ]]></description>
  <category>tech</category>
  <category>machine learning</category>
  <guid>https://dvquys.com/posts/deploy-ml-gcp/</guid>
  <pubDate>Sun, 16 Feb 2020 16:00:00 GMT</pubDate>
</item>
</channel>
</rss>
